#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Render.com
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Render.com...\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
const requiredFiles = [
  'render.yaml',
  'env.render.example',
  'RENDER_DEPLOYMENT.md',
  'package.json',
  'server/index.js'
];

console.log('üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤:');
let allFilesExist = true;
requiredFiles.forEach(file => {
  const exists = fs.existsSync(path.join(__dirname, file));
  console.log(`  ${exists ? '‚úÖ' : '‚ùå'} ${file}`);
  if (!exists) allFilesExist = false;
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º package.json
console.log('\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ package.json:');
try {
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã
  const requiredScripts = ['build', 'start'];
  requiredScripts.forEach(script => {
    const exists = packageJson.scripts && packageJson.scripts[script];
    console.log(`  ${exists ? '‚úÖ' : '‚ùå'} script: ${script}`);
    if (!exists) allFilesExist = false;
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º main
  const main = packageJson.main;
  console.log(`  ${main === 'server/index.js' ? '‚úÖ' : '‚ùå'} main: ${main}`);
  if (main !== 'server/index.js') allFilesExist = false;
  
} catch (error) {
  console.log('  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è package.json:', error.message);
  allFilesExist = false;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º server/index.js
console.log('\nüñ•Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ server/index.js:');
try {
  const serverContent = fs.readFileSync('server/index.js', 'utf8');
  
  const checks = [
    { name: '–°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–¥–∞—á–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞', pattern: /express\.static.*dist/ },
    { name: 'SPA fallback', pattern: /app\.get\('\*'/ },
    { name: 'CORS –¥–ª—è render.com', pattern: /render\.com/ },
    { name: 'NODE_ENV –ø—Ä–æ–≤–µ—Ä–∫–∞', pattern: /NODE_ENV.*production/ }
  ];
  
  checks.forEach(check => {
    const found = check.pattern.test(serverContent);
    console.log(`  ${found ? '‚úÖ' : '‚ùå'} ${check.name}`);
    if (!found) allFilesExist = false;
  });
  
} catch (error) {
  console.log('  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è server/index.js:', error.message);
  allFilesExist = false;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º render.yaml
console.log('\n‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ render.yaml:');
try {
  const renderYaml = fs.readFileSync('render.yaml', 'utf8');
  
  const checks = [
    { name: '–¢–∏–ø —Å–µ—Ä–≤–∏—Å–∞', pattern: /type:\s*web/ },
    { name: 'Build –∫–æ–º–∞–Ω–¥–∞', pattern: /buildCommand/ },
    { name: 'Start –∫–æ–º–∞–Ω–¥–∞', pattern: /startCommand/ },
    { name: 'DISABLE_PROXY', pattern: /DISABLE_PROXY/ }
  ];
  
  checks.forEach(check => {
    const found = check.pattern.test(renderYaml);
    console.log(`  ${found ? '‚úÖ' : '‚ùå'} ${check.name}`);
    if (!found) allFilesExist = false;
  });
  
} catch (error) {
  console.log('  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è render.yaml:', error.message);
  allFilesExist = false;
}

// –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
console.log('\n' + '='.repeat(50));
if (allFilesExist) {
  console.log('üéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ Render.com');
  console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('1. –°–æ–∑–¥–∞–π—Ç–µ PostgreSQL —Å–µ—Ä–≤–∏—Å –≤ Render.com');
  console.log('2. –°–æ–∑–¥–∞–π—Ç–µ Web Service –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π');
  console.log('3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  console.log('4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –¥–µ–ø–ª–æ–π');
  console.log('5. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ë–î: npm run init-db');
} else {
  console.log('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º.');
}
console.log('='.repeat(50));

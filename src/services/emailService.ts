import emailjs from '@emailjs/browser';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ EmailJS (–≤ production —ç—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –±—É–¥—É—Ç –∏–∑ .env)
const EMAILJS_PUBLIC_KEY = process.env.REACT_APP_EMAILJS_PUBLIC_KEY || 'your_public_key';
const EMAILJS_SERVICE_ID = process.env.REACT_APP_EMAILJS_SERVICE_ID || 'your_service_id';
const EMAILJS_TEMPLATE_ID = process.env.REACT_APP_EMAILJS_TEMPLATE_ID || 'your_template_id';

interface DashboardAccessData {
  userEmail: string;
  dashboardPassword: string;
  dashboardUrl: string;
}

export const sendDashboardAccessEmail = async (data: DashboardAccessData): Promise<boolean> => {
  try {
    console.log('üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–æ—Å—Ç—É–ø–∞...');
    console.log('üìß –î–∞–Ω–Ω—ã–µ:', { 
      email: data.userEmail, 
      password: data.dashboardPassword,
      url: data.dashboardUrl 
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º EmailJS
    emailjs.init(EMAILJS_PUBLIC_KEY);

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —à–∞–±–ª–æ–Ω–∞
    const templateParams = {
      to_email: data.userEmail,
      user_email: data.userEmail,
      dashboard_password: data.dashboardPassword,
      dashboard_url: data.dashboardUrl,
      to_name: data.userEmail.split('@')[0], // –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–∞—Å—Ç—å email –¥–æ @ –∫–∞–∫ –∏–º—è
    };

    console.log('üìß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∞–±–ª–æ–Ω–∞:', templateParams);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
    const response = await emailjs.send(
      EMAILJS_SERVICE_ID,
      EMAILJS_TEMPLATE_ID,
      templateParams
    );

    console.log('‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', response);
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email:', error);
    return false;
  }
};

export const checkEmailJSConfig = () => {
  const isConfigured = EMAILJS_PUBLIC_KEY !== 'your_public_key' && 
                      EMAILJS_SERVICE_ID !== 'your_service_id' && 
                      EMAILJS_TEMPLATE_ID !== 'your_template_id';
  
  console.log('üìß EmailJS –Ω–∞—Å—Ç—Ä–æ–µ–Ω:', isConfigured);
  return isConfigured;
};

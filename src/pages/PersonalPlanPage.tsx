import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { 
  Typography, 
  Button, 
  Input, 
  Form, 
  message,
  Space
} from 'antd'; 
import { apiRequest } from '../config/api'; 
import { 
  DownloadOutlined, 
  UserOutlined, 
  FileTextOutlined, 
  MessageOutlined,
  CheckOutlined
} from '@ant-design/icons';
import { useThemeColor } from '../hooks/useThemeColor';
import { useAuth } from '../hooks/useAuth';

const { Title, Text } = Typography;
const { TextArea } = Input;

const PersonalPlanPage: React.FC = () => {
  const navigate = useNavigate();
  const { isAuthenticated, isLoading, authData, logout } = useAuth();
  const [psychologistForm] = Form.useForm();
  const [feedbackText, setFeedbackText] = useState('');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è AI –æ–ø–µ—Ä–∞—Ü–∏–π
  const [loadingPersonalPlan, setLoadingPersonalPlan] = useState(false);
  const [loadingSessionPreparation, setLoadingSessionPreparation] = useState(false);
  const [loadingPsychologistRecommendations, setLoadingPsychologistRecommendations] = useState(false);
  const [psychologistRequestSent, setPsychologistRequestSent] = useState(false); // –ê–Ω–∏–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏
  const [loadingFeedback, setLoadingFeedback] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  const [documentsStatus, setDocumentsStatus] = useState({
    personal_plan: false,
    session_preparation: false,
    psychologist_pdf: false,
    generation_completed: false
  });
  const [checkingStatus, setCheckingStatus] = useState(true);
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞ –¥–ª—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ —Ñ–æ–Ω–∞
  useThemeColor('#c3cfe2');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –µ—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
  useEffect(() => {
    if (!isLoading && !isAuthenticated) {
      console.log('‚ùå [PERSONAL PLAN] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –ª–æ–≥–∏–Ω');
      message.error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç');
      navigate('/lk/login', { replace: true });
    }
  }, [isLoading, isAuthenticated, navigate]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    if (isAuthenticated && authData?.sessionId) {
      checkDocumentsStatus();
    }
  }, [isAuthenticated, authData?.sessionId]);

  const checkDocumentsStatus = async () => {
    try {
      setCheckingStatus(true);
      const response = await apiRequest(`api/background-generation/status/${authData?.sessionId}`, {
        method: 'GET',
      });
      
      if (response.ok) {
        const data = await response.json();
        console.log('üìä [PERSONAL PLAN] –°—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', data);
        
        setDocumentsStatus({
          personal_plan: data.documents.personal_plan,
          session_preparation: data.documents.session_preparation,
          psychologist_pdf: data.documents.psychologist_pdf,
          generation_completed: data.status === 'completed'
        });
      }
    } catch (error) {
      console.error('‚ùå [PERSONAL PLAN] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:', error);
    } finally {
      setCheckingStatus(false);
    }
  };

  const handleLogout = () => {
    console.log('üö™ [LOGOUT] –í—ã—Ö–æ–¥ –∏–∑ –õ–ö');
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é logout –∏–∑ —Ö—É–∫–∞ useAuth
    logout();
    navigate('/', { replace: true });
  };

  // –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–æ–±–∏–ª—å–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
  const isMobileSafari = () => {
    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    const isSafari = /Safari/i.test(navigator.userAgent) && !/Chrome/i.test(navigator.userAgent);
    return isMobile && isSafari;
  };

  // –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è PDF
  const openPdf = (url: string, filename: string, successMessage: string) => {
    if (isMobileSafari()) {
      // –î–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ Safari –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
      const link = document.createElement('a');
      link.href = url;
      link.download = filename;
      link.style.display = 'none';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      message.success(`${successMessage} —Å–∫–∞—á–∞–Ω!`);
    } else {
      // –î–ª—è –¥–µ—Å–∫—Ç–æ–ø–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
      const newWindow = window.open(url, '_blank');
      if (newWindow) {
        message.success(`${successMessage} –æ—Ç–∫—Ä—ã—Ç –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ!`);
      } else {
        // Fallback: –µ—Å–ª–∏ popup –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, —Å–∫–∞—á–∏–≤–∞–µ–º
        const link = document.createElement('a');
        link.href = url;
        link.download = filename;
        link.style.display = 'none';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        message.success(`${successMessage} —Å–∫–∞—á–∞–Ω!`);
      }
    }
    
    // –û—á–∏—â–∞–µ–º URL —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => window.URL.revokeObjectURL(url), 5000);
  };

  const downloadPersonalPlan = async () => {
    setLoadingPersonalPlan(true);
    try {
      const response = await apiRequest(`api/background-generation/download/personal-plan/${authData?.sessionId}`, {
        method: 'GET',
      });

      if (response.ok) {
        const pdfBlob = await response.blob();
        const url = window.URL.createObjectURL(pdfBlob);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è PDF
        openPdf(url, 'personal-plan.pdf', '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω');
      } else {
        const errorData = await response.json();
        message.error(errorData.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞');
      }
    } catch (error) {
      console.error('Error downloading personal plan:', error);
      message.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞');
    } finally {
      setLoadingPersonalPlan(false);
    }
  };

  const downloadSessionPreparation = async (specialistType: 'psychologist' | 'psychiatrist') => {
    setLoadingSessionPreparation(true);
    try {
      const response = await apiRequest(`api/background-generation/download/session-preparation/${authData?.sessionId}`, {
        method: 'GET',
      });

      if (response.ok) {
        const pdfBlob = await response.blob();
        const url = window.URL.createObjectURL(pdfBlob);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è PDF
        openPdf(url, `session-preparation-${specialistType}.pdf`, '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–µ–∞–Ω—Å—É');
      } else {
        const errorData = await response.json();
        message.error(errorData.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–µ–∞–Ω—Å—É');
      }
    } catch (error) {
      console.error('Error downloading session preparation:', error);
      message.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–µ–∞–Ω—Å—É');
    } finally {
      setLoadingSessionPreparation(false);
    }
  };

  const handlePsychologistRequest = async (values: any) => {
    console.log('üöÄ [PERSONAL-PLAN] –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏:', values);
    try {
      // –ü–æ–ª—É—á–∞–µ–º UTM-–º–µ—Ç–∫–∏ –∏–∑ URL
      const urlParams = new URLSearchParams(window.location.search);
      const utmData = {
        utmSource: urlParams.get('utm_source'),
        utmMedium: urlParams.get('utm_medium'),
        utmCampaign: urlParams.get('utm_campaign'),
        utmTerm: urlParams.get('utm_term'),
        utmContent: urlParams.get('utm_content')
      };

      console.log('üì§ [PERSONAL-PLAN] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
      const response = await apiRequest('api/telegram/psychologist-request', {
        method: 'POST',
        body: JSON.stringify({
          sessionId: authData?.sessionId,
          ...values,
          ...utmData
        }),
      });
      console.log('üì• [PERSONAL-PLAN] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status);

      if (response.ok) {
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        console.log('üéâ [PERSONAL-PLAN] –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏');
        setPsychologistRequestSent(true);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        message.success({
          content: (
            <div style={{ 
              display: 'flex', 
              alignItems: 'center', 
              gap: '12px',
              fontSize: '16px',
              fontWeight: '500'
            }}>
              <CheckOutlined style={{ color: '#52c41a', fontSize: '20px' }} />
              <div>
                <div style={{ color: '#52c41a', fontWeight: '600' }}>
                  –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!
                </div>
                <div style={{ color: '#666', fontSize: '14px', marginTop: '4px' }}>
                  –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è
                </div>
              </div>
            </div>
          ),
          duration: 5,
          style: {
            marginTop: '20px',
            borderRadius: '12px',
            boxShadow: '0 4px 20px rgba(0, 0, 0, 0.15)',
            border: '1px solid #52c41a'
          }
        });
        
        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        psychologistForm.resetFields();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          console.log('üîÑ [PERSONAL-PLAN] –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏');
          setPsychologistRequestSent(false);
        }, 3000);
      } else {
        message.error({
          content: (
            <div style={{ 
              display: 'flex', 
              alignItems: 'center', 
              gap: '12px',
              fontSize: '16px',
              fontWeight: '500'
            }}>
              <div style={{ color: '#ff4d4f' }}>
                ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏
              </div>
            </div>
          ),
          duration: 4,
          style: {
            marginTop: '20px',
            borderRadius: '12px',
            boxShadow: '0 4px 20px rgba(0, 0, 0, 0.15)',
            border: '1px solid #ff4d4f'
          }
        });
      }
    } catch (error) {
      console.error('‚ùå [PERSONAL-PLAN] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏:', error);
      console.error('‚ùå [PERSONAL-PLAN] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.message, error.stack);
      message.error({
        content: (
          <div style={{ 
            display: 'flex', 
            alignItems: 'center', 
            gap: '12px',
            fontSize: '16px',
            fontWeight: '500'
          }}>
            <div style={{ color: '#ff4d4f' }}>
              ‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏
            </div>
          </div>
        ),
        duration: 4,
        style: {
          marginTop: '20px',
          borderRadius: '12px',
          boxShadow: '0 4px 20px rgba(0, 0, 0, 0.15)',
          border: '1px solid #ff4d4f'
        }
      });
    }
  };

  const downloadPsychologistRecommendations = async () => {
    setLoadingPsychologistRecommendations(true);
    try {
      const response = await apiRequest(`api/background-generation/download/psychologist-pdf/${authData?.sessionId}`, {
        method: 'GET',
      });

      if (response.ok) {
        const pdfBlob = await response.blob();
        const url = window.URL.createObjectURL(pdfBlob);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Ç–∏–ª–∏—Ç–∞—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è PDF
        openPdf(url, 'psychologist-recommendations.pdf', '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞');
      } else {
        const errorData = await response.json();
        message.error(errorData.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞');
      }
    } catch (error) {
      console.error('Error downloading psychologist recommendations:', error);
      message.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞');
    } finally {
      setLoadingPsychologistRecommendations(false);
    }
  };

  const handleFeedbackSubmit = async () => {
    if (!feedbackText.trim()) {
      message.warning('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏');
      return;
    }

    setLoadingFeedback(true);
    try {
      const response = await apiRequest('api/ai/session-feedback', {
        method: 'POST',
          body: JSON.stringify({
            sessionId: authData?.sessionId,
            feedbackText: feedbackText.trim()
          }),
      });

      if (response.ok) {
        const data = await response.json();
        if (data.success) {
          message.success('–ê–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∏–∂–µ.');
          // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
          setFeedbackText('');
        } else {
          message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏');
        }
      } else {
        message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏');
      }
    } catch (error) {
      console.error('Error submitting feedback:', error);
      message.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏');
    } finally {
      setLoadingFeedback(false);
    }
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  if (isLoading) {
    return (
      <div style={{ 
        minHeight: '100vh',
        background: 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)',
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center'
      }}>
        <div style={{ textAlign: 'center' }}>
          <div style={{ fontSize: '24px', marginBottom: '10px' }}>–ó–∞–≥—Ä—É–∑–∫–∞...</div>
          <div style={{ fontSize: '14px', color: '#666' }}>–ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é</div>
        </div>
      </div>
    );
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  if (checkingStatus) {
    return (
      <div style={{ 
        minHeight: '100vh',
        background: 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)',
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center'
      }}>
        <div style={{ textAlign: 'center' }}>
          <div style={{ fontSize: '24px', marginBottom: '10px' }}>–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã...</div>
          <div style={{ fontSize: '14px', color: '#666' }}>–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</div>
        </div>
      </div>
    );
  }

  return (
    <div style={{ 
      minHeight: '100vh',
      background: 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)',
      padding: '20px'
    }}>
      {/* Header */}
      <div style={{ 
        display: 'flex', 
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: '20px',
        maxWidth: '800px',
        margin: '0 auto 20px auto'
      }}>
        {authData?.nickname && (
          <div style={{ 
            display: 'flex',
            alignItems: 'center',
            gap: '12px'
          }}>
            <div style={{
              width: '40px',
              height: '40px',
              borderRadius: '50%',
              backgroundColor: '#60CDEA',
              color: '#ffffff',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              fontSize: '18px',
              fontWeight: '600'
            }}>
              {authData?.nickname.charAt(0).toUpperCase()}
            </div>
            <Text style={{ 
              fontSize: '18px',
              fontWeight: '500',
              color: '#333'
            }}>
              {authData?.nickname}
            </Text>
          </div>
        )}
        <Button 
          type="primary"
          onClick={handleLogout}
          style={{ 
            backgroundColor: '#60CDEA',
            borderColor: '#60CDEA',
            color: '#ffffff',
            fontSize: '16px',
            fontWeight: '500',
            height: '40px',
            borderRadius: '20px'
          }}
        >
          –í—ã–π—Ç–∏
        </Button>
      </div>

      {/* Main container */}
      <div style={{ 
        maxWidth: '800px', 
        margin: '0 auto'
      }}>
        <div style={{ textAlign: 'center', marginBottom: '40px' }}>
          <Title level={1} style={{ 
            color: '#2C3E50',
            fontSize: '32px',
            fontWeight: '600',
            marginBottom: '10px',
            fontFamily: 'Comfortaa, sans-serif'
          }}>
            –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω
          </Title>
        </div>
        
        <div style={{ 
          display: 'grid', 
          gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))', 
          gap: '20px',
          marginBottom: '40px'
        }}>
          {/* Personal Plan Card */}
          <div style={{
            backgroundColor: 'white',
            borderRadius: '20px',
            padding: '30px',
            boxShadow: '0 4px 20px rgba(0, 0, 0, 0.1)',
            textAlign: 'center'
          }}>
            <div style={{
              width: '60px',
              height: '60px',
              borderRadius: '50%',
              backgroundColor: '#E8F4FD',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              margin: '0 auto 20px auto'
            }}>
              <DownloadOutlined style={{ fontSize: '24px', color: '#1890FF' }} />
            </div>
            <Title level={4} style={{ 
              color: '#2C3E50', 
              marginBottom: '15px',
              fontSize: '18px',
              fontWeight: '600'
            }}>
              –°–∫–∞—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω
            </Title>
            <Text style={{ 
              color: '#7B8794', 
              fontSize: '14px',
              display: 'block',
              marginBottom: '25px',
              lineHeight: '1.5'
            }}>
              –°–∫–∞—á–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö —Ç–≤–æ–∏—Ö —Ç–µ—Å—Ç–æ–≤
            </Text>
            <Button 
              type="primary"
              onClick={downloadPersonalPlan}
              loading={loadingPersonalPlan}
              disabled={!documentsStatus.personal_plan}
              style={{
                width: '100%',
                height: '45px',
                borderRadius: '22px',
                backgroundColor: documentsStatus.personal_plan ? '#60CDEA' : '#D9D9D9',
                borderColor: documentsStatus.personal_plan ? '#60CDEA' : '#D9D9D9',
                color: '#ffffff',
                fontSize: '16px',
                fontWeight: '500'
              }}
            >
              {loadingPersonalPlan ? '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω...' : 
               documentsStatus.personal_plan ? '–°–∫–∞—á–∞—Ç—å –ø–ª–∞–Ω' : '–ü–ª–∞–Ω –≥–æ—Ç–æ–≤–∏—Ç—Å—è...'}
            </Button>
          </div>

          {/* Psychologist Selection Card */}
          <div style={{
            backgroundColor: 'white',
            borderRadius: '20px',
            padding: '30px',
            boxShadow: '0 4px 20px rgba(0, 0, 0, 0.1)'
          }}>
            <div style={{ textAlign: 'center', marginBottom: '25px' }}>
              <div style={{
                width: '60px',
                height: '60px',
                borderRadius: '50%',
                backgroundColor: '#FFF2E8',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                margin: '0 auto 20px auto'
              }}>
                <UserOutlined style={{ fontSize: '24px', color: '#FA8C16' }} />
              </div>
              <Title level={4} style={{ 
                color: '#2C3E50', 
                marginBottom: '0',
                fontSize: '18px',
                fontWeight: '600'
              }}>
                –ü–æ–¥–±–æ—Ä –ø—Å–∏—Ö–æ–ª–æ–≥–∞
              </Title>
            </div>
            
            <Form
              form={psychologistForm}
              onFinish={handlePsychologistRequest}
              layout="vertical"
            >
              <Form.Item
                name="name"
                label={<span style={{ color: '#2C3E50', fontWeight: '500' }}>–ò–º—è</span>}
                rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è' }]}
              >
                <Input 
                  placeholder="–í–∞—à–µ –∏–º—è" 
                  style={{ 
                    borderRadius: '12px',
                    height: '40px'
                  }}
                />
              </Form.Item>
              <Form.Item
                name="phone"
                label={<span style={{ color: '#2C3E50', fontWeight: '500' }}>–¢–µ–ª–µ—Ñ–æ–Ω</span>}
                rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞' }]}
              >
                <Input 
                  placeholder="+7 (999) 123-45-67" 
                  style={{ 
                    borderRadius: '12px',
                    height: '40px'
                  }}
                />
              </Form.Item>
              <Form.Item
                name="email"
                label={<span style={{ color: '#2C3E50', fontWeight: '500' }}>Email</span>}
                rules={[
                  { required: true, message: '–í–≤–µ–¥–∏—Ç–µ email' },
                  { type: 'email', message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email' }
                ]}
              >
                <Input 
                  placeholder="example@email.com" 
                  style={{ 
                    borderRadius: '12px',
                    height: '40px'
                  }}
                />
              </Form.Item>
              <Form.Item
                name="telegramUsername"
                label={<span style={{ color: '#2C3E50', fontWeight: '500' }}>Telegram (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</span>}
              >
                <Input 
                  placeholder="username –∏–ª–∏ @username" 
                  style={{ 
                    borderRadius: '12px',
                    height: '40px'
                  }}
                />
              </Form.Item>
              <Button 
                type="primary" 
                htmlType="submit"
                style={{
                  width: '100%',
                  height: '45px',
                  borderRadius: '22px',
                  backgroundColor: psychologistRequestSent ? '#52c41a' : '#60CDEA',
                  borderColor: psychologistRequestSent ? '#52c41a' : '#60CDEA',
                  color: '#ffffff',
                  fontSize: '16px',
                  fontWeight: '500',
                  transition: 'all 0.3s ease',
                  transform: psychologistRequestSent ? 'scale(0.95)' : 'scale(1)'
                }}
                icon={psychologistRequestSent ? <CheckOutlined /> : null}
              >
                {psychologistRequestSent ? '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!' : '–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'}
              </Button>
            </Form>
          </div>

          {/* Session Preparation Card */}
          <div style={{
            backgroundColor: 'white',
            borderRadius: '20px',
            padding: '30px',
            boxShadow: '0 4px 20px rgba(0, 0, 0, 0.1)',
            textAlign: 'center'
          }}>
            <div style={{
              width: '60px',
              height: '60px',
              borderRadius: '50%',
              backgroundColor: '#F6FFED',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              margin: '0 auto 20px auto'
            }}>
              <FileTextOutlined style={{ fontSize: '24px', color: '#4F958B' }} />
            </div>
            <Title level={4} style={{ 
              color: '#2C3E50', 
              marginBottom: '15px',
              fontSize: '18px',
              fontWeight: '600'
            }}>
              –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–µ–∞–Ω—Å–∞–º —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º –∏ –ø—Å–∏—Ö–∏–∞—Ç—Ä–æ–º
            </Title>
            <Text style={{ 
              color: '#7B8794', 
              fontSize: '14px',
              display: 'block',
              marginBottom: '25px',
              lineHeight: '1.5'
            }}>
              –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–µ–∞–Ω—Å—É
            </Text>
            <Button 
              type="primary"
              onClick={() => downloadSessionPreparation('psychologist')}
              loading={loadingSessionPreparation}
              disabled={!documentsStatus.session_preparation}
              style={{
                width: '100%',
                height: '45px',
                borderRadius: '22px',
                backgroundColor: documentsStatus.session_preparation ? '#60CDEA' : '#D9D9D9',
                borderColor: documentsStatus.session_preparation ? '#60CDEA' : '#D9D9D9',
                color: '#ffffff',
                fontSize: '16px',
                fontWeight: '500'
              }}
            >
              {loadingSessionPreparation ? '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º...' : 
               documentsStatus.session_preparation ? '–°–∫–∞—á–∞—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É' : '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≥–æ—Ç–æ–≤–∏—Ç—Å—è...'}
            </Button>
          </div>

          {/* Psychologist Recommendations Card */}
          <div style={{
            backgroundColor: 'white',
            borderRadius: '20px',
            padding: '30px',
            boxShadow: '0 4px 20px rgba(0, 0, 0, 0.1)',
            textAlign: 'center'
          }}>
            <div style={{
              width: '60px',
              height: '60px',
              borderRadius: '50%',
              backgroundColor: '#FFF7E6',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              margin: '0 auto 20px auto'
            }}>
              <UserOutlined style={{ fontSize: '24px', color: '#FA8C16' }} />
            </div>
            <Title level={4} style={{ 
              color: '#2C3E50', 
              marginBottom: '15px',
              fontSize: '18px',
              fontWeight: '600'
            }}>
              –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –∏ –ø—Å–∏—Ö–∏–∞—Ç—Ä–∞
            </Title>
            <Text style={{ 
              color: '#7B8794', 
              fontSize: '14px',
              display: 'block',
              marginBottom: '25px',
              lineHeight: '1.5'
            }}>
              –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –∏ –ø—Å–∏—Ö–∏–∞—Ç—Ä–∞ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
            </Text>
            <Button 
              type="primary"
              onClick={downloadPsychologistRecommendations}
              loading={loadingPsychologistRecommendations}
              disabled={!documentsStatus.psychologist_pdf}
              style={{
                width: '100%',
                height: '45px',
                borderRadius: '22px',
                backgroundColor: documentsStatus.psychologist_pdf ? '#60CDEA' : '#D9D9D9',
                borderColor: documentsStatus.psychologist_pdf ? '#60CDEA' : '#D9D9D9',
                color: '#ffffff',
                fontSize: '16px',
                fontWeight: '500'
              }}
            >
              {loadingPsychologistRecommendations ? '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º...' : 
               documentsStatus.psychologist_pdf ? '–°–∫–∞—á–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏' : '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≥–æ—Ç–æ–≤—è—Ç—Å—è...'}
            </Button>
          </div>

          {/* Feedback Card */}
          <div style={{
            backgroundColor: 'white',
            borderRadius: '20px',
            padding: '30px',
            boxShadow: '0 4px 20px rgba(0, 0, 0, 0.1)'
          }}>
            <div style={{ textAlign: 'center', marginBottom: '25px' }}>
              <div style={{
                width: '60px',
                height: '60px',
                borderRadius: '50%',
                backgroundColor: '#FFF0F6',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                margin: '0 auto 20px auto'
              }}>
                <MessageOutlined style={{ fontSize: '24px', color: '#EB2F96' }} />
              </div>
              <Title level={4} style={{ 
                color: '#2C3E50', 
                marginBottom: '0',
                fontSize: '18px',
                fontWeight: '600'
              }}>
                –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
              </Title>
            </div>
            
            <Space direction="vertical" style={{ width: '100%' }}>
              <TextArea
                placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ –Ω–∞ —Å–µ–∞–Ω—Å–µ —É –ø—Å–∏—Ö–æ–ª–æ–≥–∞..."
                value={feedbackText}
                onChange={(e) => setFeedbackText(e.target.value)}
                rows={4}
                style={{ 
                  borderRadius: '12px',
                  resize: 'none'
                }}
              />
              <Button 
                type="primary" 
                onClick={handleFeedbackSubmit}
                loading={loadingFeedback}
                style={{
                  width: '100%',
                  height: '45px',
                  borderRadius: '22px',
                  backgroundColor: '#60CDEA',
                  borderColor: '#60CDEA',
                  color: '#ffffff',
                  fontSize: '16px',
                  fontWeight: '500'
                }}
              >
                {loadingFeedback ? '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...' : '–ü–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å'}
              </Button>
            </Space>
          </div>
        </div>
      </div>
    </div>
  );
};

export default PersonalPlanPage;


import React, { useState, useEffect, useRef } from 'react';
import { useSearchParams, useNavigate } from 'react-router-dom';
import { 
  Typography, 
  Button, 
  Space, 
  Input, 
  Form, 
  message, 
  Modal,
  Spin
} from 'antd'; 
import { apiRequest } from '../config/api'; 
import { 
  DownloadOutlined, 
  UserOutlined, 
  FileTextOutlined, 
  MessageOutlined,
  CheckOutlined
} from '@ant-design/icons';
import { useThemeColor } from '../hooks/useThemeColor';
import { useAuth } from '../hooks/useAuth';
import GenerationAnimation from '../components/GenerationAnimation';

const { Title, Text } = Typography;
const { TextArea } = Input;

// –≠—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ —Ç–µ—Å—Ç—ã –∏–∑ API
const fallbackTests = [
  {
    id: 1,
    name: '–¢–µ—Å—Ç –Ω–∞ –ø–æ–≥—Ä–∞–Ω–∏—á–Ω–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ª–∏—á–Ω–æ—Å—Ç–∏ (–ü–†–õ)',
    url: 'https://testometrika.com/diagnosis-of-abnormalities/do-you-have-a-border-disorder-of-personality/',
    description: '–û–Ω–ª–∞–π–Ω-—Å–∫—Ä–∏–Ω–∏–Ω–≥ —Å–∏–º–ø—Ç–æ–º–æ–≤ –ü–†–õ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º DSM-5 (—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å, –∏–º–ø—É–ª—å—Å–∏–≤–Ω–æ—Å—Ç—å –∏ –ø—Ä.)'
  },
  {
    id: 2,
    name: '–¢–µ—Å—Ç –Ω–∞ –±–∏–ø–æ–ª—è—Ä–Ω–æ–µ –∞—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–ë–ê–†)',
    url: 'https://psytests.org/diag/hcl32.html',
    description: '–û–ø—Ä–æ—Å–Ω–∏–∫ –≥–∏–ø–æ–º–∞–Ω–∏–∏ HCL-32 –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –≥–∏–ø–æ–º–∞–Ω–∏–∞–∫–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –±–∏–ø–æ–ª—è—Ä–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞'
  },
  {
    id: 3,
    name: '–¢–µ—Å—Ç –Ω–∞ —Å–∏–Ω–¥—Ä–æ–º –¥–µ—Ñ–∏—Ü–∏—Ç–∞ –≤–Ω–∏–º–∞–Ω–∏—è –∏ –≥–∏–ø–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–°–î–í–ì)',
    url: 'https://psytests.org/diag/asrs.html',
    description: '–®–∫–∞–ª–∞ ASRS v1.1 –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –í–û–ó –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–∏–º–ø—Ç–æ–º–æ–≤ –Ω–µ–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –≥–∏–ø–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'
  },
  {
    id: 4,
    name: '–¢–µ—Å—Ç –Ω–∞ –ø–æ—Å—Ç—Ç—Ä–∞–≤–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ç—Ä–µ—Å—Å–æ–≤–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–ü–¢–°–†)',
    url: 'https://psytests.org/trauma/pcl5.html',
    description: '–û–ø—Ä–æ—Å–Ω–∏–∫ PCL-5 (PTSD Checklist for DSM-5) –¥–ª—è —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞ —Å–∏–º–ø—Ç–æ–º–æ–≤ –ü–¢–°–† (–Ω–∞–≤—è–∑—á–∏–≤—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∏–∑–±–µ–≥–∞–Ω–∏–µ –∏ –¥—Ä.)'
  },
  {
    id: 5,
    name: '–¢–µ—Å—Ç –Ω–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –ø–æ—Å—Ç—Ç—Ä–∞–≤–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ç—Ä–µ—Å—Å–æ–≤–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–∫–ü–¢–°–†)',
    url: 'https://psytests.org/trauma/itq.html',
    description: '–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –æ–ø—Ä–æ—Å–Ω–∏–∫ —Ç—Ä–∞–≤–º—ã (ITQ) –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–∏–º–ø—Ç–æ–º–æ–≤ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π —Ç—Ä–∞–≤–º—ã –∏ –¥–∏—Å—Å–æ—Ü–∏–∞—Ü–∏–∏'
  },
  {
    id: 6,
    name: '–¢–µ—Å—Ç –Ω–∞ –¥–µ–ø—Ä–µ—Å—Å–∏—é',
    url: 'https://psytests.org/depression/bdi.html',
    description: '–®–∫–∞–ª–∞ –¥–µ–ø—Ä–µ—Å—Å–∏–∏ –ë–µ–∫–∞ (BDI) –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ç—è–∂–µ—Å—Ç–∏ –¥–µ–ø—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤ (21 –≤–æ–ø—Ä–æ—Å)'
  },
  {
    id: 7,
    name: '–¢–µ—Å—Ç –Ω–∞ –≥–µ–Ω–µ—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Ç—Ä–µ–≤–æ–∂–Ω–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ',
    url: 'https://psytests.org/anxiety/gad7.html',
    description: '–û–ø—Ä–æ—Å–Ω–∏–∫ GAD-7 –¥–ª—è —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞ —É—Ä–æ–≤–Ω—è –æ–±—â–µ–π —Ç—Ä–µ–≤–æ–≥–∏ –∏ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞'
  },
  {
    id: 8,
    name: '–¢–µ—Å—Ç –Ω–∞ –æ–±—Å–µ—Å—Å–∏–≤–Ω–æ-–∫–æ–º–ø—É–ª—å—Å–∏–≤–Ω–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–û–ö–†)',
    url: 'https://psytests.org/psyclinical/ybocs.html',
    description: '–û–±—Å–µ—Å—Å–∏–≤–Ω–æ-–∫–æ–º–ø—É–ª—å—Å–∏–≤–Ω–∞—è —à–∫–∞–ª–∞ –ô–µ–ª—è‚Äì–ë—Ä–∞—É–Ω–∞ (Y-BOCS) –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –≤—ã—Ä–∞–∂–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞–≤—è–∑—á–∏–≤–æ—Å—Ç–µ–π –∏ –∫–æ–º–ø—É–ª—å—Å–∏–π'
  },
  {
    id: 9,
    name: '–¢–µ—Å—Ç –Ω–∞ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–∏—â–µ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è',
    url: 'https://psytests.org/food/eat26.html',
    description: '–û–ø—Ä–æ—Å–Ω–∏–∫ –ø–∏—â–µ–≤–æ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—è EAT-26 –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç–∏ –∫ –∞–Ω–æ—Ä–µ–∫—Å–∏–∏, –±—É–ª–∏–º–∏–∏ –∏–ª–∏ –ø–µ—Ä–µ–µ–¥–∞–Ω–∏—é'
  },
  {
    id: 10,
    name: '–¢–µ—Å—Ç –Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –ø—Å–∏—Ö–æ–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤',
    url: 'https://www.samopomo.ch/proversja/test-po-vyjavleniju-rasstroistv-svjazannykh-s-upotrebleniem-narkotikov-dudit',
    description: '–û–ø—Ä–æ—Å–Ω–∏–∫ DUDIT (Drug Use Disorders Identification Test) –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –Ω–∞—Ä–∫–æ—Ç–∏–∫–æ–≤'
  },
  {
    id: 11,
    name: '–¢–µ—Å—Ç –Ω–∞ –¥–∏—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ',
    url: 'https://psytests.org/diag/des.html',
    description: '–®–∫–∞–ª–∞ –¥–∏—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—ã—Ç–∞ DES –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å—Ç–µ–ø–µ–Ω–∏ –≤—ã—Ä–∞–∂–µ–Ω–Ω–æ—Å—Ç–∏ –¥–∏—Å—Å–æ—Ü–∏–∞—Ü–∏–∏'
  },
  {
    id: 12,
    name: '–¢–µ—Å—Ç –Ω–∞ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∞—É—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–µ–∫—Ç—Ä–∞ (–†–ê–°)',
    url: 'https://psytests.org/arc/aq.html',
    description: '–û–ø—Ä–æ—Å–Ω–∏–∫ AQ (Autism Spectrum Quotient) –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –∞—É—Ç–∏—á–Ω—ã—Ö —á–µ—Ä—Ç —É –≤–∑—Ä–æ—Å–ª—ã—Ö'
  },
  {
    id: 13,
    name: '–¢–µ—Å—Ç –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ —Ç—Ä–µ–≤–æ–∂–Ω–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ',
    url: 'https://psytests.org/anxiety/lsas.html',
    description: '–®–∫–∞–ª–∞ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ –õ–∏–±–æ–≤–∏—á–∞ (LSAS) –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —É—Ä–æ–≤–Ω—è —Å–æ—Ü–∏–æ—Ñ–æ–±–∏–∏ (—Å—Ç—Ä–∞—Ö –∏ –∏–∑–±–µ–≥–∞–Ω–∏–µ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö)'
  },
  {
    id: 14,
    name: '–¢–µ—Å—Ç –Ω–∞ –ø–∞–Ω–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ',
    url: 'https://psytests.org/psyclinical/pdss.html',
    description: '–®–∫–∞–ª–∞ —Ç—è–∂–µ—Å—Ç–∏ –ø–∞–Ω–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ PDSS –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω–Ω–æ—Å—Ç–∏ –ø–∞–Ω–∏—á–µ—Å–∫–∏—Ö –∞—Ç–∞–∫ –∏ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Ç—Ä–µ–≤–æ–≥–∏'
  },
  {
    id: 15,
    name: '–¢–µ—Å—Ç –Ω–∞ –¥–∏—Å–º–æ—Ä—Ñ–æ—Ñ–æ–±–∏—é (—Ç–µ–ª–µ—Å–Ω–æ–µ –¥–∏—Å–º–æ—Ä—Ñ–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ)',
    url: 'https://psytests.org/beauty/bddq.html',
    description: '–û–ø—Ä–æ—Å–Ω–∏–∫ –¥–∏—Å–º–æ—Ä—Ñ–æ—Ñ–æ–±–∏–∏ BDDQ (Dermatology Version) –¥–ª—è —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞ –æ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏'
  },
  {
    id: 16,
    name: '–¢–µ—Å—Ç –Ω–∞ —Å—É–∏—Ü–∏–¥–∞–ª—å–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏',
    url: 'https://psytests.org/psyclinical/osr.html',
    description: '–û–ø—Ä–æ—Å–Ω–∏–∫ —Å—É–∏—Ü–∏–¥–∞–ª—å–Ω–æ–≥–æ —Ä–∏—Å–∫–∞ (–û–°–†) –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è —Å—É–∏—Ü–∏–¥–∞–ª—å–Ω—ã—Ö –º—ã—Å–ª–µ–π –∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–π'
  },
  {
    id: 17,
    name: '–¢–µ—Å—Ç –Ω–∞ –¥–µ—Ç—Å–∫—É—é —Ç—Ä–∞–≤–º—É',
    url: 'https://psytests.org/trauma/ctq.html',
    description: '–û–ø—Ä–æ—Å–Ω–∏–∫ –¥–µ—Ç—Å–∫–∏—Ö —Ç—Ä–∞–≤–º CTQ-SF (–∫—Ä–∞—Ç–∫–∞—è —Ñ–æ—Ä–º–∞) –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–ø—ã—Ç–∞ –¥–µ—Ç—Å—Ç–≤–∞'
  },
  {
    id: 18,
    name: '–¢–µ—Å—Ç –Ω–∞ —à–∏–∑–æ—Ç–∏–ø–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ª–∏—á–Ω–æ—Å—Ç–∏',
    url: 'https://psytests.org/diag/spq.html',
    description: '–û–ø—Ä–æ—Å–Ω–∏–∫ —à–∏–∑–æ—Ç–∏–ø–∏—á–µ—Å–∫–∏—Ö —á–µ—Ä—Ç –ª–∏—á–Ω–æ—Å—Ç–∏ SPQ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —à–∏–∑–æ—Ç–∏–ø–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞'
  }
];

const DashboardPage: React.FC = () => {
  const navigate = useNavigate();
  const { isAuthenticated, isLoading, authData, logout } = useAuth();
  const [mascotMessage, setMascotMessage] = useState('');
  const [recommendedTests, setRecommendedTests] = useState<any[]>([]);
  const [showTests, setShowTests] = useState(false);
  const [allTestsCompleted, setAllTestsCompleted] = useState(false);
  const [testResults, setTestResults] = useState<{[key: number]: string}>({});
  const [savingResults, setSavingResults] = useState<{[key: number]: boolean}>({});
  const completionButtonRef = useRef<HTMLDivElement>(null);
  
  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  const startBackgroundGeneration = async () => {
    try {
      console.log('üöÄ [DASHBOARD] –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å sessionId
      if (!authData?.sessionId || authData?.sessionId === true || authData?.sessionId.trim() === '') {
        console.error('‚ùå [DASHBOARD] SessionId –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', authData?.sessionId);
        message.error('–û—à–∏–±–∫–∞: –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏');
        return;
      }
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å UUID
      const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
      if (!uuidRegex.test(authData.sessionId)) {
        console.error('‚ùå [DASHBOARD] SessionId –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º UUID:', authData.sessionId);
        message.error('–û—à–∏–±–∫–∞: –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ —Å–µ—Å—Å–∏–∏');
        return;
      }
      
      setIsGenerating(true);
      setGenerationStep(0);
      setGenerationStatus('in_progress');
      
      const response = await apiRequest('api/background-generation/start', {
        method: 'POST',
        body: JSON.stringify({ sessionId: authData?.sessionId }),
      });
      
      if (response.ok) {
        const data = await response.json();
        console.log('‚úÖ [DASHBOARD] –§–æ–Ω–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞:', data);
        message.success('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞!');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞
        monitorGenerationStatus();
      } else {
        throw new Error('Failed to start background generation');
      }
    } catch (error) {
      console.error('‚ùå [DASHBOARD] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
      message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤');
      setIsGenerating(false);
      setGenerationStatus('not_started');
    }
  };
  
  const monitorGenerationStatus = async () => {
    const checkStatus = async () => {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å sessionId –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
        if (!authData?.sessionId || authData?.sessionId === true || authData?.sessionId.trim() === '') {
          console.error('‚ùå [DASHBOARD] SessionId –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', authData?.sessionId);
          return;
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å UUID
        const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
        if (!uuidRegex.test(authData.sessionId)) {
          console.error('‚ùå [DASHBOARD] SessionId –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º UUID –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', authData.sessionId);
          return;
        }
        
        const response = await apiRequest(`api/background-generation/status/${authData?.sessionId}`, {
          method: 'GET',
        });
        
        if (response.ok) {
          const data = await response.json();
          console.log('üìä [DASHBOARD] –°—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', data);
          
          setGenerationStatus(data.status);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–æ—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
          let currentStep = 0;
          if (data.documents.personal_plan) currentStep = 1;
          if (data.documents.session_preparation) currentStep = 2;
          if (data.documents.psychologist_pdf) currentStep = 3;
          
          setGenerationStep(currentStep);
          
          if (data.status === 'completed') {
            setIsGenerating(false);
            message.success('–í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã!');
            // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
            navigate('/personal-plan');
          }
        }
      } catch (error) {
        console.error('‚ùå [DASHBOARD] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
      }
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
    const interval = setInterval(checkStatus, 3000);
    
    // –û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç (–Ω–∞ —Å–ª—É—á–∞–π –∑–∞–≤–∏—Å–∞–Ω–∏—è)
    setTimeout(() => {
      clearInterval(interval);
      if (isGenerating) {
        setIsGenerating(false);
        message.warning('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, —á–µ–º –æ–∂–∏–¥–∞–ª–æ—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–æ–∑–∂–µ.');
      }
    }, 300000); // 5 –º–∏–Ω—É—Ç
  };
  const [psychologistForm] = Form.useForm();
  const [feedbackText, setFeedbackText] = useState('');
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç —Å—Ç–∞—Ç—É—Å-–±–∞—Ä–∞ –¥–ª—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ —Ñ–æ–Ω–∞
  useThemeColor('#c3cfe2');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è AI –æ–ø–µ—Ä–∞—Ü–∏–π
  const [loadingMascotMessage, setLoadingMascotMessage] = useState(false);
  const [loadingPersonalPlan, setLoadingPersonalPlan] = useState(false);
  const [loadingSessionPreparation, setLoadingSessionPreparation] = useState(false);
  const [loadingFeedback, setLoadingFeedback] = useState(false);
  const [loadingPsychologistPdf, setLoadingPsychologistPdf] = useState(false);
  const [loadingTestResults, setLoadingTestResults] = useState(true); // –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const [modalVisible, setModalVisible] = useState(false);
  const [currentTestId, setCurrentTestId] = useState<number | null>(null);
  const [modalText, setModalText] = useState('');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  const [isGenerating, setIsGenerating] = useState(false);
  const [generationStep, setGenerationStep] = useState(0);
  const [generationStatus, setGenerationStatus] = useState<'not_started' | 'in_progress' | 'completed'>('not_started');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏–º –µ—Å–ª–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
  useEffect(() => {
    if (!isLoading && !isAuthenticated) {
      console.log('‚ùå [DASHBOARD] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –ª–æ–≥–∏–Ω');
      message.error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç');
      navigate('/lk/login', { replace: true });
    }
  }, [isLoading, isAuthenticated, navigate]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
  useEffect(() => {
    if (!isAuthenticated || !authData) return;
    
    console.log('üîÑ [DASHBOARD] useEffect –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', {
      sessionId: authData?.sessionId,
      sessionIdType: typeof authData?.sessionId,
      personalPlanUnlocked: authData?.personalPlanUnlocked,
      shouldLoadTests: authData?.sessionId && authData?.personalPlanUnlocked === false
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å sessionId
    const isValidSessionId = authData?.sessionId && 
      authData.sessionId !== true && 
      typeof authData.sessionId === 'string' && 
      authData.sessionId.trim() !== '';
    
    if (!isValidSessionId) {
      console.error('‚ùå [DASHBOARD] –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π sessionId:', authData?.sessionId);
      console.error('‚ùå [DASHBOARD] –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω');
      message.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.');
      navigate('/lk/login', { replace: true });
      return;
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
    // 1. sessionId –≤–∞–ª–∏–¥–Ω—ã–π
    // 2. personalPlanUnlocked –Ø–í–ù–û —Ä–∞–≤–µ–Ω false (–Ω–µ undefined)
    if (isValidSessionId && authData?.personalPlanUnlocked === false) {
      console.log('üì• [DASHBOARD] –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤');
      generateMascotMessage();
      // fetchAdditionalTestResults –≤—ã–∑–æ–≤–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ recommendedTests
    } else {
      console.log('‚è≠Ô∏è [DASHBOARD] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç–µ—Å—Ç–æ–≤. authData?.personalPlanUnlocked:', authData?.personalPlanUnlocked);
    }
  }, [authData]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
  useEffect(() => {
    if (recommendedTests.length > 0 && authData?.sessionId && authData?.personalPlanUnlocked === false) {
      console.log('üìã –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∑–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...');
      fetchAdditionalTestResults();
    }
  }, [recommendedTests.length, authData]);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤ –∫–æ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Ç–µ—Å—Ç—ã –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  useEffect(() => {
    if (recommendedTests.length > 0 && authData?.personalPlanUnlocked === false) {
      const completedCount = Object.keys(testResults).length;
      const isCompleted = completedCount >= recommendedTests.length;
      console.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ—Å—Ç–æ–≤: ${completedCount}/${recommendedTests.length}, –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${isCompleted}`);
      setAllTestsCompleted(isCompleted);
    }
  }, [recommendedTests, testResults, authData]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–æ–ª–ª –∫ –∫–Ω–æ–ø–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  useEffect(() => {
    if (allTestsCompleted && completionButtonRef.current && authData?.personalPlanUnlocked === false) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–ª—é—Ç
      showConfetti();
      
      // –°–∫—Ä–æ–ª–ª–∏–º –∫ –∫–Ω–æ–ø–∫–µ
      setTimeout(() => {
        completionButtonRef.current?.scrollIntoView({ 
          behavior: 'smooth', 
          block: 'center' 
        });
      }, 500);
    }
  }, [allTestsCompleted, authData]);

  const showConfetti = () => {
    // –°–æ–∑–¥–∞–µ–º —ç–º–æ–¥–∑–∏ –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
    const emojis = ['üéâ', '‚ú®', 'üéä', '‚≠ê', 'üí´'];
    const container = document.createElement('div');
    container.style.position = 'fixed';
    container.style.top = '0';
    container.style.left = '0';
    container.style.width = '100%';
    container.style.height = '100%';
    container.style.pointerEvents = 'none';
    container.style.zIndex = '9999';
    document.body.appendChild(container);

    for (let i = 0; i < 30; i++) {
      setTimeout(() => {
        const emoji = document.createElement('div');
        emoji.textContent = emojis[Math.floor(Math.random() * emojis.length)];
        emoji.style.position = 'absolute';
        emoji.style.fontSize = '30px';
        emoji.style.left = Math.random() * 100 + '%';
        emoji.style.top = '-50px';
        emoji.style.animation = `fall ${2 + Math.random() * 2}s linear`;
        emoji.style.opacity = '0';
        container.appendChild(emoji);

        setTimeout(() => emoji.remove(), 4000);
      }, i * 100);
    }

    setTimeout(() => container.remove(), 4500);
  };

  const generateMascotMessage = async () => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ authData?.sessionId —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (!authData?.sessionId || authData?.sessionId.trim() === '') {
        console.log('‚ùå SessionId –ø—É—Å—Ç–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è –º–∞—Å–∫–æ—Ç–∞');
        setMascotMessage('–ü—Ä–∏–≤–µ—Ç! –ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–µ–≥–æ —Ç–µ—Å—Ç–∞ —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–π—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.');
        setRecommendedTests(fallbackTests.slice(0, 5));
        setShowTests(true);
        return;
      }

      setLoadingMascotMessage(true);
      console.log('ü§ñ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è –º–∞—Å–∫–æ—Ç–∞ –¥–ª—è dashboard:', { sessionId: authData?.sessionId });
      
      // –¢–∞–π–º–µ—Ä –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
      const testsTimer = setTimeout(() => {
        console.log('‚è±Ô∏è 30 —Å–µ–∫—É–Ω–¥ –ø—Ä–æ—à–ª–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç—ã');
        setShowTests(true);
      }, 30000);
      
      const response = await apiRequest('api/ai/mascot-message/dashboard', {
        method: 'POST',
        body: JSON.stringify({ sessionId: authData?.sessionId }),
      });

      clearTimeout(testsTimer);
      console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç API:', response.status, response.statusText);

      if (response.ok) {
        const data = await response.json();
        console.log('üìä –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', data);
        
        if (data.cached) {
          console.log('üíæ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –õ—É–º–∏ (–Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–æ—Å—å –∑–∞–Ω–æ–≤–æ)');
        } else {
          console.log('‚ú® –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –õ—É–º–∏');
        }
        
        setMascotMessage(data.message);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏–∑ API –∏–ª–∏ fallback
        const testsToUse = data.recommendedTests && data.recommendedTests.length > 0 
          ? data.recommendedTests 
          : fallbackTests.slice(0, 5);
        setRecommendedTests(testsToUse);
        console.log('üìã –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ç–µ—Å—Ç—ã:', testsToUse.length);
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ API:', response.status);
        const errorText = await response.text();
        console.error('‚ùå –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', errorText);
        setMascotMessage('–ü—Ä–∏–≤–µ—Ç! –ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–µ–≥–æ —Ç–µ—Å—Ç–∞ —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–π—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.');
        setRecommendedTests(fallbackTests.slice(0, 5));
      }
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      setShowTests(true);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –º–∞—Å–∫–æ—Ç–∞:', error);
      setMascotMessage('–ü—Ä–∏–≤–µ—Ç! –ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–µ–≥–æ —Ç–µ—Å—Ç–∞ —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–π—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.');
      setRecommendedTests(fallbackTests.slice(0, 5));
      setShowTests(true);
    } finally {
      setLoadingMascotMessage(false);
    }
  };

  const handleLogout = () => {
    console.log('üö™ [LOGOUT] –í—ã—Ö–æ–¥ –∏–∑ –õ–ö');
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é logout –∏–∑ —Ö—É–∫–∞ useAuth
    logout();
    navigate('/', { replace: true });
  };

  const handlePsychologistRequest = async (values: any) => {
    try {
      const response = await apiRequest('api/telegram/psychologist-request', {
        method: 'POST',
          body: JSON.stringify({
            sessionId: authData?.sessionId,
            ...values
          }),
      });

      if (response.ok) {
        message.success('–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
        psychologistForm.resetFields();
      } else {
        message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏');
      }
    } catch (error) {
      console.error('Error sending psychologist request:', error);
      message.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏');
    }
  };

  const handleFeedbackSubmit = async () => {
    if (!feedbackText.trim()) {
      message.warning('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏');
      return;
    }

    setLoadingFeedback(true);
    try {
      const response = await apiRequest('api/ai/session-feedback', {
        method: 'POST',
          body: JSON.stringify({
            sessionId: authData?.sessionId,
            feedbackText: feedbackText.trim()
          }),
      });

      if (response.ok) {
        const data = await response.json();
        if (data.success) {
          message.success('–ê–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∏–∂–µ.');
          setFeedbackText('');
        } else {
          message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏');
        }
      } else {
        message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏');
      }
    } catch (error) {
      console.error('Error submitting feedback:', error);
      message.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏');
    } finally {
      setLoadingFeedback(false);
    }
  };

  const fetchAdditionalTestResults = async () => {
    try {
      console.log('üîÑ [FETCH RESULTS] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤');
      console.log('üîÑ [FETCH RESULTS] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ testResults:', testResults);
      
      setLoadingTestResults(true);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ authData?.sessionId —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º UUID
      if (!authData?.sessionId || authData?.sessionId === true || authData?.sessionId.trim() === '') {
        console.log('‚ùå SessionId –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
        console.log('‚ùå SessionId –∑–Ω–∞—á–µ–Ω–∏–µ:', authData?.sessionId);
        console.log('‚ùå SessionId —Ç–∏–ø:', typeof authData?.sessionId);
        setLoadingTestResults(false);
        return;
      }
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å UUID
      const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
      if (!uuidRegex.test(authData.sessionId)) {
        console.log('‚ùå SessionId –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º UUID:', authData.sessionId);
        setLoadingTestResults(false);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ primary test results (email –±–æ–ª—å—à–µ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω)
      const primaryResponse = await apiRequest(`api/tests/primary/${authData?.sessionId}`);
      const primaryData = await primaryResponse.json();
      
      if (!primaryData.success) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        setLoadingTestResults(false);
        return;
      }
      
      const userEmail = primaryData.data?.email;
      const nickname = primaryData.data?.nickname;
      console.log('üìß Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', userEmail || '–Ω–µ —É–∫–∞–∑–∞–Ω');
      console.log('üë§ –ù–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', nickname || '–Ω–µ —É–∫–∞–∑–∞–Ω');
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∏–∫–Ω–µ–π–º
      if (nickname) {
        setUserNickname(nickname);
      }
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ authData?.sessionId
      const response = await apiRequest(`api/tests/additional/results/${authData?.sessionId}`);
      
      if (!response.ok) {
        console.error('‚ùå –û—à–∏–±–∫–∞ HTTP:', response.status, response.statusText);
        const errorText = await response.text();
        console.error('‚ùå –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', errorText);
        setLoadingTestResults(false);
        return;
      }
      
      const data = await response.json();
      if (data.success) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        const resultsMap: {[key: number]: string} = {};
        data.results.forEach((result: any) => {
          const test = recommendedTests.find(t => t.name === result.test_type);
          if (test) {
            resultsMap[test.id] = result.answers;
          }
        });
        setTestResults(resultsMap);
        console.log('üìä [FETCH RESULTS] –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:', data.results.length);
        console.log('üìä [FETCH RESULTS] –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ testResults:', resultsMap);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ useEffect
        // –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ recommendedTests
        console.log('üìä [FETCH RESULTS] –î–∞–Ω–Ω—ã–µ –∏–∑ API:', data.results);
      }
    } catch (error) {
      console.error('Error fetching additional test results:', error);
    } finally {
      setLoadingTestResults(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const openModal = (testId: number) => {
    setCurrentTestId(testId);
    setModalText(testResults[testId] || '');
    setModalVisible(true);
  };

  const closeModal = () => {
    setModalVisible(false);
    setCurrentTestId(null);
    setModalText('');
  };

  const saveModalResult = async () => {
    if (!currentTestId || !modalText.trim()) {
      message.warning('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞');
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setTestResults(prev => ({
      ...prev,
      [currentTestId]: modalText.trim()
    }));

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await saveTestResult(currentTestId, modalText.trim());
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    closeModal();
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ —Ç–µ–∫—Å—Ç–∞
  const truncateText = (text: string, maxLength: number = 100) => {
    if (!text) return '';
    if (text.length <= maxLength) return text;
    return text.substring(0, maxLength) + '...';
  };

  const saveTestResult = async (testId: number, result: string) => {
    if (!result.trim()) {
      message.warning('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ authData?.sessionId —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!authData?.sessionId || authData?.sessionId.trim() === '') {
      message.error('–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ.');
      return;
    }

    setSavingResults(prev => ({ ...prev, [testId]: true }));
    try {
      const test = recommendedTests.find(t => t.id === testId);
      if (!test) return;

      const response = await apiRequest('api/tests/additional/save-result', {
        method: 'POST',
          body: JSON.stringify({
            sessionId: authData?.sessionId,
            testName: test.name,
            testUrl: test.url,
          testResult: result.trim()
        }),
      });

      if (response.ok) {
        message.success('–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        setTestResults(prev => ({ ...prev, [testId]: result.trim() }));
        // –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞, —Ç–∞–∫ –∫–∞–∫ –º—ã —É–∂–µ –æ–±–Ω–æ–≤–∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      } else {
        message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞');
      }
    } catch (error) {
      console.error('Error saving test result:', error);
      message.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞');
    } finally {
      setSavingResults(prev => ({ ...prev, [testId]: false }));
    }
  };

  const downloadPersonalPlan = async () => {
    setLoadingPersonalPlan(true);
    try {
      const response = await apiRequest('api/pdf-html/personal-plan', {
        method: 'POST',
        body: JSON.stringify({ sessionId: authData?.sessionId }),
      });

      if (response.ok) {
        const pdfBlob = await response.blob();
        const url = window.URL.createObjectURL(pdfBlob);
        const link = document.createElement('a');
        link.href = url;
        link.download = 'personal-plan.pdf';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        window.URL.revokeObjectURL(url);
        message.success('–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Å–∫–∞—á–∞–Ω –≤ PDF!');
      } else {
        message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞');
      }
    } catch (error) {
      console.error('Error downloading personal plan:', error);
      message.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞');
    } finally {
      setLoadingPersonalPlan(false);
    }
  };

  const downloadSessionPreparation = async (specialistType: 'psychologist' | 'psychiatrist') => {
    setLoadingSessionPreparation(true);
    try {
      const response = await apiRequest('api/pdf/session-preparation', {
        method: 'POST',
        body: JSON.stringify({ sessionId: authData?.sessionId, specialistType }),
      });

      if (response.ok) {
        const html = await response.text();
        const blob = new Blob([html], { type: 'text/html' });
        const url = window.URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = `session-preparation-${specialistType}.html`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        window.URL.revokeObjectURL(url);
        message.success(`–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–µ–∞–Ω—Å—É —Å–∫–∞—á–∞–Ω–∞! –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª ${link.download} –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ.`);
      } else {
        message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–µ–∞–Ω—Å—É');
      }
    } catch (error) {
      console.error('Error downloading session preparation:', error);
      message.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–µ–∞–Ω—Å—É');
    } finally {
      setLoadingSessionPreparation(false);
    }
  };

  const downloadPsychologistPdf = async () => {
    setLoadingPsychologistPdf(true);
    try {
      const response = await apiRequest('api/pdf/psychologist-pdf', {
        method: 'POST',
        body: JSON.stringify({ sessionId: authData?.sessionId }),
      });

      if (response.ok) {
        const pdfBlob = await response.blob();
        const url = window.URL.createObjectURL(pdfBlob);
        const link = document.createElement('a');
        link.href = url;
        link.download = 'psychologist-pdf.pdf';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        window.URL.revokeObjectURL(url);
        message.success('PDF –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞ —Å–∫–∞—á–∞–Ω!');
      } else {
        message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞');
      }
    } catch (error) {
      console.error('Error downloading psychologist PDF:', error);
      message.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ PDF –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞');
    } finally {
      setLoadingPsychologistPdf(false);
    }
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  if (isLoading) {
    return (
      <div style={{ 
        display: 'flex', 
        justifyContent: 'center', 
        alignItems: 'center', 
        minHeight: '100vh',
        background: 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)'
      }}>
        <div style={{ textAlign: 'center' }}>
          <Spin size="large" />
          <Text style={{ display: 'block', marginTop: '20px', fontSize: '16px', color: '#666' }}>
            –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...
          </Text>
        </div>
      </div>
    );
  }

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–æ–º
  console.log('üé® [DASHBOARD] –†–µ–Ω–¥–µ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞:', {
    personalPlanUnlocked: authData?.personalPlanUnlocked,
    sessionId: !!authData?.sessionId,
    isLoading,
    showTests,
    allTestsCompleted,
    recommendedTestsCount: recommendedTests.length
  });

  return (
    <div style={{ 
      minHeight: '100vh',
      background: 'linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%)',
      padding: '20px'
    }}>
      {/* Header with Nickname and Exit button */}
      <div style={{ 
        display: 'flex', 
        justifyContent: 'space-between',
        alignItems: 'center',
        marginBottom: '20px',
        maxWidth: '800px',
        margin: '0 auto 20px auto'
      }}>
        {authData?.nickname && (
          <div style={{ 
            display: 'flex',
            alignItems: 'center',
            gap: '12px'
          }}>
            <div style={{
              width: '40px',
              height: '40px',
              borderRadius: '50%',
              backgroundColor: 'rgb(243, 186, 111)',
              color: '#ffffff',
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'center',
              fontSize: '18px',
              fontWeight: '600',
              fontFamily: 'Inter, sans-serif'
            }}>
              {authData?.nickname.charAt(0).toUpperCase()}
            </div>
            <Text style={{ 
              fontSize: '18px',
              fontWeight: '500',
              color: '#333',
              fontFamily: 'Inter, sans-serif'
            }}>
              {authData?.nickname}
            </Text>
          </div>
        )}
        <Button 
          type="primary"
          onClick={handleLogout}
          style={{ 
            backgroundColor: 'rgb(243, 186, 111)',
            borderColor: 'rgb(243, 186, 111)',
            color: '#ffffff',
            fontSize: '16px',
            fontWeight: '500',
            height: '40px',
            borderRadius: '20px'
          }}
        >
          –í—ã–π—Ç–∏
        </Button>
      </div>

      {/* Main container */}
      <div style={{ 
        maxWidth: '800px', 
        margin: '0 auto',
        textAlign: 'center'
      }}>
        
        {/* –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤) */}
        {authData?.personalPlanUnlocked ? (
          <div>
            <div style={{ textAlign: 'center', marginBottom: '40px' }}>
              <Title level={1} style={{ 
            color: '#2C3E50',
            fontSize: '32px',
            fontWeight: '600',
            marginBottom: '10px',
                fontFamily: 'Comfortaa, sans-serif'
              }}>
                –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω
              </Title>
            </div>
            
            <div style={{ 
              display: 'grid', 
              gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))', 
              gap: '20px',
              marginBottom: '40px'
            }}>
              {/* Personal Plan Card */}
              <div style={{
                backgroundColor: 'white',
                borderRadius: '20px',
                padding: '30px',
                boxShadow: '0 4px 20px rgba(0, 0, 0, 0.1)',
                textAlign: 'center'
              }}>
                <div style={{
                  width: '60px',
                  height: '60px',
                  borderRadius: '50%',
                  backgroundColor: '#E8F4FD',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  margin: '0 auto 20px auto'
                }}>
                  <DownloadOutlined style={{ fontSize: '24px', color: '#1890FF' }} />
                </div>
                <Title level={4} style={{ 
                  color: '#2C3E50', 
                  marginBottom: '15px',
                  fontSize: '18px',
                  fontWeight: '600'
                }}>
                  –°–∫–∞—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω
                </Title>
                <Text style={{ 
                  color: '#7B8794', 
                  fontSize: '14px',
                  display: 'block',
                  marginBottom: '25px',
                  lineHeight: '1.5'
                }}>
                  –°–∫–∞—á–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö —Ç–≤–æ–∏—Ö —Ç–µ—Å—Ç–æ–≤
                </Text>
                <Button 
                  type="primary"
                  onClick={downloadPersonalPlan}
                  loading={loadingPersonalPlan}
                  style={{
                    width: '100%',
                    height: '45px',
                    borderRadius: '22px',
                    backgroundColor: 'rgb(243, 186, 111)',
                    borderColor: 'rgb(243, 186, 111)',
                    color: '#ffffff',
                    fontSize: '16px',
                    fontWeight: '500'
                  }}
                >
                  {loadingPersonalPlan ? '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω...' : '–°–∫–∞—á–∞—Ç—å –ø–ª–∞–Ω'}
                </Button>
              </div>

              {/* Psychologist Selection Card */}
              <div style={{
                backgroundColor: 'white',
                borderRadius: '20px',
                padding: '30px',
                boxShadow: '0 4px 20px rgba(0, 0, 0, 0.1)'
              }}>
                <div style={{ textAlign: 'center', marginBottom: '25px' }}>
                  <div style={{
                    width: '60px',
                    height: '60px',
                    borderRadius: '50%',
                    backgroundColor: '#FFF2E8',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    margin: '0 auto 20px auto'
                  }}>
                    <UserOutlined style={{ fontSize: '24px', color: '#FA8C16' }} />
                  </div>
                  <Title level={4} style={{ 
                    color: '#2C3E50', 
                    marginBottom: '0',
                    fontSize: '18px',
                    fontWeight: '600'
                  }}>
                    –ü–æ–¥–±–æ—Ä –ø—Å–∏—Ö–æ–ª–æ–≥–∞
                  </Title>
                </div>
                
                <Form
                  form={psychologistForm}
                  onFinish={handlePsychologistRequest}
                  layout="vertical"
                >
                  <Form.Item
                    name="name"
                    label={<span style={{ color: '#2C3E50', fontWeight: '500' }}>–ò–º—è</span>}
                    rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è' }]}
                  >
                    <Input 
                      placeholder="–í–∞—à–µ –∏–º—è" 
                      style={{ 
                        borderRadius: '12px',
                        height: '40px'
                      }}
                    />
                  </Form.Item>
                  <Form.Item
                    name="phone"
                    label={<span style={{ color: '#2C3E50', fontWeight: '500' }}>–¢–µ–ª–µ—Ñ–æ–Ω</span>}
                    rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞' }]}
                  >
                    <Input 
                      placeholder="+7 (999) 123-45-67" 
                      style={{ 
                        borderRadius: '12px',
                        height: '40px'
                      }}
                    />
                  </Form.Item>
                  <Form.Item
                    name="email"
                    label={<span style={{ color: '#2C3E50', fontWeight: '500' }}>Email</span>}
                    rules={[
                      { required: true, message: '–í–≤–µ–¥–∏—Ç–µ email' },
                      { type: 'email', message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email' }
                    ]}
                  >
                    <Input 
                      placeholder="example@email.com" 
                      style={{ 
                        borderRadius: '12px',
                        height: '40px'
                      }}
                    />
                  </Form.Item>
                  <Form.Item
                    name="telegramUsername"
                    label={<span style={{ color: '#2C3E50', fontWeight: '500' }}>Telegram (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</span>}
                  >
                    <Input 
                      placeholder="username –∏–ª–∏ @username" 
                      style={{ 
                        borderRadius: '12px',
                        height: '40px'
                      }}
                    />
                  </Form.Item>
                  <Button 
                    type="primary" 
                    htmlType="submit"
                    style={{
                      width: '100%',
                      height: '45px',
                      borderRadius: '22px',
                      backgroundColor: 'rgb(243, 186, 111)',
                      borderColor: 'rgb(243, 186, 111)',
                      color: '#ffffff',
                      fontSize: '16px',
                      fontWeight: '500'
                    }}
                  >
                    –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
                  </Button>
                </Form>
              </div>

              {/* Session Preparation Card */}
              <div style={{
                backgroundColor: 'white',
                borderRadius: '20px',
                padding: '30px',
                boxShadow: '0 4px 20px rgba(0, 0, 0, 0.1)',
                textAlign: 'center'
              }}>
                <div style={{
                  width: '60px',
                  height: '60px',
                  borderRadius: '50%',
                  backgroundColor: '#F6FFED',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  margin: '0 auto 20px auto'
                }}>
                  <FileTextOutlined style={{ fontSize: '24px', color: '#4F958B' }} />
                </div>
                <Title level={4} style={{ 
                  color: '#2C3E50', 
                  marginBottom: '15px',
                  fontSize: '18px',
                  fontWeight: '600'
                }}>
                  –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–µ–∞–Ω—Å—É
                </Title>
                <Text style={{ 
                  color: '#7B8794', 
                  fontSize: '14px',
                  display: 'block',
                  marginBottom: '25px',
                  lineHeight: '1.5'
                }}>
                  –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–µ–∞–Ω—Å—É
                </Text>
                <Button 
                  type="primary"
                  onClick={() => downloadSessionPreparation('psychologist')}
                  loading={loadingSessionPreparation}
                  style={{
                    width: '100%',
                    height: '45px',
                    borderRadius: '22px',
                    backgroundColor: 'rgb(243, 186, 111)',
                    borderColor: 'rgb(243, 186, 111)',
                    color: '#ffffff',
                    fontSize: '16px',
                    fontWeight: '500'
                  }}
                >
                  {loadingSessionPreparation ? '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º...' : '–°–∫–∞—á–∞—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É'}
                </Button>
              </div>

              {/* Psychologist PDF Card */}
              <div style={{
                backgroundColor: 'white',
                borderRadius: '20px',
                padding: '30px',
                boxShadow: '0 4px 20px rgba(0, 0, 0, 0.1)',
                textAlign: 'center'
              }}>
                <div style={{
                  width: '60px',
                  height: '60px',
                  borderRadius: '50%',
                  backgroundColor: '#F0F9FF',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  margin: '0 auto 20px auto'
                }}>
                  <FileTextOutlined style={{ fontSize: '24px', color: '#3B82F6' }} />
                </div>
                <Title level={4} style={{ 
                  color: '#2C3E50', 
                  marginBottom: '15px',
                  fontSize: '18px',
                  fontWeight: '600'
                }}>
                  PDF –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞
                </Title>
                <Text style={{ 
                  color: '#7B8794', 
                  fontSize: '14px',
                  display: 'block',
                  marginBottom: '25px',
                  lineHeight: '1.5'
                }}>
                  PDF —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –∏ –ø—Å–∏—Ö–∏–∞—Ç—Ä–∞
                </Text>
                <Button 
                  type="primary"
                  onClick={downloadPsychologistPdf}
                  loading={loadingPsychologistPdf}
                  style={{
                    width: '100%',
                    height: '45px',
                    borderRadius: '22px',
                    backgroundColor: 'rgb(243, 186, 111)',
                    borderColor: 'rgb(243, 186, 111)',
                    color: '#ffffff',
                    fontSize: '16px',
                    fontWeight: '500'
                  }}
                >
                  {loadingPsychologistPdf ? '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º...' : '–°–∫–∞—á–∞—Ç—å PDF'}
                </Button>
              </div>

              {/* Feedback Card */}
              <div style={{
                backgroundColor: 'white',
                borderRadius: '20px',
                padding: '30px',
                boxShadow: '0 4px 20px rgba(0, 0, 0, 0.1)'
              }}>
                <div style={{ textAlign: 'center', marginBottom: '25px' }}>
                  <div style={{
                    width: '60px',
                    height: '60px',
                    borderRadius: '50%',
                    backgroundColor: '#FFF0F6',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    margin: '0 auto 20px auto'
                  }}>
                    <MessageOutlined style={{ fontSize: '24px', color: '#EB2F96' }} />
                  </div>
                  <Title level={4} style={{ 
                    color: '#2C3E50', 
                    marginBottom: '0',
                    fontSize: '18px',
                    fontWeight: '600'
                  }}>
                    –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
                  </Title>
                </div>
                
                <Space direction="vertical" style={{ width: '100%' }}>
                  <TextArea
                    placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ –Ω–∞ —Å–µ–∞–Ω—Å–µ —É –ø—Å–∏—Ö–æ–ª–æ–≥–∞..."
                    value={feedbackText}
                    onChange={(e) => setFeedbackText(e.target.value)}
                    rows={4}
                    style={{ 
                      borderRadius: '12px',
                      resize: 'none'
                    }}
                  />
                  <Button 
                    type="primary" 
                    onClick={handleFeedbackSubmit}
                    loading={loadingFeedback}
                    style={{
                      width: '100%',
                      height: '45px',
                      borderRadius: '22px',
                      backgroundColor: 'rgb(243, 186, 111)',
                      borderColor: 'rgb(243, 186, 111)',
                      color: '#ffffff',
                      fontSize: '16px',
                      fontWeight: '500'
                    }}
                  >
                    {loadingFeedback ? '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...' : '–ü–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å'}
                  </Button>
                </Space>
              </div>
            </div>
          </div>
        ) : (
          <div>
        {/* Header and subtitle */}
        <div style={{ marginBottom: '40px', textAlign: 'left' }}>
          <Title level={1} style={{ 
            color: '#2C3E50',
            fontSize: '32px',
            fontWeight: '600',
            marginBottom: '16px',
            fontFamily: 'Comfortaa, sans-serif'
          }}>
            –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤
          </Title>
          <Text style={{ 
            color: '#7B8794',
            fontSize: '16px',
            lineHeight: '1.6',
            display: 'block'
          }}>
            –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º –∏–º–µ–Ω–Ω–æ –¥–ª—è –≤–∞—Å, –Ω–∞–º –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ—Ç–∞–ª–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –µ—â—ë –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤.
          </Text>
        </div>
        
        {/* Mascot section */}
        <div style={{ marginBottom: '60px' }}>
          {/* Mascot header with icon and text */}
          <div style={{
            display: 'flex',
            alignItems: 'flex-start',
            gap: '16px',
            marginBottom: '20px',
            textAlign: 'left'
          }}>
            <img 
              src="/mascot.png"  
              alt="–õ—É–º–∏" 
              style={{ 
                width: '60px', 
                height: '60px', 
                objectFit: 'contain',
                flexShrink: 0
              }}
            />
            <div style={{ flex: 1 }}>
              <Title level={2} style={{ 
                color: '#2C3E50',
                fontSize: '24px',
                fontWeight: '600',
                marginBottom: '4px',
                margin: '0 0 4px 0'
              }}>
                –õ—É–º–∏
              </Title>
              <Text style={{ 
                color: '#7B8794',
                fontSize: '16px',
                display: 'block'
              }}>
                –í–∞—à AI –∫–æ–º–ø–∞–Ω—å–æ–Ω
              </Text>
            </div>
          </div>

          {/* Mascot message */}
          <div style={{
            backgroundColor: 'white',
            borderRadius: '20px',
            padding: '25px 30px',
            boxShadow: '0 4px 20px rgba(0, 0, 0, 0.1)',
            maxWidth: '600px',
            margin: '0 auto',
            textAlign: 'left'
          }}>
            {loadingMascotMessage ? (
              <div style={{ display: 'flex', alignItems: 'center', gap: '12px', justifyContent: 'center' }}>
                <Spin size="small" />
                <Text style={{ color: '#7B8794', fontSize: '16px' }}>
                  –õ—É–º–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–≤–æ–π —Ç–µ—Å—Ç...
                </Text>
              </div>
            ) : (
              <Text style={{ 
                color: '#2C3E50', 
                fontSize: '16px', 
                lineHeight: '1.6',
                display: 'block'
              }}>
                {mascotMessage || '–ü—Ä–∏–≤–µ—Ç! –ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–µ–≥–æ —Ç–µ—Å—Ç–∞ —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–π—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.'}
              </Text>
            )}
          </div>
        </div>

        <div>
            {/* Section title */}
            <Title level={3} style={{ 
              color: '#2C3E50',
              fontSize: '24px',
              fontWeight: '600',
              marginBottom: '40px',
              textAlign: 'center'
            }}>
              –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç–µ—Å—Ç—ã
            </Title>

            {allTestsCompleted && (
              <div 
                ref={completionButtonRef}
                style={{ 
                  textAlign: 'center', 
                  marginBottom: '40px', 
                  padding: '40px 30px',
                  backgroundColor: 'white',
                  borderRadius: '20px',
                  boxShadow: '0 4px 20px rgba(0, 0, 0, 0.1)'
                }}>
                <CheckOutlined 
                  style={{ 
                    fontSize: '60px', 
                    color: '#4F958B', 
                    marginBottom: '20px',
                    display: 'block'
                  }} 
                />
                <Title level={2} style={{ 
                  color: '#2C3E50', 
                  marginBottom: '20px', 
                  margin: '0 0 20px 0',
                  fontSize: '24px'
                }}>
                  –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!
                </Title>
                <Button 
                  type="primary" 
                  size="large"
                  onClick={async () => {
                    console.log('üîò [DASHBOARD] –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –ø–ª–∞–Ω—É"');
                    console.log('üîò [DASHBOARD] –¢–µ–∫—É—â–∏–π authData?.sessionId:', authData?.sessionId);
                    try {
                      const response = await apiRequest('api/dashboard/unlock-personal-plan', {
                        method: 'POST',
                        body: JSON.stringify({ sessionId: authData?.sessionId }),
                      });
                      
                      console.log('üì• [DASHBOARD] –û—Ç–≤–µ—Ç –æ—Ç unlock API:', response.status);
                      
                      if (response.ok) {
                        const data = await response.json();
                        console.log('‚úÖ [DASHBOARD] –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
                        console.log('üìä [DASHBOARD] –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', data);
                        setPersonalPlanUnlocked(true);
                        console.log('üîì [DASHBOARD] –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ authData?.personalPlanUnlocked = true');
                        
                        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                        await startBackgroundGeneration();
                      } else {
                        const errorText = await response.text();
                        console.error('‚ùå [DASHBOARD] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ:', errorText);
                        message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –ø–ª–∞–Ω—É');
                      }
                    } catch (error) {
                      console.error('‚ùå [DASHBOARD] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ:', error);
                      message.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
                    }
                  }}
                  style={{
                    height: '50px',
                    fontSize: '16px',
                    fontWeight: '600',
                    padding: '0 30px',
                    marginTop: '20px',
                    borderRadius: '25px',
                    backgroundColor: 'rgb(243, 186, 111)',
                    borderColor: 'rgb(243, 186, 111)',
                    color: '#ffffff'
                  }}
                >
                  –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –ø–ª–∞–Ω—É
                </Button>
              </div>
            )}
            
            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤ */}
            {showTests && loadingTestResults && (
              <div style={{ 
                textAlign: 'center', 
                padding: '40px',
                backgroundColor: 'rgba(255, 255, 255, 0.8)',
                borderRadius: '15px',
                marginBottom: '30px'
              }}>
                <Spin size="large" />
                <div style={{ marginTop: '20px' }}>
                  <Text style={{ color: '#7B8794', fontSize: '16px' }}>
                    –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤...
                  </Text>
                </div>
              </div>
            )}

            {/* Tests grid */}
            {!allTestsCompleted && showTests && !loadingTestResults && (
              <>
                <div style={{ 
                  marginBottom: '30px', 
                  padding: '20px', 
                  backgroundColor: 'rgba(255, 255, 255, 0.8)', 
                  borderRadius: '15px',
                  textAlign: 'center'
                }}>
                  <Text style={{ 
                    color: '#7B8794', 
                    fontSize: '16px', 
                    fontWeight: '500',
                    lineHeight: '1.5'
                  }}>
                    –ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞, –ø—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç –Ω–∞ —Å–∞–π—Ç–µ –ø–∞—Ä—Ç–Ω—ë—Ä–∞, –≤–µ—Ä–Ω–∏—Å—å —Å—é–¥–∞ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏ –≤–ø–∏—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ö–æ–≥–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –±—É–¥—É—Ç –∑–∞–Ω–µ—Å–µ–Ω—ã, –º—ã —Å–æ—Å—Ç–∞–≤–∏–º –¥–ª—è —Ç–µ–±—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω
                  </Text>
                </div>
                
                <div style={{ 
                  display: 'grid', 
                  gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))', 
                  gap: '20px',
                  marginBottom: '40px'
                }}>
                  {recommendedTests.map((test) => (
                    <div 
                      key={test.id}
                      style={{
                        backgroundColor: 'white',
                        borderRadius: '20px',
                        padding: '25px',
                        boxShadow: '0 4px 20px rgba(0, 0, 0, 0.1)',
                        transition: 'transform 0.2s ease, box-shadow 0.2s ease',
                        cursor: 'pointer',
                        textAlign: 'left'
                      }}
                      onMouseEnter={(e) => {
                        e.currentTarget.style.transform = 'translateY(-2px)';
                        e.currentTarget.style.boxShadow = '0 8px 30px rgba(0, 0, 0, 0.15)';
                      }}
                      onMouseLeave={(e) => {
                        e.currentTarget.style.transform = 'translateY(0)';
                        e.currentTarget.style.boxShadow = '0 4px 20px rgba(0, 0, 0, 0.1)';
                      }}
                    >
                      <div style={{ display: 'flex', alignItems: 'flex-start', gap: '15px', marginBottom: '20px' }}>
                        {/* Status indicator */}
                        <div 
                          style={{
                            width: '20px',
                            height: '20px',
                            borderRadius: '50%',
                            backgroundColor: testResults[test.id] ? 'rgb(243, 186, 111)' : '#E8E8E8',
                            display: 'flex',
                            alignItems: 'center',
                            justifyContent: 'center',
                            flexShrink: 0,
                            marginTop: '2px'
                          }}
                        >
                          {testResults[test.id] && (
                            <CheckOutlined 
                              style={{ 
                                fontSize: '10px',
                                color: 'white'
                              }} 
                            />
                          )}
                        </div>
                        
                        <div style={{ flex: 1 }}>
                          <Title level={5} style={{ 
                            color: '#2C3E50', 
                            marginBottom: '8px',
                            fontSize: '16px',
                            fontWeight: '600',
                            lineHeight: '1.4'
                          }}>
                            {test.name.replace('–¢–µ—Å—Ç –Ω–∞ ', '')}
                          </Title>
                          <Text style={{ 
                            color: '#7B8794', 
                            fontSize: '14px', 
                            display: 'block',
                            lineHeight: '1.4'
                          }}>
                            {test.description}
                          </Text>
                        </div>
                      </div>
                      
                      {/* Test result display */}
                      {testResults[test.id] && (
                        <div style={{ 
                          padding: '12px 16px', 
                          backgroundColor: '#F8F9FA', 
                          borderRadius: '12px',
                          marginBottom: '15px'
                        }}>
                          <Text style={{ 
                            fontSize: '14px', 
                            color: '#2C3E50',
                            lineHeight: '1.4'
                          }}>
                            {truncateText(testResults[test.id])}
                          </Text>
                        </div>
                      )}
                      
                      {/* Action buttons */}
                      <div style={{ display: 'flex', gap: '10px' }}>
                        <Button
                          href={test.url}
                          target="_blank"
                          style={{
                            flex: 1,
                            height: '40px',
                            borderRadius: '20px',
                            backgroundColor: '#E8F4FD',
                            borderColor: '#E8F4FD',
                            color: '#1890FF',
                            fontWeight: '500'
                          }}
                        >
                          –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç
                        </Button>
                        <Button
                          type="primary"
                          onClick={() => openModal(test.id)}
                          style={{
                            flex: 1,
                            height: '40px',
                            borderRadius: '20px',
                            backgroundColor: 'rgb(243, 186, 111)',
                            borderColor: 'rgb(243, 186, 111)',
                            color: '#ffffff',
                            fontWeight: '500'
                          }}
                        >
                          {testResults[test.id] ? '–ò–∑–º–µ–Ω–∏—Ç—å' : '–í–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç'}
                        </Button>
                      </div>
                    </div>
                  ))}
                </div>
              </>
            )}
          </div>


        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞ */}
        <Modal
          title={
            <span style={{ 
              color: '#2C3E50', 
              fontSize: '18px', 
              fontWeight: '600' 
            }}>
              –í–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞
            </span>
          }
          open={modalVisible}
          onCancel={closeModal}
          footer={[
            <Button 
              key="cancel" 
              onClick={closeModal}
              style={{
                borderRadius: '20px',
                height: '40px',
                fontWeight: '500'
              }}
            >
              –û—Ç–º–µ–Ω–∞
            </Button>,
            <Button 
              key="save" 
              type="primary" 
              onClick={saveModalResult}
              loading={currentTestId ? savingResults[currentTestId] : false}
              disabled={!modalText.trim()}
              style={{
                borderRadius: '20px',
                height: '40px',
                backgroundColor: 'rgb(243, 186, 111)',
                borderColor: 'rgb(243, 186, 111)',
                color: '#ffffff',
                fontWeight: '500'
              }}
            >
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
            </Button>
          ]}
          width={600}
          centered
          styles={{
            content: {
              borderRadius: '20px',
              padding: '30px'
            }
          }}
        >
          <div style={{ marginTop: '20px' }}>
            <Text style={{ 
              color: '#7B8794',
              fontSize: '14px',
              lineHeight: '1.5',
              display: 'block',
              marginBottom: '15px'
            }}>
              –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "46 –±–∞–ª–ª–æ–≤ –ø–æ –ë–µ–∫—É, –≤—ã—Ä–∞–∂–µ–Ω–Ω–∞—è –¥–µ–ø—Ä–µ—Å—Å–∏—è")
            </Text>
            <Input.TextArea
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞..."
              value={modalText}
              onChange={(e: React.ChangeEvent<HTMLTextAreaElement>) => setModalText(e.target.value)}
              rows={6}
              maxLength={500}
              showCount
              style={{
                borderRadius: '12px',
                resize: 'none',
                marginBottom: '20px'
              }}
            />
          </div>
        </Modal>
        </div>
        )}
        
        {/* –ê–Ω–∏–º–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ */}
        <GenerationAnimation 
          isGenerating={isGenerating}
          currentStep={generationStep}
          totalSteps={3}
          stepNames={['–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω', '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–µ–∞–Ω—Å—É', 'PDF –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞']}
        />
      </div>
    </div>
  );
};

export default DashboardPage;
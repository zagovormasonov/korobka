import React, { useState, useEffect } from 'react';
import { useSearchParams, useNavigate } from 'react-router-dom';
import { 
  Typography, 
  Card, 
  Button, 
  Space, 
  Input, 
  Form, 
  message, 
  Row, 
  Col,
  Divider,
  Modal,
  Spin
} from 'antd'; 
import { apiRequest } from '../config/api'; 
import { 
  DownloadOutlined, 
  UserOutlined, 
  FileTextOutlined, 
  MessageOutlined,
  CheckOutlined,
  LogoutOutlined
} from '@ant-design/icons';

const { Title, Paragraph, Text } = Typography;
const { TextArea } = Input;

const recommendedTests = [
  {
    id: 1,
    name: '–¢–µ—Å—Ç –Ω–∞ –ø–æ–≥—Ä–∞–Ω–∏—á–Ω–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ª–∏—á–Ω–æ—Å—Ç–∏ (–ü–†–õ)',
    url: 'https://yasno.live/tests/pogranichnoye-rasstroystvo-lichnosti',
    description: '–°–∫—Ä–∏–Ω–∏–Ω–≥ —Å–∏–º–ø—Ç–æ–º–æ–≤ –ü–†–õ –Ω–∞ –æ—Å–Ω–æ–≤–µ DSM-5'
  },
  {
    id: 2,
    name: '–¢–µ—Å—Ç –Ω–∞ –±–∏–ø–æ–ª—è—Ä–Ω–æ–µ –∞—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–ë–ê–†)',
    url: 'https://iyaroslav.ru/test/test-na-gipomaniu-bipolarnoe-rasstroystvo/',
    description: '–û–ø—Ä–æ—Å–Ω–∏–∫ HCL-32 –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –≥–∏–ø–æ–º–∞–Ω–∏–∞–∫–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π'
  },
  {
    id: 3,
    name: '–¢–µ—Å—Ç –Ω–∞ —Å–∏–Ω–¥—Ä–æ–º –¥–µ—Ñ–∏—Ü–∏—Ç–∞ –≤–Ω–∏–º–∞–Ω–∏—è –∏ –≥–∏–ø–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–°–î–í–ì)',
    url: 'https://yasno.live/tests/sdvg',
    description: '–®–∫–∞–ª–∞ ASRS –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö'
  },
  {
    id: 4,
    name: '–¢–µ—Å—Ç –Ω–∞ –ø–æ—Å—Ç—Ç—Ä–∞–≤–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ç—Ä–µ—Å—Å–æ–≤–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–ü–¢–°–†)',
    url: 'https://yasno.live/tests/ptsr',
    description: 'PCL-5 –¥–ª—è —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞ —Å–∏–º–ø—Ç–æ–º–æ–≤ –ü–¢–°–†'
  },
  {
    id: 5,
    name: '–¢–µ—Å—Ç –Ω–∞ –¥–µ–ø—Ä–µ—Å—Å–∏—é',
    url: 'https://psi-praktika.ru/testyi/test-beka-na-depressiyu.html',
    description: '–®–∫–∞–ª–∞ –ë–µ–∫–∞ (BDI) –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è —Ç—è–∂–µ—Å—Ç–∏ –¥–µ–ø—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤'
  },
  {
    id: 6,
    name: '–¢–µ—Å—Ç –Ω–∞ –≥–µ–Ω–µ—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Ç—Ä–µ–≤–æ–∂–Ω–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ',
    url: 'https://psytests.org/anxiety/gad7.html',
    description: 'GAD-7 –¥–ª—è —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞ –æ–±—â–µ–π —Ç—Ä–µ–≤–æ–≥–∏ –∏ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞'
  }
];

const DashboardPage: React.FC = () => {
  const [searchParams] = useSearchParams();
  const navigate = useNavigate();
  const [sessionId] = useState(() => searchParams.get('sessionId') || '');
  const [mascotMessage, setMascotMessage] = useState('');
  const [psychologistForm] = Form.useForm();
  const [feedbackText, setFeedbackText] = useState('');
  const [allTestsCompleted, setAllTestsCompleted] = useState(false);
  const [testResults, setTestResults] = useState<{[key: number]: string}>({});
  const [savingResults, setSavingResults] = useState<{[key: number]: boolean}>({});
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è AI –æ–ø–µ—Ä–∞—Ü–∏–π
  const [loadingMascotMessage, setLoadingMascotMessage] = useState(false);
  const [loadingPersonalPlan, setLoadingPersonalPlan] = useState(false);
  const [loadingSessionPreparation, setLoadingSessionPreparation] = useState(false);
  const [loadingFeedback, setLoadingFeedback] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const [modalVisible, setModalVisible] = useState(false);
  const [currentTestId, setCurrentTestId] = useState<number | null>(null);
  const [modalText, setModalText] = useState('');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
  const [personalPlanMode, setPersonalPlanMode] = useState(false);

  useEffect(() => {
    if (sessionId) {
      generateMascotMessage();
      fetchAdditionalTestResults();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
      const urlParams = new URLSearchParams(window.location.search);
      if (urlParams.get('payment') === 'success') {
        message.success('üéâ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç!');
        // –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ URL
        window.history.replaceState({}, document.title, window.location.pathname);
      }
    } else {
      // –ï—Å–ª–∏ sessionId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
      message.warning('‚ö†Ô∏è –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
    }
  }, [sessionId]);

  const generateMascotMessage = async () => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ sessionId —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (!sessionId || sessionId.trim() === '') {
        console.log('‚ùå SessionId –ø—É—Å—Ç–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è –º–∞—Å–∫–æ—Ç–∞');
        setMascotMessage('–ü—Ä–∏–≤–µ—Ç! –ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–µ–≥–æ —Ç–µ—Å—Ç–∞ —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–π—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.');
        return;
      }

      setLoadingMascotMessage(true);
      console.log('ü§ñ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è –º–∞—Å–∫–æ—Ç–∞ –¥–ª—è dashboard:', { sessionId });
      
      const response = await apiRequest('api/ai/mascot-message/dashboard', {
        method: 'POST',
        body: JSON.stringify({ sessionId }),
      });

      console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç API:', response.status, response.statusText);

      if (response.ok) {
        const data = await response.json();
        console.log('üìä –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', data);
        setMascotMessage(data.message);
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ API:', response.status);
        const errorText = await response.text();
        console.error('‚ùå –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', errorText);
        setMascotMessage('–ü—Ä–∏–≤–µ—Ç! –ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–µ–≥–æ —Ç–µ—Å—Ç–∞ —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–π—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.');
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –º–∞—Å–∫–æ—Ç–∞:', error);
      setMascotMessage('–ü—Ä–∏–≤–µ—Ç! –ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–µ–≥–æ —Ç–µ—Å—Ç–∞ —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–π—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.');
    } finally {
      setLoadingMascotMessage(false);
    }
  };

  const handleLogout = () => {
    console.log('üö™ [LOGOUT] –í—ã—Ö–æ–¥ –∏–∑ –õ–ö');
    message.success('–í—ã –≤—ã—à–ª–∏ –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞');
    navigate('/', { replace: true });
  };

  const fetchAdditionalTestResults = async () => {
    try {
      console.log('üîÑ [FETCH RESULTS] –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤');
      console.log('üîÑ [FETCH RESULTS] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ testResults:', testResults);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ sessionId —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (!sessionId || sessionId.trim() === '') {
        console.log('‚ùå SessionId –ø—É—Å—Ç–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
        return;
      }

      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ primary test results
      const primaryResponse = await apiRequest(`api/tests/primary/${sessionId}`);
      const primaryData = await primaryResponse.json();
      
      if (!primaryData.success || !primaryData.data?.email) {
        console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        return;
      }
      
      const userEmail = primaryData.data.email;
      console.log('üìß Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', userEmail);
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ sessionId
      const response = await apiRequest(`api/tests/additional/results/${sessionId}`);
      
      if (!response.ok) {
        console.error('‚ùå –û—à–∏–±–∫–∞ HTTP:', response.status, response.statusText);
        const errorText = await response.text();
        console.error('‚ùå –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', errorText);
        return;
      }
      
      const data = await response.json();
      if (data.success) {
        setAllTestsCompleted(data.results.length >= recommendedTests.length);
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        const resultsMap: {[key: number]: string} = {};
        data.results.forEach((result: any) => {
          const test = recommendedTests.find(t => t.name === result.test_type);
          if (test) {
            resultsMap[test.id] = result.answers;
          }
        });
        setTestResults(resultsMap);
        console.log('üìä [FETCH RESULTS] –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:', data.results.length);
        console.log('üìä [FETCH RESULTS] –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ testResults:', resultsMap);
        console.log('üìä [FETCH RESULTS] –î–∞–Ω–Ω—ã–µ –∏–∑ API:', data.results);
      }
    } catch (error) {
      console.error('Error fetching additional test results:', error);
    }
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const openModal = (testId: number) => {
    setCurrentTestId(testId);
    setModalText(testResults[testId] || '');
    setModalVisible(true);
  };

  const closeModal = () => {
    setModalVisible(false);
    setCurrentTestId(null);
    setModalText('');
  };

  const saveModalResult = async () => {
    if (!currentTestId || !modalText.trim()) {
      message.warning('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞');
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setTestResults(prev => ({
      ...prev,
      [currentTestId]: modalText.trim()
    }));

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    await saveTestResult(currentTestId, modalText.trim());
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    closeModal();
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ —Ç–µ–∫—Å—Ç–∞
  const truncateText = (text: string, maxLength: number = 100) => {
    if (!text) return '';
    if (text.length <= maxLength) return text;
    return text.substring(0, maxLength) + '...';
  };

  const saveTestResult = async (testId: number, result: string) => {
    if (!result.trim()) {
      message.warning('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ sessionId —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!sessionId || sessionId.trim() === '') {
      message.error('–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ.');
      return;
    }

    setSavingResults(prev => ({ ...prev, [testId]: true }));
    try {
      const test = recommendedTests.find(t => t.id === testId);
      if (!test) return;

      const response = await apiRequest('api/tests/additional/save-result', {
        method: 'POST',
        body: JSON.stringify({
          sessionId,
          testName: test.name,
          testUrl: test.url,
          testResult: result.trim()
        }),
      });

      if (response.ok) {
        message.success('–†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
        // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        setTestResults(prev => ({ ...prev, [testId]: result.trim() }));
        
        // –ó–∞—Ç–µ–º —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        setTimeout(() => {
        fetchAdditionalTestResults();
        }, 1000);
      } else {
        message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞');
      }
    } catch (error) {
      console.error('Error saving test result:', error);
      message.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞');
    } finally {
      setSavingResults(prev => ({ ...prev, [testId]: false }));
    }
  };

  const handlePsychologistRequest = async (values: any) => {
    try {
      const response = await apiRequest('api/telegram/psychologist-request', {
        method: 'POST',
        body: JSON.stringify({
          sessionId,
          ...values
        }),
      });

      if (response.ok) {
        message.success('–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.');
        psychologistForm.resetFields();
      } else {
        message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏');
      }
    } catch (error) {
      console.error('Error sending psychologist request:', error);
      message.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏');
    }
  };

  const handleFeedbackSubmit = async () => {
    if (!feedbackText.trim()) {
      message.warning('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏');
      return;
    }

    setLoadingFeedback(true);
    try {
      const response = await apiRequest('api/ai/session-feedback', {
        method: 'POST',
        body: JSON.stringify({
          sessionId,
          feedbackText: feedbackText
        }),
      });

      if (response.ok) {
        const data = await response.json();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
        const analysisHtml = `
          <!DOCTYPE html>
          <html>
          <head>
            <meta charset="UTF-8">
            <title>–ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏</title>
            <style>
              body {
                font-family: Arial, sans-serif;
                line-height: 1.6;
                margin: 40px;
                color: #333;
                max-width: 800px;
                margin: 40px auto;
              }
              h1 {
                color: #00695c;
                border-bottom: 2px solid #00695c;
                padding-bottom: 10px;
              }
              h2 {
                color: #52c41a;
                margin-top: 30px;
              }
              .header {
                text-align: center;
                margin-bottom: 40px;
              }
              .content {
                max-width: 800px;
                margin: 0 auto;
              }
              .print-button {
                background: #00695c;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 6px;
                cursor: pointer;
                margin: 20px 0;
              }
            </style>
          </head>
          <body>
            <div class="content">
              <div class="header">
                <h1>–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏</h1>
                <p>–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–µ–∞–Ω—Å–∞</p>
                <button class="print-button" onclick="window.print()">–ü–µ—á–∞—Ç—å</button>
              </div>
              
              <div class="analysis-content">
                ${data.analysis.replace(/\n/g, '<br>')}
              </div>
            </div>
          </body>
          </html>
        `;
        
        const newWindow = window.open('', '_blank');
        if (newWindow) {
          newWindow.document.write(analysisHtml);
          newWindow.document.close();
        }
        
        message.success('–ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≥–æ—Ç–æ–≤!');
        setFeedbackText('');
      } else {
        message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏');
      }
    } catch (error) {
      console.error('Error processing feedback:', error);
      message.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏');
    } finally {
      setLoadingFeedback(false);
    }
  };

  const downloadPersonalPlan = async () => {
    setLoadingPersonalPlan(true);
    try {
      const response = await apiRequest('api/pdf/personal-plan', {
        method: 'POST',
        body: JSON.stringify({ sessionId }),
      });

      if (response.ok) {
        // –ü–æ–ª—É—á–∞–µ–º HTML –∫–∞–∫ —Ç–µ–∫—Å—Ç
        const html = await response.text();
        
        // –°–æ–∑–¥–∞–µ–º Blob –∏–∑ HTML
        const blob = new Blob([html], { type: 'text/html' });
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        const url = window.URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = 'personal-plan.html'; // –£–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–ª–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        document.body.appendChild(link);
        link.click();
        
        // –û—á–∏—â–∞–µ–º
        document.body.removeChild(link);
        window.URL.revokeObjectURL(url);
        
        message.success('–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Å–∫–∞—á–∞–Ω! –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª personal-plan.html –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ.');
        
      } else {
        message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞');
      }
    } catch (error) {
      console.error('Error downloading personal plan:', error);
      message.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞');
    } finally {
      setLoadingPersonalPlan(false);
    }
  };

  const downloadSessionPreparation = async (specialistType: 'psychologist' | 'psychiatrist') => {
    setLoadingSessionPreparation(true);
    try {
      const response = await apiRequest('api/pdf/session-preparation', {
        method: 'POST',
        body: JSON.stringify({ sessionId, specialistType }),
      });

      if (response.ok) {
        const html = await response.text();
        const blob = new Blob([html], { type: 'text/html' });
        const url = window.URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = `session-preparation-${specialistType}.html`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        window.URL.revokeObjectURL(url);
        message.success(`–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–µ–∞–Ω—Å—É —Å–∫–∞—á–∞–Ω–∞! –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª ${link.download} –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ.`);
      } else {
        message.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–µ–∞–Ω—Å—É');
      }
    } catch (error) {
      console.error('Error downloading session preparation:', error);
      message.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–µ–∞–Ω—Å—É');
    } finally {
      setLoadingSessionPreparation(false);
    }
  };

  return (
    <div style={{ padding: '40px 20px', maxWidth: '1200px', margin: '0 auto' }}>
      <div style={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'center', 
        marginBottom: '40px' 
      }}>
        <div style={{ flex: 1 }}></div>
        <Title level={1} style={{ color: '#00695C', margin: 0, flex: 1, textAlign: 'center' }}>
          –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
        </Title>
        <div style={{ flex: 1, display: 'flex', justifyContent: 'flex-end' }}>
          <Button 
            type="default" 
            icon={<LogoutOutlined />}
            onClick={handleLogout}
            style={{ 
              borderColor: '#ff4d4f',
              color: '#ff4d4f'
            }}
          >
            –í—ã–π—Ç–∏
          </Button>
        </div>
      </div>

      <Card 
        style={{ 
          marginBottom: '40px', 
          backgroundColor: '#f6ffed',
          border: '1px solid #b7eb8f'
        }}
      >
        <div style={{ display: 'flex', alignItems: 'flex-start', gap: '16px' }}>
          <img 
            src="/mascot.png"  
            alt="–õ—É–º–∏" 
            style={{ width: '60px', height: '60px', flexShrink: 0, objectFit: 'contain' }}
          />
          <div style={{ flex: 1 }}>
            {loadingMascotMessage ? (
              <div style={{ display: 'flex', alignItems: 'center', gap: '12px' }}>
                <Spin size="small" />
                <Text style={{ color: '#00695C', fontSize: '16px' }}>
                  –õ—É–º–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–≤–æ–π —Ç–µ—Å—Ç...
                </Text>
              </div>
            ) : (
              <Paragraph style={{ margin: 0, fontSize: '16px', lineHeight: '1.6' }}>
                {mascotMessage || '–ü—Ä–∏–≤–µ—Ç! –ù–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–µ–≥–æ —Ç–µ—Å—Ç–∞ —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–æ–π—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.'}
              </Paragraph>
            )}
          </div>
        </div>
      </Card>

      {!personalPlanMode ? (
      <Card title="–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç–µ—Å—Ç—ã" style={{ marginBottom: '40px' }}>
          {allTestsCompleted && (
            <div style={{ 
              textAlign: 'center', 
              marginBottom: '30px', 
              padding: '30px 16px',
              backgroundColor: '#f6ffed',
              borderRadius: '8px',
              border: '2px solid #00695c'
            }}>
              <CheckOutlined 
                style={{ 
                  fontSize: '80px', 
                  color: '#00695c', 
                  marginBottom: '20px',
                  display: 'block'
                }} 
              />
              <Title level={2} style={{ color: '#00695c', marginBottom: '20px', margin: 0 }}>
                –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!
              </Title>
              <Button 
                type="primary" 
                size="large"
                onClick={() => setPersonalPlanMode(true)}
                style={{
                  height: '50px',
                  fontSize: '14px',
                  fontWeight: 'bold',
                  padding: '25px',
                  marginTop: '20px'
                }}
              >
                –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –ø–ª–∞–Ω—É
              </Button>
            </div>
          )}
          
          {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫–∏ —Ç–µ—Å—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã */}
          {!allTestsCompleted && (
            <>
        <div style={{ marginBottom: '20px', padding: '16px', backgroundColor: '#f6ffed', borderRadius: '8px', border: '1px solid #b7eb8f' }}>
          <Text style={{ color: '#00695C', fontSize: '16px', fontWeight: '500' }}>
            –ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞, –ø—Ä–æ–π–¥–∏ —Ç–µ—Å—Ç –∏ –≤–ø–∏—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
          </Text>
        </div>
        
        <Row gutter={[16, 16]}>
          {recommendedTests.map((test) => (
            <Col xs={24} md={12} key={test.id}>
              <Card 
                size="small" 
                hoverable
                style={{ height: '100%' }}
                actions={[
                  <Button 
                    type="link" 
                    href={test.url} 
                    target="_blank"
                    style={{ color: '#00695C' }}
                  >
                    –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç
                  </Button>
                ]}
              >
                <div style={{ display: 'flex', alignItems: 'flex-start', gap: '12px' }}>
                  {/* –ö—Ä—É–∂–æ—á–µ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º —Ç–µ—Å—Ç–∞ */}
                  <div 
                    style={{
                      width: '24px',
                      height: '24px',
                      borderRadius: '50%',
                            border: `2px solid ${testResults[test.id] ? '#00695c' : '#d9d9d9'}`,
                            backgroundColor: testResults[test.id] ? '#00695c' : 'transparent',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      flexShrink: 0,
                      marginTop: '2px'
                    }}
                  >
                    {testResults[test.id] && (
                      <CheckOutlined 
                        style={{ 
                          fontSize: '12px',
                          color: 'white'
                        }} 
                      />
                    )}
                  </div>
                  
                  <div style={{ flex: 1 }}>
                    <Title level={5} style={{ color: '#00695C', marginBottom: '8px' }}>
                      {test.name}
                    </Title>
                    <Text type="secondary" style={{ fontSize: '14px', marginBottom: '16px', display: 'block' }}>
                      {test.description}
                    </Text>
                    
                    <Space direction="vertical" style={{ width: '100%' }}>
                      {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–æ–±—Ä–µ–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç) */}
                      {testResults[test.id] && (
                        <div style={{ 
                          padding: '8px 12px', 
                          backgroundColor: '#f6ffed', 
                          border: '1px solid #b7eb8f', 
                          borderRadius: '6px',
                          marginBottom: '8px'
                        }}>
                          <Text style={{ fontSize: '14px', color: '#00695C' }}>
                            {truncateText(testResults[test.id])}
                          </Text>
                        </div>
                      )}
                      
                      <Button
                        type="primary"
                        size="small"
                        onClick={() => openModal(test.id)}
                        style={{ width: '100%', padding: '30px 16px' }}
                      >
                        {testResults[test.id] ? '–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç' : '–í–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç'}
                      </Button>
                    </Space>
                  </div>
                </div>
              </Card>
            </Col>
          ))}
        </Row>
            </>
          )}
      </Card>
      ) : (
        <div>
          <div style={{ textAlign: 'center', marginBottom: '40px' }}>
            <Title level={2} style={{ color: '#00695c', marginBottom: '10px' }}>
              –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω
            </Title>
            <Button 
              type="default" 
              onClick={() => setPersonalPlanMode(false)}
              style={{ marginBottom: '20px', padding: '30px 20px' }}
            >
              ‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–µ—Å—Ç–∞–º
            </Button>
          </div>
          
          <Row gutter={[24, 24]}>
            <Col xs={24} md={12}>
              <Card 
                title="–°–∫–∞—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω"
                extra={<DownloadOutlined style={{ color: '#00695C' }} />}
                hoverable
                style={{ height: '100%' }}
              >
                <Paragraph>
                  –°–∫–∞—á–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö —Ç–≤–æ–∏—Ö —Ç–µ—Å—Ç–æ–≤
                </Paragraph>
                <Button 
                  type="primary" 
                  icon={<DownloadOutlined />}
                  onClick={downloadPersonalPlan}
                  loading={loadingPersonalPlan}
                  style={{ width: '100%', padding: '30px 16px' }}
                >
                  {loadingPersonalPlan ? '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω...' : '–°–∫–∞—á–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω'}
                </Button>
              </Card>
            </Col>

            <Col xs={24} md={12}>
              <Card 
                title="–ü–æ–¥–±–æ—Ä –ø—Å–∏—Ö–æ–ª–æ–≥–∞"
                extra={<UserOutlined style={{ color: '#00695C' }} />}
                hoverable
                style={{ height: '100%' }}
              >
                <Form
                  form={psychologistForm}
                  onFinish={handlePsychologistRequest}
                  layout="vertical"
                >
                  <Form.Item
                    name="name"
                    label="–ò–º—è"
                    rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è' }]}
                  >
                    <Input placeholder="–í–∞—à–µ –∏–º—è" />
                  </Form.Item>
                  <Form.Item
                    name="phone"
                    label="–¢–µ–ª–µ—Ñ–æ–Ω"
                    rules={[{ required: true, message: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞' }]}
                  >
                    <Input placeholder="+7 (999) 123-45-67" />
                  </Form.Item>
                  <Form.Item
                    name="email"
                    label="Email"
                    rules={[
                      { required: true, message: '–í–≤–µ–¥–∏—Ç–µ email' },
                      { type: 'email', message: '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email' }
                    ]}
                  >
                    <Input placeholder="example@email.com" />
                  </Form.Item>
                  <Form.Item
                    name="telegramUsername"
                    label="Telegram (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                  >
                    <Input placeholder="username –∏–ª–∏ @username" />
                  </Form.Item>
                  <Button 
                    type="primary" 
                    htmlType="submit"
                    style={{ width: '100%', padding: '30px 16px' }}
                  >
                    –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
                  </Button>
                </Form>
              </Card>
            </Col>

            <Col xs={24} md={12}>
              <Card 
                title="–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–µ–∞–Ω—Å—É"
                extra={<FileTextOutlined style={{ color: '#00695C' }} />}
                hoverable
                style={{ height: '100%' }}
              >
                <Paragraph>
                  PDF —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –∏ –ø—Å–∏—Ö–∏–∞—Ç—Ä–∞
                </Paragraph>
                 <Button 
                   type="primary" 
                   icon={<DownloadOutlined />}
                   onClick={() => downloadSessionPreparation('psychologist')}
                   loading={loadingSessionPreparation}
                   style={{ width: '100%', padding: '30px 16px' }}
                 >
                   {loadingSessionPreparation ? '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É...' : '–°–∫–∞—á–∞—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ —Å–µ–∞–Ω—Å—É'}
                 </Button>
              </Card>
            </Col>

            <Col xs={24} md={12}>
              <Card 
                title="–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"
                extra={<MessageOutlined style={{ color: '#00695C' }} />}
                hoverable
                style={{ height: '100%' }}
              >
                <Space direction="vertical" style={{ width: '100%' }}>
                  <TextArea
                    placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ –Ω–∞ —Å–µ–∞–Ω—Å–µ —É –ø—Å–∏—Ö–æ–ª–æ–≥–∞..."
                    value={feedbackText}
                    onChange={(e) => setFeedbackText(e.target.value)}
                    rows={4}
                  />
                  <Button 
                    type="primary" 
                    onClick={handleFeedbackSubmit}
                    loading={loadingFeedback}
                    style={{ width: '100%', padding: '30px 16px' }}
                  >
                    {loadingFeedback ? '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å...' : '–ü–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å'}
                  </Button>
                </Space>
              </Card>
            </Col>
          </Row>
        </div>
      )}


      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞ */}
      <Modal
        title="–í–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"
        open={modalVisible}
        onCancel={closeModal}
        footer={[
          <Button key="cancel" onClick={closeModal}>
            –û—Ç–º–µ–Ω–∞
          </Button>,
          <Button 
            key="save" 
            type="primary" 
            onClick={saveModalResult}
            loading={currentTestId ? savingResults[currentTestId] : false}
            disabled={!modalText.trim()}
          >
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
          </Button>
        ]}
        width={600}
        style={{ marginTop: '20px', marginBottom: '20px' }}
      >
        <Space direction="vertical" style={{ width: '100%', marginTop: '16px', marginBottom: '16px' }}>
          <Text type="secondary">
            –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "46 –±–∞–ª–ª–æ–≤ –ø–æ –ë–µ–∫—É, –≤—ã—Ä–∞–∂–µ–Ω–Ω–∞—è –¥–µ–ø—Ä–µ—Å—Å–∏—è")
          </Text>
          <Input.TextArea
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞..."
            value={modalText}
            onChange={(e) => setModalText(e.target.value)}
            rows={6}
            maxLength={500}
            showCount
          />
        </Space>
      </Modal>
    </div>
  );
};

export default DashboardPage;
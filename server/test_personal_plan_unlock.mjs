import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config();

const supabaseUrl = process.env.SUPABASE_URL;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –û—à–∏–±–∫–∞: SUPABASE_URL –∏–ª–∏ SUPABASE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤ .env');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testPersonalPlanField() {
  try {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è personal_plan_unlocked');
    console.log('');
    
    // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª–µ
    const { data, error } = await supabase
      .from('primary_test_results')
      .select('id, session_id, nickname, personal_plan_unlocked')
      .limit(5);

    if (error) {
      if (error.message.includes('personal_plan_unlocked')) {
        console.error('‚ùå –ü–æ–ª–µ personal_plan_unlocked –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
        console.log('');
        console.log('üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–ª–µ –≤—Ä—É—á–Ω—É—é –≤ Supabase Dashboard:');
        console.log('');
        console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ https://app.supabase.com');
        console.log('2. –í—ã–±–µ—Ä–∏—Ç–µ Table Editor ‚Üí primary_test_results');
        console.log('3. –ù–∞–∂–º–∏—Ç–µ "+ New Column"');
        console.log('4. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ:');
        console.log('   - Name: personal_plan_unlocked');
        console.log('   - Type: boolean');
        console.log('   - Default value: false');
        console.log('   - Is Nullable: ‚úó (–Ω–µ –æ—Ç–º–µ—á–µ–Ω–æ)');
        console.log('5. –ù–∞–∂–º–∏—Ç–µ "Save"');
        console.log('');
        console.log('–ò–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ SQL:');
        console.log('```sql');
        console.log('ALTER TABLE primary_test_results');
        console.log('ADD COLUMN personal_plan_unlocked BOOLEAN DEFAULT false NOT NULL;');
        console.log('```');
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
      }
      process.exit(1);
    }

    console.log('‚úÖ –ü–æ–ª–µ personal_plan_unlocked —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω–æ!');
    console.log('');
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:');
    console.log(`   –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${data.length}`);
    
    const unlocked = data.filter(row => row.personal_plan_unlocked);
    const locked = data.filter(row => !row.personal_plan_unlocked);
    
    console.log(`   –° —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–ª–∞–Ω–æ–º: ${unlocked.length}`);
    console.log(`   –ë–µ–∑ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞: ${locked.length}`);
    console.log('');
    
    if (data.length > 0) {
      console.log('üìã –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π:');
      data.slice(0, 3).forEach((row, i) => {
        console.log(`   ${i + 1}. ${row.nickname || '–±–µ–∑ –Ω–∏–∫–Ω–µ–π–º–∞'} - –ø–ª–∞–Ω ${row.personal_plan_unlocked ? 'üîì —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : 'üîí –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'}`);
      });
      console.log('');
    }
    
    console.log('üéâ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ.');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    if (locked.length > 0) {
      const testSession = locked[0].session_id;
      console.log('');
      console.log(`üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è —Å–µ—Å—Å–∏–∏: ${testSession}`);
      
      const { error: updateError } = await supabase
        .from('primary_test_results')
        .update({ personal_plan_unlocked: true })
        .eq('session_id', testSession);
      
      if (updateError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ:', updateError);
      } else {
        console.log('‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const { data: checkData } = await supabase
          .from('primary_test_results')
          .select('session_id, personal_plan_unlocked')
          .eq('session_id', testSession)
          .single();
        
        if (checkData && checkData.personal_plan_unlocked) {
          console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø–æ–ª–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ');
          
          // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
          await supabase
            .from('primary_test_results')
            .update({ personal_plan_unlocked: false })
            .eq('session_id', testSession);
          
          console.log('‚Ü©Ô∏è  –¢–µ—Å—Ç–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–∫–∞—á–µ–Ω—ã');
        }
      }
    }
    
  } catch (error) {
    console.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }
}

testPersonalPlanField();


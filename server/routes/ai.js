import express from 'express';
import axios from 'axios';
import { supabase } from '../index.js';
import { GoogleGenerativeAI } from '@google/generative-ai';
import { HttpsProxyAgent } from 'https-proxy-agent';
import { SocksProxyAgent } from 'socks-proxy-agent';
import { constants } from 'crypto';
import path from 'path';
import fs from 'fs';
import { fileURLToPath } from 'url';

// –ü–æ–ª—É—á–∞–µ–º __dirname –¥–ª—è ES –º–æ–¥—É–ª–µ–π
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const router = express.Router();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ axios —Å –ø—Ä–æ–∫—Å–∏
function createAxiosConfig() {
  const config = {
    headers: {
      'Content-Type': 'application/json'
    }
  };

  // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
  if (process.env.DISABLE_PROXY === 'true') {
    console.log('‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω (DISABLE_PROXY=true), –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –∫ Gemini API');
    return config;
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
  if (process.env.PROXY_HOST && process.env.PROXY_PORT) {
    console.log('üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è Gemini API:', {
      host: process.env.PROXY_HOST,
      port: process.env.PROXY_PORT,
      protocol: process.env.PROXY_PROTOCOL || 'http',
      auth: process.env.PROXY_USERNAME ? '–¥–∞' : '–Ω–µ—Ç'
    });

    // –°–æ–∑–¥–∞–µ–º URL –ø—Ä–æ–∫—Å–∏
    let proxyUrl = `${process.env.PROXY_PROTOCOL || 'http'}://`;
    
    if (process.env.PROXY_USERNAME && process.env.PROXY_PASSWORD) {
      proxyUrl += `${process.env.PROXY_USERNAME}:${process.env.PROXY_PASSWORD}@`;
    }
    
    proxyUrl += `${process.env.PROXY_HOST}:${process.env.PROXY_PORT}`;
    
    console.log('üîó Proxy URL:', proxyUrl.replace(/:[^:]*@/, ':***@')); // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –≤ –ª–æ–≥–∞—Ö
    
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–æ–∫—Å–∏
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º SOCKS5 –ø—Ä–æ–∫—Å–∏
      if (process.env.PROXY_TYPE === 'socks5') {
        console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º SOCKS5 –ø—Ä–æ–∫—Å–∏...');
        const socksProxyUrl = `socks5://${process.env.PROXY_USERNAME}:${process.env.PROXY_PASSWORD}@${process.env.PROXY_HOST}:${process.env.PROXY_PORT}`;
        config.httpsAgent = new SocksProxyAgent(socksProxyUrl, {
          rejectUnauthorized: false,
          checkServerIdentity: () => undefined,
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
          timeout: 30000,
          keepAlive: true
        });
        console.log('‚úÖ SOCKS5 –ø—Ä–æ–∫—Å–∏ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º HTTP –ø—Ä–æ–∫—Å–∏
        console.log('üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º HTTP –ø—Ä–æ–∫—Å–∏...');
        config.httpsAgent = new HttpsProxyAgent(proxyUrl, {
          // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–∫—Å–∏
          rejectUnauthorized: false,
          checkServerIdentity: () => undefined, // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É hostname
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–±–ª–µ–º —Å SSL
          secureProtocol: 'TLSv1_2_method',
          ciphers: 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384',
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏
          servername: 'generativelanguage.googleapis.com',
          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
          keepAlive: true,
          timeout: 30000,
          // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ø—Ä–æ–∫—Å–∏
          secureOptions: constants.SSL_OP_NO_SSLv2 | constants.SSL_OP_NO_SSLv3
        });
        console.log('‚úÖ HTTP –ø—Ä–æ–∫—Å–∏ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
      }
      config.timeout = 30000;
    } catch (proxyError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è Gemini API:', proxyError.message);
    }
  } else {
    console.log('üåê –ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –∫ Gemini API');
  }

  return config;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ Gemini API —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π SDK
async function callGeminiAI(prompt, maxTokens = 2000) {
  try {
    const apiKey = process.env.GEMINI_API_KEY;
    
    if (!apiKey) {
      throw new Error('GEMINI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }
    
    console.log('üî¨ –í—ã–∑—ã–≤–∞–µ–º Gemini API —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π SDK...');
    console.log('üìù –î–ª–∏–Ω–∞ –ø—Ä–æ–º–ø—Ç–∞:', prompt.length, '—Å–∏–º–≤–æ–ª–æ–≤');
    console.log('üîë API Key —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', apiKey ? '–¥–∞' : '–Ω–µ—Ç');
    console.log('üîë API Key –ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤:', apiKey ? apiKey.substring(0, 10) + '...' : '–ù–ï–¢');
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è Google AI SDK
    if (process.env.PROXY_HOST && process.env.PROXY_PORT && process.env.DISABLE_PROXY !== 'true') {
      console.log('üåê –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏ –¥–ª—è Google AI SDK...');
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–∫—Å–∏
      if (process.env.PROXY_TYPE === 'socks5') {
        process.env.HTTP_PROXY = `socks5://${process.env.PROXY_USERNAME}:${process.env.PROXY_PASSWORD}@${process.env.PROXY_HOST}:${process.env.PROXY_PORT}`;
        process.env.HTTPS_PROXY = `socks5://${process.env.PROXY_USERNAME}:${process.env.PROXY_PASSWORD}@${process.env.PROXY_HOST}:${process.env.PROXY_PORT}`;
      } else {
        process.env.HTTP_PROXY = `http://${process.env.PROXY_USERNAME}:${process.env.PROXY_PASSWORD}@${process.env.PROXY_HOST}:${process.env.PROXY_PORT}`;
        process.env.HTTPS_PROXY = `http://${process.env.PROXY_USERNAME}:${process.env.PROXY_PASSWORD}@${process.env.PROXY_HOST}:${process.env.PROXY_PORT}`;
      }
      
      console.log('‚úÖ –ü—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è Google AI SDK');
    } else {
      console.log('üåê –ü—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Google AI
    console.log('üîß –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Google AI...');
    const genAI = new GoogleGenerativeAI(apiKey);
    const modelName = "gemini-2.5-pro"; // –¢–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ AI Studio
    console.log(`ü§ñ –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å ${modelName}...`);
    const model = genAI.getGenerativeModel({ model: modelName });
    
    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini —á–µ—Ä–µ–∑ SDK...');
    console.log('‚è±Ô∏è –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:', new Date().toISOString());
    
    const result = await model.generateContent(prompt);
    console.log('üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç...');
    const response = await result.response;
    console.log('üìù –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞...');
    const text = response.text();
    
    console.log('‚úÖ Gemini API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ SDK, –¥–ª–∏–Ω–∞:', text.length, '—Å–∏–º–≤–æ–ª–æ–≤');
    console.log('‚è±Ô∏è –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:', new Date().toISOString());
    return text;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Gemini API —á–µ—Ä–µ–∑ SDK:', {
      message: error.message,
      name: error.name,
      stack: error.stack,
      fullError: JSON.stringify(error, Object.getOwnPropertyNames(error))
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –Ω–µ–≤–µ—Ä–Ω–æ–π –º–æ–¥–µ–ª—å—é
    if (error.message.includes('model') || error.message.includes('not found') || error.message.includes('Invalid')) {
      console.log('‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å –∏–º–µ–Ω–µ–º –º–æ–¥–µ–ª–∏. –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏...');
      
      // –°–ø–∏—Å–æ–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ (–æ—Ç –Ω–æ–≤—ã—Ö –∫ —Å—Ç–∞—Ä—ã–º)
      const alternativeModels = [
        'gemini-1.5-pro-latest',  // –°—Ç–∞–±–∏–ª—å–Ω–∞—è 1.5 Pro (–ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è)
        'gemini-1.5-pro',         // –°—Ç–∞–±–∏–ª—å–Ω–∞—è 1.5 Pro
        'gemini-1.5-flash',       // –ë—ã—Å—Ç—Ä–∞—è 1.5
        'gemini-pro',             // –°—Ç–∞—Ä–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–∞—è
        'gemini-1.0-pro'          // –°–æ–≤—Å–µ–º —Å—Ç–∞—Ä–∞—è
      ];
      
      for (const modelName of alternativeModels) {
        try {
          console.log(`üîÑ –ü—Ä–æ–±—É–µ–º –º–æ–¥–µ–ª—å ${modelName}...`);
          const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
          const model = genAI.getGenerativeModel({ model: modelName });
          
          const result = await model.generateContent(prompt);
          const response = await result.response;
          const text = response.text();
          
          console.log(`‚úÖ Gemini API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω —Å ${modelName}, –¥–ª–∏–Ω–∞:`, text.length, '—Å–∏–º–≤–æ–ª–æ–≤');
          return text;
        } catch (modelError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —Å ${modelName}:`, modelError.message);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–µ–π –º–æ–¥–µ–ª—å—é
        }
      }
    }
    
    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ —Å–µ—Ç—å—é, –ø–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏
    if (error.message.includes('proxy') || error.message.includes('timeout') || 
        error.message.includes('network') || error.message.includes('connection') ||
        error.message.includes('ECONNREFUSED') || error.message.includes('ENOTFOUND')) {
      console.log('üîÑ –ü—Ä–æ–±—É–µ–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏ —á–µ—Ä–µ–∑ SDK...');
      
      // –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
      delete process.env.HTTP_PROXY;
      delete process.env.HTTPS_PROXY;
      
      // –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏ –±–µ–∑ –ø—Ä–æ–∫—Å–∏
      const fallbackModels = ['gemini-1.5-pro-latest', 'gemini-1.5-pro', 'gemini-pro'];
      
      for (const modelName of fallbackModels) {
        try {
          console.log(`üîÑ –ü—Ä–æ–±—É–µ–º ${modelName} –±–µ–∑ –ø—Ä–æ–∫—Å–∏...`);
          const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
          const model = genAI.getGenerativeModel({ model: modelName });
          
          const result = await model.generateContent(prompt);
          const response = await result.response;
          const text = response.text();
          
          console.log(`‚úÖ Gemini API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω —Å ${modelName} –±–µ–∑ –ø—Ä–æ–∫—Å–∏, –¥–ª–∏–Ω–∞:`, text.length, '—Å–∏–º–≤–æ–ª–æ–≤');
          return text;
        } catch (fallbackError) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —Å ${modelName} –±–µ–∑ –ø—Ä–æ–∫—Å–∏:`, fallbackError.message);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–µ–π –º–æ–¥–µ–ª—å—é
        }
      }
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    console.log('‚ö†Ô∏è –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É');
    return '–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
  }
}

// –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–∞—Å–∫–æ—Ç–∞ –¥–ª—è –ª–µ–Ω–¥–∏–Ω–≥–∞ –æ–ø–ª–∞—Ç—ã
router.post('/mascot-message/payment', async (req, res) => {
  try {
    console.log('ü§ñ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è –º–∞—Å–∫–æ—Ç–∞:', req.body);
    
    const { sessionId } = req.body;
    
    if (!sessionId) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç sessionId');
      return res.status(400).json({ success: false, error: 'SessionId is required' });
    }
    
    console.log('üîë Gemini API Key:', process.env.GEMINI_API_KEY ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
    const { data: testResult, error } = await supabase
      .from('primary_test_results')
      .select('answers')
      .eq('session_id', sessionId)
      .maybeSingle();

    if (error || !testResult) {
      console.log('‚ùå [PAYMENT MASCOT] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:', { sessionId, error });
      return res.status(404).json({ success: false, error: 'Test results not found' });
    }

    const answers = testResult.answers;
    
    const prompt = `–ü—Ä–æ–≤–µ–¥–∏ –≥–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞ –∏ —Å–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

–ò–°–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–°–ö–ê–Ø –ó–ê–î–ê–ß–ê:
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –Ω–∞ –ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ –∏ –≤—ã—è–≤–∏ –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –æ—Ç–≤–µ—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–î–ê–ù–ù–´–ï –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:
${JSON.stringify(answers)}

–ò–°–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –í–û–ü–†–û–°–´:
1. –ö–∞–∫–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–µ–æ–±–ª–∞–¥–∞—é—Ç –≤ –æ—Ç–≤–µ—Ç–∞—Ö?
2. –ö–∞–∫–∏–µ –æ–±–ª–∞—Å—Ç–∏ —Ç—Ä–µ–±—É—é—Ç –æ—Å–æ–±–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è?
3. –ö–∞–∫–∏–µ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –º–æ–∂–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å?
4. –ö–∞–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–æ—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è?

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –†–ï–ó–£–õ–¨–¢–ê–¢–£:
- –°–æ–∑–¥–∞–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–∞—Å–∫–æ—Ç–∞ –õ—É–º–∏
- –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞
- –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
- –£–∫–∞–∂–∏ –≤–∞–∂–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
- –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ü—Ä–æ—è–≤–∏ —ç–º–ø–∞—Ç–∏—é –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê: –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.`;

    const message = await callGeminiAI(prompt, 1200);
    res.json({ success: true, message });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –º–∞—Å–∫–æ—Ç–∞:', {
      message: error.message,
      status: error.response?.status,
      statusText: error.response?.statusText,
      data: error.response?.data
    });
    res.status(500).json({ success: false, error: error.message });
  }
});

// –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–∞—Å–∫–æ—Ç–∞ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
router.post('/mascot-message/dashboard', async (req, res) => {
  try {
    console.log('ü§ñ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è –º–∞—Å–∫–æ—Ç–∞ –¥–ª—è dashboard:', req.body);
    
    const { sessionId } = req.body;
    
    if (!sessionId) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç sessionId');
      return res.status(400).json({ success: false, error: 'SessionId is required' });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º maybeSingle() –≤–º–µ—Å—Ç–æ single() —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
    // TODO: –î–æ–±–∞–≤–∏—Ç—å lumi_dashboard_message –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏
    const { data: primaryTest, error } = await supabase
      .from('primary_test_results')
      .select('answers, email')
      .eq('session_id', sessionId)
      .maybeSingle();

    console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –∏–∑ –ë–î:', primaryTest);
    console.log('üîç –ï—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç—ã (answers)?', !!primaryTest?.answers);
    console.log('üîç –¢–∏–ø answers:', typeof primaryTest?.answers);
    console.log('üîç –û—à–∏–±–∫–∞ Supabase:', error);

    if (error || !primaryTest) {
      console.log('‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è sessionId:', sessionId);
      console.log('‚ùå –ö–æ–¥ –æ—à–∏–±–∫–∏ Supabase:', error?.code);
      console.log('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:', error?.message);
      console.log('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error?.details);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å—å —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log('üîç –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å—å —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏...');
      const { data: fullRecord, error: fullError } = await supabase
        .from('primary_test_results')
        .select('*')
        .eq('session_id', sessionId)
        .maybeSingle();
      
      console.log('üîç –ü–æ–ª–Ω–∞—è –∑–∞–ø–∏—Å—å:', fullRecord);
      console.log('üîç –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª–Ω–æ–π –∑–∞–ø–∏—Å–∏:', fullError);
      
      return res.status(404).json({ success: false, error: 'Test results not found' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ —Ç–µ—Å—Ç–∞
    if (!primaryTest.answers || (Array.isArray(primaryTest.answers) && primaryTest.answers.length === 0)) {
      console.log('‚ö†Ô∏è –û—Ç–≤–µ—Ç—ã —Ç–µ—Å—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –ø—É—Å—Ç—ã –¥–ª—è sessionId:', sessionId);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ AI
      const defaultMessage = '–ü—Ä–∏–≤–µ—Ç! –Ø –õ—É–º–∏, —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è. üåü\n\n–ß—Ç–æ–±—ã —è –º–æ–≥ –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è —Ç–µ–±—è –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏ —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ –ø–µ—Ä–≤–∏—á–Ω—ã–π —Ç–µ—Å—Ç –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Ç–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–≤–æ–µ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.';
      
      return res.json({ 
        success: true, 
        message: defaultMessage,
        recommendedTests: [],
        cached: false,
        warning: 'Primary test not completed'
      });
    }

    // TODO: –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    // if (primaryTest.lumi_dashboard_message) {
    //   console.log('üíæ –ù–∞–π–¥–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –õ—É–º–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ');
    //   
    //   // –í—Å—ë —Ä–∞–≤–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    //   const answers = primaryTest.answers;
    //   const recommendedTests = await analyzeAndRecommendTests(answers);
    //   
    //   return res.json({ 
    //     success: true, 
    //     message: primaryTest.lumi_dashboard_message,
    //     recommendedTests,
    //     cached: true 
    //   });
    // }

    const answers = primaryTest.answers;
    const email = primaryTest.email;
    
    console.log('üìä –û—Ç–≤–µ—Ç—ã —Ç–µ—Å—Ç–∞:', answers);
    console.log('üìß Email –∏–∑ –ë–î:', email);
    console.log('üîë Gemini API Key:', process.env.GEMINI_API_KEY ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç–µ—Å—Ç—ã
    const recommendedTests = await analyzeAndRecommendTests(answers);
    
    const prompt = `–ü—Ä–æ–≤–µ–¥–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

–ò–°–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–°–ö–ê–Ø –ó–ê–î–ê–ß–ê:
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

–î–ê–ù–ù–´–ï –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:
–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: ${JSON.stringify(answers)}
–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã: ${recommendedTests.map(t => t.name).join(', ')}

–ò–°–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø:
1. –í—ã—è–≤–∏ –∫–ª—é—á–µ–≤—ã–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –æ—Ç–≤–µ—Ç–∞—Ö
2. –û–ø—Ä–µ–¥–µ–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è
3. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∏ –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
4. –û—Ü–µ–Ω–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –†–ï–ó–£–õ–¨–¢–ê–¢–£:
- –°–æ–∑–¥–∞–π –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–∞—Å–∫–æ—Ç–∞ –õ—É–º–∏
- –û–±—ä—è—Å–Ω–∏ –≤–∞–∂–Ω–æ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
- –£–∫–∞–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è
- –ü—Ä–æ—è–≤–∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É
- –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ö—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê: –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.`;

    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...');
    
    const message = await callGeminiAI(prompt, 1400);
    
    // TODO: –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
    // console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –õ—É–º–∏ –≤ –ë–î...');
    // const { error: updateError } = await supabase
    //   .from('primary_test_results')
    //   .update({ lumi_dashboard_message: message })
    //   .eq('session_id', sessionId);
    //
    // if (updateError) {
    //   console.error('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', updateError);
    //   // –ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
    // } else {
    //   console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –õ—É–º–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î');
    // }
    
    res.json({ success: true, message, recommendedTests, cached: false });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –õ–ö:', {
      message: error.message,
      status: error.response?.status,
      statusText: error.response?.statusText,
      data: error.response?.data
    });
    res.status(500).json({ success: false, error: error.message });
  }
});

// –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω
router.post('/personal-plan', async (req, res) => {
  try {
    console.log('üéØ [PERSONAL-PLAN] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞');
    const { sessionId } = req.body;
    console.log('üéØ [PERSONAL-PLAN] SessionId:', sessionId);
    
    if (!sessionId) {
      console.error('‚ùå [PERSONAL-PLAN] SessionId –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω');
      return res.status(400).json({ success: false, error: 'SessionId is required' });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    console.log('üîç [PERSONAL-PLAN] –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î...');
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º maybeSingle() –≤–º–µ—Å—Ç–æ single() —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫
    const { data: primaryTest, error: primaryError } = await supabase
      .from('primary_test_results')
      .select('answers, email, personal_plan')
      .eq('session_id', sessionId)
      .maybeSingle();

    console.log('üìä [PERSONAL-PLAN] –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î:', {
      hasData: !!primaryTest,
      hasError: !!primaryError,
      errorMessage: primaryError?.message
    });
    console.log('üìä [PERSONAL-PLAN] –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ primaryTest:', primaryTest);
    console.log('üìä [PERSONAL-PLAN] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
      code: primaryError?.code,
      message: primaryError?.message,
      details: primaryError?.details,
      hint: primaryError?.hint
    });

    if (primaryError || !primaryTest) {
      console.error('‚ùå [PERSONAL-PLAN] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:', primaryError);
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å—å —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log('üîç [PERSONAL-PLAN] –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å—å —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª—è–º–∏...');
      const { data: fullRecord, error: fullError } = await supabase
        .from('primary_test_results')
        .select('*')
        .eq('session_id', sessionId)
        .maybeSingle();
      
      console.log('üîç [PERSONAL-PLAN] –ü–æ–ª–Ω–∞—è –∑–∞–ø–∏—Å—å:', fullRecord);
      console.log('üîç [PERSONAL-PLAN] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª–Ω–æ–π –∑–∞–ø–∏—Å–∏:', fullError);
      
      return res.status(404).json({ success: false, error: 'Primary test results not found' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ —Ç–µ—Å—Ç–∞
    if (!primaryTest.answers || (Array.isArray(primaryTest.answers) && primaryTest.answers.length === 0)) {
      console.error('‚ùå [PERSONAL-PLAN] –û—Ç–≤–µ—Ç—ã —Ç–µ—Å—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–ª—è sessionId:', sessionId);
      return res.status(400).json({ 
        success: false, 
        error: 'Primary test not completed',
        message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –ø–µ—Ä–≤–∏—á–Ω—ã–π —Ç–µ—Å—Ç –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ'
      });
    }

    // –ï—Å–ª–∏ –ø–ª–∞–Ω —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    if (primaryTest.personal_plan) {
      console.log('üíæ [PERSONAL-PLAN] –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω');
      return res.json({ success: true, plan: primaryTest.personal_plan, cached: true });
    }

    console.log('‚ú® [PERSONAL-PLAN] –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω');
    console.log('üîë [PERSONAL-PLAN] GEMINI_API_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', process.env.GEMINI_API_KEY ? '–î–ê' : '–ù–ï–¢');

    const primaryAnswers = primaryTest.answers;
    const userEmail = primaryTest.email;
    console.log('üìß [PERSONAL-PLAN] Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userEmail || '–Ω–µ —É–∫–∞–∑–∞–Ω');

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ email
    console.log('üîç [PERSONAL-PLAN] –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –∏–∑ –ë–î...');
    const { data: additionalTests, error: additionalError } = await supabase
      .from('additional_test_results')
      .select('test_type, answers')
      .eq('email', userEmail);

    console.log('üìä [PERSONAL-PLAN] –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã:', {
      hasTests: !!additionalTests,
      count: additionalTests?.length || 0,
      hasError: !!additionalError
    });

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤
    const genderAnswer = primaryAnswers.find(a => a.questionId === 'Q2');
    const userGender = genderAnswer ? genderAnswer.answer : '–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω';
    console.log('üë§ [PERSONAL-PLAN] –ü–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userGender);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    let secondaryTestResults = '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã';
    if (additionalTests && additionalTests.length > 0) {
      secondaryTestResults = additionalTests.map(test =>
        `${test.test_type}: ${test.answers}`
      ).join('; ');
    }
    console.log('üìã [PERSONAL-PLAN] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ø. —Ç–µ—Å—Ç–æ–≤:', secondaryTestResults.substring(0, 100) + '...');

    // –ß–∏—Ç–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞
    console.log('üìù [PERSONAL-PLAN] –ß–∏—Ç–∞–µ–º —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞...');
    const fs = await import('fs');
    const path = await import('path');
    const { fileURLToPath } = await import('url');
    
    const __filename = fileURLToPath(import.meta.url);
    const __dirname = path.dirname(__filename);
    const promptPath = path.join(__dirname, '../../prompt.txt');
    const examplePlanPath = path.join(__dirname, '../../example-personal-plan.txt');
    console.log('üìù [PERSONAL-PLAN] –ü—É—Ç—å –∫ –ø—Ä–æ–º–ø—Ç—É:', promptPath);
    console.log('üìù [PERSONAL-PLAN] –ü—É—Ç—å –∫ –ø—Ä–∏–º–µ—Ä—É –ø–ª–∞–Ω–∞:', examplePlanPath);
    
    try {
      const promptTemplate = fs.readFileSync(promptPath, 'utf8');
      const examplePlan = fs.readFileSync(examplePlanPath, 'utf8');
      console.log('‚úÖ [PERSONAL-PLAN] –ü—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω, –¥–ª–∏–Ω–∞:', promptTemplate.length);
      console.log('‚úÖ [PERSONAL-PLAN] –ü—Ä–∏–º–µ—Ä –ø–ª–∞–Ω–∞ –ø—Ä–æ—á–∏—Ç–∞–Ω, –¥–ª–∏–Ω–∞:', examplePlan.length);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –∑–∞–º–µ–Ω—è—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
      const prompt = promptTemplate
        .replace('{user_gender}', userGender)
        .replace('{user_answers}', JSON.stringify(primaryAnswers))
        .replace('{secondary_test_results}', secondaryTestResults)
        .replace('{example_personal_plan}', examplePlan);

      console.log('üìù [PERSONAL-PLAN] –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω, –¥–ª–∏–Ω–∞:', prompt.length);
      console.log('üöÄ [PERSONAL-PLAN] –í—ã–∑—ã–≤–∞–µ–º Gemini API...');
      
      const plan = await callGeminiAI(prompt, 16000);
      console.log('‚úÖ [PERSONAL-PLAN] –ü–ª–∞–Ω –ø–æ–ª—É—á–µ–Ω –æ—Ç Gemini, –¥–ª–∏–Ω–∞:', plan?.length || 0);
    
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –≤ –ë–î –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      console.log('üíæ [PERSONAL-PLAN] –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –≤ –ë–î...');
      const { error: updateError } = await supabase
        .from('primary_test_results')
        .update({ personal_plan: plan })
        .eq('session_id', sessionId);

      if (updateError) {
        console.error('‚ö†Ô∏è [PERSONAL-PLAN] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ –≤ –ë–î:', updateError);
        // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ –ø–ª–∞–Ω —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω
      } else {
        console.log('‚úÖ [PERSONAL-PLAN] –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î');
      }
      
      console.log('üéâ [PERSONAL-PLAN] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É');
      res.json({ success: true, plan, cached: false });
      
    } catch (promptError) {
      console.error('‚ùå [PERSONAL-PLAN] –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏/–æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–ø—Ç–∞:', promptError);
      throw promptError;
    }
  } catch (error) {
    console.error('‚ùå [PERSONAL-PLAN] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', {
      message: error.message,
      stack: error.stack
    });
    res.status(500).json({ success: false, error: error.message });
  }
});

// –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–µ–∞–Ω—Å—É
router.post('/session-preparation', async (req, res) => {
  try {
    const { sessionId } = req.body;
    
    console.log('üìù [SESSION-PREPARATION] –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–µ–∞–Ω—Å—É –¥–ª—è sessionId:', sessionId);
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    const { data: primaryTest, error: primaryError } = await supabase
      .from('primary_test_results')
      .select('answers, email, personal_plan')
      .eq('session_id', sessionId)
      .single();

    if (primaryError || !primaryTest) {
      console.error('‚ùå [SESSION-PREPARATION] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:', primaryError);
      return res.status(404).json({ success: false, error: 'Primary test results not found' });
    }

    const primaryAnswers = primaryTest.answers;
    const userEmail = primaryTest.email;
    const personalPlan = primaryTest.personal_plan;

    console.log('üìä [SESSION-PREPARATION] –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞, email:', userEmail);
    console.log('üìã [SESSION-PREPARATION] –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –Ω–∞–π–¥–µ–Ω:', !!personalPlan);

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ sessionId
    const { data: additionalTests, error: additionalError } = await supabase
      .from('additional_test_results')
      .select('test_type, answers')
      .eq('session_id', sessionId);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    let secondaryTestResults = '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã';
    if (additionalTests && additionalTests.length > 0) {
      secondaryTestResults = additionalTests.map(test => 
        `${test.test_type}: ${test.answers}`
      ).join('; ');
    }
    
    console.log('üìã [SESSION-PREPARATION] –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ø. —Ç–µ—Å—Ç–æ–≤:', secondaryTestResults.substring(0, 100) + '...');

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤
    const userGender = primaryAnswers?.Q1 === 'male' ? '–º—É–∂—Å–∫–æ–π' : '–∂–µ–Ω—Å–∫–∏–π';
    console.log('üë§ [SESSION-PREPARATION] –ü–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userGender);

    // –ß–∏—Ç–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏ –ø—Ä–∏–º–µ—Ä –∏–∑ —Ñ–∞–π–ª–æ–≤
    console.log('üìù [SESSION-PREPARATION] –ß–∏—Ç–∞–µ–º —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞...');
    const fs = await import('fs');
    const path = await import('path');
    const { fileURLToPath } = await import('url');
    
    const __filename = fileURLToPath(import.meta.url);
    const __dirname = path.dirname(__filename);
    const promptPath = path.join(__dirname, '../../prompt-2.txt');
    const examplePath = path.join(__dirname, '../../example-podgotovka.txt');
    console.log('üìù [SESSION-PREPARATION] –ü—É—Ç—å –∫ –ø—Ä–æ–º–ø—Ç—É:', promptPath);
    console.log('üìù [SESSION-PREPARATION] –ü—É—Ç—å –∫ –ø—Ä–∏–º–µ—Ä—É:', examplePath);
    
    try {
      const promptTemplate = fs.readFileSync(promptPath, 'utf8');
      const examplePreparation = fs.readFileSync(examplePath, 'utf8');
      console.log('‚úÖ [SESSION-PREPARATION] –ü—Ä–æ–º–ø—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω, –¥–ª–∏–Ω–∞:', promptTemplate.length);
      console.log('‚úÖ [SESSION-PREPARATION] –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—á–∏—Ç–∞–Ω, –¥–ª–∏–Ω–∞:', examplePreparation.length);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –∑–∞–º–µ–Ω—è—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
      const prompt = promptTemplate
        .replace('{user_gender}', userGender)
        .replace('{user_answers}', JSON.stringify(primaryAnswers))
        .replace('{secondary_test_results}', secondaryTestResults)
        .replace('{personal_plan}', personalPlan || '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω')
        .replace('{example_preparation}', examplePreparation);

      console.log('üìù [SESSION-PREPARATION] –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω, –¥–ª–∏–Ω–∞:', prompt.length);
      console.log('üöÄ [SESSION-PREPARATION] –í—ã–∑—ã–≤–∞–µ–º Gemini API...');
      
      const preparation = await callGeminiAI(prompt, 16000);
      console.log('‚úÖ [SESSION-PREPARATION] –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç Gemini, –¥–ª–∏–Ω–∞:', preparation?.length || 0);
      
    res.json({ success: true, preparation });
    } catch (fileError) {
      console.error('‚ùå [SESSION-PREPARATION] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤:', fileError);
      res.status(500).json({ success: false, error: 'Failed to read prompt files' });
    }
  } catch (error) {
    console.error('‚ùå [SESSION-PREPARATION] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–µ–∞–Ω—Å—É:', error);
    res.status(500).json({ success: false, error: error.message });
  }
});

// –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ —Å–µ–∞–Ω—Å–µ
router.post('/session-feedback', async (req, res) => {
  try {
    const { sessionId, feedbackText } = req.body;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    const { data: primaryTest, error: primaryError } = await supabase
      .from('primary_test_results')
      .select('answers, email')
      .eq('session_id', sessionId)
      .single();

    if (primaryError || !primaryTest) {
      return res.status(404).json({ success: false, error: 'Primary test results not found' });
    }

    const primaryAnswers = primaryTest.answers;
    const userEmail = primaryTest.email;

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ email
    const { data: additionalTests, error: additionalError } = await supabase
      .from('additional_test_results')
      .select('test_type, answers')
      .eq('email', userEmail);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    let testResults = '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã';
    if (additionalTests && additionalTests.length > 0) {
      testResults = additionalTests.map(test => 
        `${test.test_name}: ${test.test_result}`
      ).join('; ');
    }
    
    const prompt = `–ü—Ä–æ–≤–µ–¥–∏ –≥–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–µ–∞–Ω—Å–∞ –∏ —Å–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.

–ò–°–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–°–ö–ê–Ø –ó–ê–î–ê–ß–ê:
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–µ–∞–Ω—Å–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –µ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –∏ –¥–∞–π –Ω–∞—É—á–Ω–æ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.

–î–ê–ù–ù–´–ï –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:
–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: ${JSON.stringify(primaryAnswers)}
–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${testResults}
–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${feedbackText}

–ò–°–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø:
1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–µ–∞–Ω—Å–∞ –≤—ã—è–≤–ª–µ–Ω–Ω—ã–º –ø—Ä–æ–±–ª–µ–º–∞–º
2. –û—Ü–µ–Ω–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–¥—Ö–æ–¥–æ–≤
3. –í—ã—è–≤–∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
4. –û–ø—Ä–µ–¥–µ–ª–∏ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
5. –ò–∑—É—á–∏ –¥–∏–Ω–∞–º–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ê–ù–ê–õ–ò–ó–£:
–°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑, –∫–æ—Ç–æ—Ä—ã–π –≤–∫–ª—é—á–∞–µ—Ç:

1. –ö–õ–ò–ù–ò–ß–ï–°–ö–ê–Ø –û–¶–ï–ù–ö–ê –°–ï–ê–ù–°–ê
   - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–±–ª–µ–º–∞–º –∏–∑ —Ç–µ—Å—Ç–æ–≤
   - –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
   - –£—Ä–æ–≤–µ–Ω—å –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º —Å–∏—Ç—É–∞—Ü–∏–∏

2. –ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–´–ï –ê–°–ü–ï–ö–¢–´
   - –ß—Ç–æ –±—ã–ª–æ –æ—Å–æ–±–µ–Ω–Ω–æ –ø–æ–ª–µ–∑–Ω–æ
   - –ö–∞–∫–∏–µ –º–æ–º–µ–Ω—Ç—ã –¥–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
   - –£—Å–ø–µ—à–Ω—ã–µ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã

3. –û–ë–õ–ê–°–¢–ò –î–õ–Ø –í–ù–ò–ú–ê–ù–ò–Ø
   - –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –ø–æ–¥—Ö–æ–¥–µ
   - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ç–µ–º—ã
   - –í–æ–∑–º–æ–∂–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è

4. –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ü–†–û–î–û–õ–ñ–ï–ù–ò–Ø
   - –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Å–µ–∞–Ω—Å–æ–≤
   - –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –≤ –ø–æ–¥—Ö–æ–¥–µ
   - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

5. –ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –°–û–í–ï–¢–´
   - –ß—Ç–æ –¥–µ–ª–∞—Ç—å –º–µ–∂–¥—É —Å–µ–∞–Ω—Å–∞–º–∏
   - –ö–∞–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–µ–∞–Ω—Å—É
   - –°–∞–º–æ–ø–æ–º–æ—â—å –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –°–¢–ò–õ–Æ:
- –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–π –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π —Ç–æ–Ω
- –ù–∞—É—á–Ω–∞—è –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
- –ü—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å –∏ –≤—ã–ø–æ–ª–Ω–∏–º–æ—Å—Ç—å
- –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ß–µ—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê: –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.`;

    const analysis = await callGeminiAI(prompt, 8000);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –≤ –±–∞–∑—É
    const { error: insertError } = await supabase
      .from('session_feedback')
      .insert({
        session_id: sessionId,
        feedback_text: feedbackText,
        ai_response: analysis
      });

    if (insertError) {
      console.error('Error saving feedback:', insertError);
    }

    res.json({ success: true, analysis });
  } catch (error) {
    console.error('Error processing feedback:', error);
    res.status(500).json({ success: false, error: error.message });
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤
async function analyzeAndRecommendTests(answers) {
  const allTests = [
    { id: 1, name: "–¢–µ—Å—Ç –Ω–∞ –ø–æ–≥—Ä–∞–Ω–∏—á–Ω–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ª–∏—á–Ω–æ—Å—Ç–∏ (–ü–†–õ)", url: "https://testometrika.com/diagnosis-of-abnormalities/do-you-have-a-border-disorder-of-personality/" },
    { id: 2, name: "–¢–µ—Å—Ç –Ω–∞ –±–∏–ø–æ–ª—è—Ä–Ω–æ–µ –∞—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–ë–ê–†)", url: "https://psytests.org/diag/hcl32.html" },
    { id: 3, name: "–¢–µ—Å—Ç –Ω–∞ —Å–∏–Ω–¥—Ä–æ–º –¥–µ—Ñ–∏—Ü–∏—Ç–∞ –≤–Ω–∏–º–∞–Ω–∏—è –∏ –≥–∏–ø–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–°–î–í–ì)", url: "https://psytests.org/diag/asrs.html" },
    { id: 4, name: "–¢–µ—Å—Ç –Ω–∞ –ø–æ—Å—Ç—Ç—Ä–∞–≤–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ç—Ä–µ—Å—Å–æ–≤–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–ü–¢–°–†)", url: "https://psytests.org/trauma/pcl5.html" },
    { id: 5, name: "–¢–µ—Å—Ç –Ω–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –ø–æ—Å—Ç—Ç—Ä–∞–≤–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ç—Ä–µ—Å—Å–æ–≤–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–∫–ü–¢–°–†)", url: "https://psytests.org/trauma/itq.html" },
    { id: 6, name: "–¢–µ—Å—Ç –Ω–∞ –¥–µ–ø—Ä–µ—Å—Å–∏—é", url: "https://psytests.org/depression/bdi.html" },
    { id: 7, name: "–¢–µ—Å—Ç –Ω–∞ –≥–µ–Ω–µ—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Ç—Ä–µ–≤–æ–∂–Ω–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", url: "https://psytests.org/anxiety/gad7.html" },
    { id: 8, name: "–¢–µ—Å—Ç –Ω–∞ –æ–±—Å–µ—Å—Å–∏–≤–Ω–æ-–∫–æ–º–ø—É–ª—å—Å–∏–≤–Ω–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–û–ö–†)", url: "https://psytests.org/psyclinical/ybocs.html" },
    { id: 9, name: "–¢–µ—Å—Ç –Ω–∞ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–∏—â–µ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è", url: "https://psytests.org/food/eat26.html" },
    { id: 10, name: "–¢–µ—Å—Ç –Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –ø—Å–∏—Ö–æ–∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤", url: "https://www.samopomo.ch/proversja/test-po-vyjavleniju-rasstroistv-svjazannykh-s-upotrebleniem-narkotikov-dudit" },
    { id: 11, name: "–¢–µ—Å—Ç –Ω–∞ –¥–∏—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", url: "https://psytests.org/diag/des.html" },
    { id: 12, name: "–¢–µ—Å—Ç –Ω–∞ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∞—É—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–µ–∫—Ç—Ä–∞ (–†–ê–°)", url: "https://psytests.org/arc/aq.html" },
    { id: 13, name: "–¢–µ—Å—Ç –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ —Ç—Ä–µ–≤–æ–∂–Ω–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", url: "https://psytests.org/anxiety/lsas.html" },
    { id: 14, name: "–¢–µ—Å—Ç –Ω–∞ –ø–∞–Ω–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", url: "https://psytests.org/psyclinical/pdss.html" },
    { id: 15, name: "–¢–µ—Å—Ç –Ω–∞ –¥–∏—Å–º–æ—Ä—Ñ–æ—Ñ–æ–±–∏—é (—Ç–µ–ª–µ—Å–Ω–æ–µ –¥–∏—Å–º–æ—Ä—Ñ–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ)", url: "https://psytests.org/beauty/bddq.html" },
    { id: 16, name: "–¢–µ—Å—Ç –Ω–∞ —Å—É–∏—Ü–∏–¥–∞–ª—å–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏", url: "https://psytests.org/psyclinical/osr.html" },
    { id: 17, name: "–¢–µ—Å—Ç –Ω–∞ –¥–µ—Ç—Å–∫—É—é —Ç—Ä–∞–≤–º—É", url: "https://psytests.org/trauma/ctq.html" },
    { id: 18, name: "–¢–µ—Å—Ç –Ω–∞ —à–∏–∑–æ—Ç–∏–ø–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ª–∏—á–Ω–æ—Å—Ç–∏", url: "https://psytests.org/diag/spq.html" }
  ];

  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Gemini –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–≤–µ—Ç–æ–≤
    const analysisPrompt = `–ü—Ä–æ–≤–µ–¥–∏ –≥–ª—É–±–æ–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–∞—Ö —Ç–µ—Å—Ç–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

–ò–°–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–°–ö–ê–Ø –ó–ê–î–ê–ß–ê:
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –∏ –≤—ã—è–≤–∏ –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, —Ç—Ä–µ–±—É—é—â–∏–µ —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è.

–î–ê–ù–ù–´–ï –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:
${JSON.stringify(answers)}

–î–û–°–¢–£–ü–ù–´–ï –¢–ï–°–¢–´ –î–õ–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
${allTests.map((test, index) => `${index + 1}. ${test.name}`).join('\n')}

–ò–°–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø:
1. –í—ã—è–≤–∏ –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
2. –û–ø—Ä–µ–¥–µ–ª–∏ –æ–±–ª–∞—Å—Ç–∏ –ø–æ–≤—ã—à–µ–Ω–Ω–æ–≥–æ —Ä–∏—Å–∫–∞
3. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∏ –º–µ–∂–¥—É –æ—Ç–≤–µ—Ç–∞–º–∏
4. –û—Ü–µ–Ω–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ê–ù–ê–õ–ò–ó–£:
- –ò—Å–ø–æ–ª—å–∑—É–π –Ω–∞—É—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∞–Ω–∞–ª–∏–∑—É –¥–∞–Ω–Ω—ã—Ö
- –í—ã—è–≤–∏ —Å–∫—Ä—ã—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
- –û–ø—Ä–µ–¥–µ–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
- –£—á—Ç–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê: –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —Ç–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1,3,6,7), –º–∞–∫—Å–∏–º—É–º 5 —Ç–µ—Å—Ç–æ–≤.`;

    const recommendedTestNumbers = await callGeminiAI(analysisPrompt, 400);
    console.log('üî¨ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç Gemini:', recommendedTestNumbers);
    
    // –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä–∞ —Ç–µ—Å—Ç–æ–≤
    const testNumbers = recommendedTestNumbers.split(',').map(num => parseInt(num.trim()) - 1).filter(num => num >= 0 && num < allTests.length);
    
    const recommendedTests = testNumbers.map(num => allTests[num]);
    
    // –ï—Å–ª–∏ Gemini –Ω–µ –¥–∞–ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –ª–æ–≥–∏–∫—É
    if (recommendedTests.length === 0) {
      console.log('‚ö†Ô∏è Gemini –Ω–µ –¥–∞–ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –ª–æ–≥–∏–∫—É');
      return getFallbackRecommendations(answers, allTests);
    }
    
    return recommendedTests.slice(0, 5);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Gemini, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback:', error.message);
    return getFallbackRecommendations(answers, allTests);
  }
}

function getFallbackRecommendations(answers, allTests) {
  const recommendedTests = [];
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–µ—Å—Ç—ã
  if (answers[1]?.answer === 'yes' || answers[17]?.answer === 'yes') {
    recommendedTests.push(allTests[1]); // –ë–ê–†
  }
  
  if (answers[3]?.answer === 'yes' || answers[16]?.answer === 'yes') {
    recommendedTests.push(allTests[0]); // –ü–†–õ
  }
  
  if (answers[2]?.answer === 'yes' || answers[10]?.answer === 'yes' || answers[15]?.answer === 'yes') {
    recommendedTests.push(allTests[2]); // –°–î–í–ì
  }
  
  if (answers[5]?.answer === 'yes' || answers[33]?.answer === 'yes') {
    recommendedTests.push(allTests[3]); // –ü–¢–°–†
    recommendedTests.push(allTests[4]); // –∫–ü–¢–°–†
  }
  
  if (answers[1]?.answer === 'yes' || answers[17]?.answer === 'yes') {
    recommendedTests.push(allTests[5]); // –î–µ–ø—Ä–µ—Å—Å–∏—è
  }
  
  if (answers[4]?.answer === 'yes' || answers[11]?.answer === 'yes') {
    recommendedTests.push(allTests[6]); // –¢—Ä–µ–≤–æ–∂–Ω–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    recommendedTests.push(allTests[12]); // –°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞
  }
  
  if (answers[12]?.answer === 'yes') {
    recommendedTests.push(allTests[7]); // –û–ö–†
  }
  
  if (answers[6]?.answer === 'yes') {
    recommendedTests.push(allTests[8]); // –†–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–∏—â–µ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
  }
  
  if (answers[7]?.answer === 'yes' || answers[31]?.answer === 'yes') {
    recommendedTests.push(allTests[9]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –≤–µ—â–µ—Å—Ç–≤
  }
  
  if (answers[13]?.answer === 'yes' || answers[24]?.answer === 'yes') {
    recommendedTests.push(allTests[10]); // –î–∏—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
  }
  
  if (answers[15]?.answer === 'yes') {
    recommendedTests.push(allTests[15]); // –°—É–∏—Ü–∏–¥–∞–ª—å–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏
  }
  
  if (answers[33]?.answer === 'yes') {
    recommendedTests.push(allTests[16]); // –î–µ—Ç—Å–∫–∞—è —Ç—Ä–∞–≤–º–∞
  }

  // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
  const uniqueTests = recommendedTests.filter((test, index, self) => 
    index === self.findIndex(t => t.id === test.id)
  );

  return uniqueTests.slice(0, 5); // –ú–∞–∫—Å–∏–º—É–º 5 —Ç–µ—Å—Ç–æ–≤
}

// PDF –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –∏ –ø—Å–∏—Ö–∏–∞—Ç—Ä–∞ - –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
router.post('/psychologist-pdf', async (req, res) => {
  try {
    console.log('üéØ [PSYCHOLOGIST-PDF] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞');
    const { sessionId } = req.body;
    console.log('üéØ [PSYCHOLOGIST-PDF] SessionId:', sessionId);
    
    if (!sessionId) {
      console.error('‚ùå [PSYCHOLOGIST-PDF] SessionId –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω');
      return res.status(400).json({ success: false, error: 'SessionId is required' });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    console.log('üîç [PSYCHOLOGIST-PDF] –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î...');
    const { data: primaryTest, error: primaryError } = await supabase
      .from('primary_test_results')
      .select('answers, email, nickname, personal_plan')
      .eq('session_id', sessionId)
      .maybeSingle();

    if (primaryError || !primaryTest) {
      console.error('‚ùå [PSYCHOLOGIST-PDF] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:', primaryError);
      return res.status(404).json({ success: false, error: 'Primary test results not found' });
    }

    const primaryAnswers = primaryTest.answers;
    const userEmail = primaryTest.email;
    const userNickname = primaryTest.nickname;
    const personalPlan = primaryTest.personal_plan;

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ sessionId
    const { data: additionalTests, error: additionalError } = await supabase
      .from('additional_test_results')
      .select('test_type, answers')
      .eq('session_id', sessionId);

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    let additionalTestResults = '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã';
    if (additionalTests && additionalTests.length > 0) {
      additionalTestResults = additionalTests.map(test => 
        `${test.test_type}: ${test.answers}`
      ).join('\n');
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –æ—Ç–≤–µ—Ç–æ–≤
    let userGender = '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω';
    if (primaryAnswers && Array.isArray(primaryAnswers)) {
      const genderAnswer = primaryAnswers.find(answer => 
        answer.questionId === 1 && answer.answer
      );
      if (genderAnswer) {
        userGender = genderAnswer.answer.toLowerCase().includes('–∂–µ–Ω—Å–∫–∏–π') ? '–∂–µ–Ω—Å–∫–∏–π' : '–º—É–∂—Å–∫–æ–π';
      }
    }

    console.log('üìä [PSYCHOLOGIST-PDF] –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:', {
      userGender,
      primaryAnswersCount: primaryAnswers?.length || 0,
      additionalTestsCount: additionalTests?.length || 0,
      hasPersonalPlan: !!personalPlan
    });

    // –ß–∏—Ç–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏ –ø—Ä–∏–º–µ—Ä
    const promptPath = path.join(__dirname, '../../prompt-3.txt');
    const examplePath = path.join(__dirname, '../../example-pdf-for-psy.txt');
    
    console.log('üìñ [PSYCHOLOGIST-PDF] –ß–∏—Ç–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞:', promptPath);
    const promptTemplate = fs.readFileSync(promptPath, 'utf8');
    
    console.log('üìñ [PSYCHOLOGIST-PDF] –ß–∏—Ç–∞–µ–º –ø—Ä–∏–º–µ—Ä –∏–∑ —Ñ–∞–π–ª–∞:', examplePath);
    const examplePdf = fs.readFileSync(examplePath, 'utf8');

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    const prompt = promptTemplate
      .replace('{user_gender}', userGender)
      .replace('{user_answers}', JSON.stringify(primaryAnswers))
      .replace('{secondary_test_results}', additionalTestResults)
      .replace('{personal_plan}', personalPlan || '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω')
      .replace('{example_pdf}', examplePdf);

    console.log('üöÄ [PSYCHOLOGIST-PDF] –í—ã–∑—ã–≤–∞–µ–º Gemini API...');
    const psychologistPdf = await callGeminiAI(prompt, 12000);
    console.log('‚úÖ [PSYCHOLOGIST-PDF] PDF –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –∏ –ø—Å–∏—Ö–∏–∞—Ç—Ä–∞ –ø–æ–ª—É—á–µ–Ω –æ—Ç Gemini, –¥–ª–∏–Ω–∞:', psychologistPdf?.length || 0);

    res.json({ 
      success: true, 
      psychologistPdf: psychologistPdf,
      userNickname: userNickname || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    });

  } catch (error) {
    console.error('‚ùå [PSYCHOLOGIST-PDF] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', {
      message: error.message,
      stack: error.stack
    });
    res.status(500).json({ success: false, error: error.message });
  }
});

export default router;

import express from 'express';
import axios from 'axios';
import { pool } from '../index.js';

const router = express.Router();

// –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–∞—Å–∫–æ—Ç–∞ –¥–ª—è –ª–µ–Ω–¥–∏–Ω–≥–∞ –æ–ø–ª–∞—Ç—ã
router.post('/mascot-message/payment', async (req, res) => {
  try {
    console.log('ü§ñ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è –º–∞—Å–∫–æ—Ç–∞:', req.body);
    
    const { sessionId } = req.body;
    
    if (!sessionId) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç sessionId');
      return res.status(400).json({ success: false, error: 'SessionId is required' });
    }
    
    console.log('üîë OpenAI API Key:', process.env.OPENAI_API_KEY ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞
    const testResult = await pool.query(
      'SELECT answers FROM primary_test_results WHERE session_id = $1',
      [sessionId]
    );

    if (testResult.rows.length === 0) {
      return res.status(404).json({ success: false, error: 'Test results not found' });
    }

    const answers = testResult.rows[0].answers;
    
    const prompt = `–ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞ –Ω–∞ –ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ —Å–æ–∑–¥–∞–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–∞—Å–∫–æ—Ç–∞ –õ—É–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ç–µ—Å—Ç. 

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞: ${JSON.stringify(answers)}

–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å:
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º –∏ –æ–±–æ–¥—Ä—è—é—â–∏–º
- –ö—Ä–∞—Ç–∫–∏–º (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
- –£–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –≤–∞–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
- –ë—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–æ –æ—Ç –ª–∏—Ü–∞ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–≥–æ –º–∞—Å–∫–æ—Ç–∞ –õ—É–º–∏
- –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –≤ –æ—Ç–≤–µ—Ç–∞—Ö –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞

–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.`;

    const response = await axios.post('https://api.openai.com/v1/chat/completions', {
      model: 'gpt-4',
      messages: [{ role: 'user', content: prompt }],
      max_tokens: 200,
      temperature: 0.7
    }, {
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      }
    });

    const message = response.data.choices[0].message.content;
    res.json({ success: true, message });
  } catch (error) {
    console.error('Error generating mascot message:', error);
    res.status(500).json({ success: false, error: error.message });
  }
});

// –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–∞—Å–∫–æ—Ç–∞ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
router.post('/mascot-message/dashboard', async (req, res) => {
  try {
    const { sessionId } = req.body;
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
    const primaryTest = await pool.query(
      'SELECT answers, email FROM primary_test_results WHERE session_id = $1',
      [sessionId]
    );

    console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –∏–∑ –ë–î:', primaryTest.rows);

    if (primaryTest.rows.length === 0) {
      console.log('‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è sessionId:', sessionId);
      return res.status(404).json({ success: false, error: 'Test results not found' });
    }

    const answers = primaryTest.rows[0].answers;
    const email = primaryTest.rows[0].email;
    
    console.log('üìä –û—Ç–≤–µ—Ç—ã —Ç–µ—Å—Ç–∞:', answers);
    console.log('üìß Email –∏–∑ –ë–î:', email);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ç–µ—Å—Ç—ã
    const recommendedTests = await analyzeAndRecommendTests(answers);
    
    const prompt = `–ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å–æ–∑–¥–∞–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–∞—Å–∫–æ—Ç–∞ –õ—É–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞: ${JSON.stringify(answers)}
–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã: ${recommendedTests.map(t => t.name).join(', ')}

–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å:
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º
- –û–±—ä—è—Å–Ω—è—Ç—å –≤–∞–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
- –£–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
- –ë—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–æ –æ—Ç –ª–∏—Ü–∞ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–≥–æ –º–∞—Å–∫–æ—Ç–∞ –õ—É–º–∏
- –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ö—Ä–∞—Ç–∫–∏–º (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)

–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.`;

    const response = await axios.post('https://api.openai.com/v1/chat/completions', {
      model: 'gpt-3.5-turbo',
      messages: [{ role: 'user', content: prompt }],
      max_tokens: 250,
      temperature: 0.7
    }, {
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      }
    });

    const message = response.data.choices[0].message.content;
    res.json({ success: true, message, recommendedTests });
  } catch (error) {
    console.error('Error generating dashboard message:', error);
    res.status(500).json({ success: false, error: error.message });
  }
});

// –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω
router.post('/personal-plan', async (req, res) => {
  try {
    const { sessionId } = req.body;
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
    const primaryTest = await pool.query(
      'SELECT answers FROM primary_test_results WHERE session_id = $1',
      [sessionId]
    );

    const additionalTests = await pool.query(
      'SELECT test_name, test_result FROM additional_test_results WHERE session_id = $1',
      [sessionId]
    );

    if (primaryTest.rows.length === 0) {
      return res.status(404).json({ success: false, error: 'Test results not found' });
    }

    const primaryAnswers = primaryTest.rows[0].answers;
    const additionalResults = additionalTests.rows;
    
    const prompt = `–ù–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: ${JSON.stringify(primaryAnswers)}
–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${JSON.stringify(additionalResults)}

–°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤–∫–ª—é—á–∞–µ—Ç:
1. –ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
2. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–µ—Ä–∞–ø–∏–∏
3. –°–æ–≤–µ—Ç—ã –ø–æ –≤—ã–±–æ—Ä—É –ø—Å–∏—Ö–æ–ª–æ–≥–∞
4. –ü–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ —Å–µ–∞–Ω—Å–∞–º
5. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã

–ü–ª–∞–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:
- –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –ü—Ä–∞–∫—Ç–∏—á–Ω—ã–º –∏ –≤—ã–ø–æ–ª–Ω–∏–º—ã–º
- –ù–∞–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ –ø—É–Ω–∫—Ç–∞–º–∏

–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º –ø–ª–∞–Ω–∞, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.`;

    const response = await axios.post('https://api.openai.com/v1/chat/completions', {
      model: 'gpt-3.5-turbo',
      messages: [{ role: 'user', content: prompt }],
      max_tokens: 2000,
      temperature: 0.7
    }, {
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      }
    });

    const plan = response.data.choices[0].message.content;
    res.json({ success: true, plan });
  } catch (error) {
    console.error('Error generating personal plan:', error);
    res.status(500).json({ success: false, error: error.message });
  }
});

// –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ —Å–µ–∞–Ω—Å—É
router.post('/session-preparation', async (req, res) => {
  try {
    const { sessionId, specialistType } = req.body; // 'psychologist' –∏–ª–∏ 'psychiatrist'
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
    const primaryTest = await pool.query(
      'SELECT answers FROM primary_test_results WHERE session_id = $1',
      [sessionId]
    );

    const additionalTests = await pool.query(
      'SELECT test_name, test_result FROM additional_test_results WHERE session_id = $1',
      [sessionId]
    );

    if (primaryTest.rows.length === 0) {
      return res.status(404).json({ success: false, error: 'Test results not found' });
    }

    const primaryAnswers = primaryTest.rows[0].answers;
    const additionalResults = additionalTests.rows;
    
    const specialistName = specialistType === 'psychologist' ? '–ø—Å–∏—Ö–æ–ª–æ–≥—É' : '–ø—Å–∏—Ö–∏–∞—Ç—Ä—É';
    
    const prompt = `–ù–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–π —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —Å–µ–∞–Ω—Å—É —Å ${specialistName}.

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: ${JSON.stringify(primaryAnswers)}
–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${JSON.stringify(additionalResults)}

–°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –≤–∫–ª—é—á–∞–µ—Ç:
1. –ß—Ç–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å ${specialistName} –æ —Å–≤–æ–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
2. –ö–∞–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞—Ç—å ${specialistName}
3. –¶–µ–ª–∏ —Å–µ–∞–Ω—Å–∞
4. –ß—Ç–æ –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π (–æ—Å–æ–±–µ–Ω–Ω–æ –¥–ª—è –ø—Å–∏—Ö–∏–∞—Ç—Ä–∞ - –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤)
5. –ö–∞–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Ä–µ–º—è

–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å:
- –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
- –ü—Ä–∞–∫—Ç–∏—á–Ω—ã–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º
- –ù–∞–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∏ –ø—É–Ω–∫—Ç–∞–º–∏

–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.`;

    const response = await axios.post('https://api.openai.com/v1/chat/completions', {
      model: 'gpt-3.5-turbo',
      messages: [{ role: 'user', content: prompt }],
      max_tokens: 1500,
      temperature: 0.7
    }, {
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      }
    });

    const preparation = response.data.choices[0].message.content;
    res.json({ success: true, preparation });
  } catch (error) {
    console.error('Error generating session preparation:', error);
    res.status(500).json({ success: false, error: error.message });
  }
});

// –ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –ø–æ —Å–µ–∞–Ω—Å—É
router.post('/session-feedback', async (req, res) => {
  try {
    const { sessionId, feedbackText } = req.body;
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
    const primaryTest = await pool.query(
      'SELECT answers FROM primary_test_results WHERE session_id = $1',
      [sessionId]
    );

    const additionalTests = await pool.query(
      'SELECT test_name, test_result FROM additional_test_results WHERE session_id = $1',
      [sessionId]
    );

    if (primaryTest.rows.length === 0) {
      return res.status(404).json({ success: false, error: 'Test results not found' });
    }

    const primaryAnswers = primaryTest.rows[0].answers;
    const additionalResults = additionalTests.rows;
    
    const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–µ–∞–Ω—Å–µ —Å –ø—Å–∏—Ö–æ–ª–æ–≥–æ–º –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: ${JSON.stringify(primaryAnswers)}
–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${JSON.stringify(additionalResults)}
–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${feedbackText}

–î–∞–π –∞–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
1. –û—Ü–µ–Ω–∫–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–µ–∞–Ω—Å–∞
2. –ß—Ç–æ –±—ã–ª–æ —Ö–æ—Ä–æ—à–æ
3. –ù–∞ —á—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ
4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —Å–µ–∞–Ω—Å–æ–≤
5. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã

–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:
- –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º
- –û—Å–Ω–æ–≤–∞–Ω–Ω—ã–º –Ω–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
- –ü—Ä–∞–∫—Ç–∏—á–Ω—ã–º
- –ù–∞–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º

–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º –∞–Ω–∞–ª–∏–∑–∞, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.`;

    const response = await axios.post('https://api.openai.com/v1/chat/completions', {
      model: 'gpt-3.5-turbo',
      messages: [{ role: 'user', content: prompt }],
      max_tokens: 1500,
      temperature: 0.7
    }, {
      headers: {
        'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
        'Content-Type': 'application/json'
      }
    });

    const analysis = response.data.choices[0].message.content;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –≤ –±–∞–∑—É
    await pool.query(
      'INSERT INTO session_feedback (session_id, feedback_text, ai_response) VALUES ($1, $2, $3)',
      [sessionId, feedbackText, analysis]
    );

    res.json({ success: true, analysis });
  } catch (error) {
    console.error('Error analyzing session feedback:', error);
    res.status(500).json({ success: false, error: error.message });
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤
async function analyzeAndRecommendTests(answers) {
  const allTests = [
    { id: 1, name: "–¢–µ—Å—Ç –Ω–∞ –ø–æ–≥—Ä–∞–Ω–∏—á–Ω–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ª–∏—á–Ω–æ—Å—Ç–∏ (–ü–†–õ)", url: "https://yasno.live/tests/pogranichnoye-rasstroystvo-lichnosti" },
    { id: 2, name: "–¢–µ—Å—Ç –Ω–∞ –±–∏–ø–æ–ª—è—Ä–Ω–æ–µ –∞—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–ë–ê–†)", url: "https://iyaroslav.ru/test/test-na-gipomaniu-bipolarnoe-rasstroystvo/" },
    { id: 3, name: "–¢–µ—Å—Ç –Ω–∞ —Å–∏–Ω–¥—Ä–æ–º –¥–µ—Ñ–∏—Ü–∏—Ç–∞ –≤–Ω–∏–º–∞–Ω–∏—è –∏ –≥–∏–ø–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–°–î–í–ì)", url: "https://yasno.live/tests/sdvg" },
    { id: 4, name: "–¢–µ—Å—Ç –Ω–∞ –ø–æ—Å—Ç—Ç—Ä–∞–≤–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ç—Ä–µ—Å—Å–æ–≤–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–ü–¢–°–†)", url: "https://yasno.live/tests/ptsr" },
    { id: 5, name: "–¢–µ—Å—Ç –Ω–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –ø–æ—Å—Ç—Ç—Ä–∞–≤–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å—Ç—Ä–µ—Å—Å–æ–≤–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–∫–ü–¢–°–†)", url: "https://www.bipolar.su/test-kptsr-onlajn-oprosnik-na-kompleksnoe-ptsr/" },
    { id: 6, name: "–¢–µ—Å—Ç –Ω–∞ –¥–µ–ø—Ä–µ—Å—Å–∏—é", url: "https://psi-praktika.ru/testyi/test-beka-na-depressiyu.html" },
    { id: 7, name: "–¢–µ—Å—Ç –Ω–∞ –≥–µ–Ω–µ—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Ç—Ä–µ–≤–æ–∂–Ω–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", url: "https://psytests.org/anxiety/gad7.html" },
    { id: 8, name: "–¢–µ—Å—Ç –Ω–∞ –æ–±—Å–µ—Å—Å–∏–≤–Ω–æ-–∫–æ–º–ø—É–ª—å—Å–∏–≤–Ω–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (–û–ö–†)", url: "https://yasno.live/tests/okr-jelya-brauna" },
    { id: 9, name: "–¢–µ—Å—Ç –Ω–∞ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–∏—â–µ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è", url: "https://centrsna.by/articles/testy/test-eat-26-test-na-veroyatnost-nalichiya-rasstroystv-pishchevogo-povedeniya/" },
    { id: 10, name: "–¢–µ—Å—Ç –Ω–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –≤–µ—â–µ—Å—Ç–≤", url: "https://rehabfamily.com/o-klinike/testy/test-na-narkoticheskuyu-zavisimost/" },
    { id: 11, name: "–¢–µ—Å—Ç –Ω–∞ –¥–∏—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", url: "https://yasno.live/tests/dissociativnoe-rasstrojstvo-lichnosti" },
    { id: 12, name: "–¢–µ—Å—Ç –Ω–∞ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∞—É—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–µ–∫—Ç—Ä–∞ (–†–ê–°)", url: "https://psytests.org/arc/aq.html" },
    { id: 13, name: "–¢–µ—Å—Ç –Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–µ —Ç—Ä–µ–≤–æ–∂–Ω–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", url: "https://psytests.org/anxiety/lsas.html" },
    { id: 14, name: "–¢–µ—Å—Ç –Ω–∞ –ø–∞–Ω–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", url: "https://akhmetovfoundation.org/ru/test/panycheskye-ataky-onlayn-test" },
    { id: 15, name: "–¢–µ—Å—Ç –Ω–∞ –¥–∏—Å–º–æ—Ä—Ñ–æ—Ñ–æ–±–∏—é", url: "https://testometrika.com/diagnosis-of-abnormalities/are-you-prone-to-dysmorphophobia/" },
    { id: 16, name: "–¢–µ—Å—Ç –Ω–∞ —Å—É–∏—Ü–∏–¥–∞–ª—å–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏", url: "https://testometrika.com/depression-and-stress/the-questionnaire-of-suicidal-risk-for-adolescents/" },
    { id: 17, name: "–¢–µ—Å—Ç –Ω–∞ –¥–µ—Ç—Å–∫—É—é —Ç—Ä–∞–≤–º—É", url: "https://ershovlabexpert.ru/test/detskie_travmy" },
    { id: 18, name: "–¢–µ—Å—Ç –Ω–∞ —à–∏–∑–æ—Ç–∏–ø–∏—á–µ—Å–∫–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ª–∏—á–Ω–æ—Å—Ç–∏", url: "https://onlinetestpad.com/ru/test/1492724-test-na-shizotipicheskoe-rasstrojstvo" }
  ];

  // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤
  const recommendedTests = [];
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–µ—Å—Ç—ã
  if (answers[1]?.answer === 'yes' || answers[17]?.answer === 'yes') {
    recommendedTests.push(allTests[1]); // –ë–ê–†
  }
  
  if (answers[3]?.answer === 'yes' || answers[16]?.answer === 'yes') {
    recommendedTests.push(allTests[0]); // –ü–†–õ
  }
  
  if (answers[2]?.answer === 'yes' || answers[10]?.answer === 'yes' || answers[15]?.answer === 'yes') {
    recommendedTests.push(allTests[2]); // –°–î–í–ì
  }
  
  if (answers[5]?.answer === 'yes' || answers[33]?.answer === 'yes') {
    recommendedTests.push(allTests[3]); // –ü–¢–°–†
    recommendedTests.push(allTests[4]); // –∫–ü–¢–°–†
  }
  
  if (answers[1]?.answer === 'yes' || answers[17]?.answer === 'yes') {
    recommendedTests.push(allTests[5]); // –î–µ–ø—Ä–µ—Å—Å–∏—è
  }
  
  if (answers[4]?.answer === 'yes' || answers[11]?.answer === 'yes') {
    recommendedTests.push(allTests[6]); // –¢—Ä–µ–≤–æ–∂–Ω–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    recommendedTests.push(allTests[12]); // –°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞
  }
  
  if (answers[12]?.answer === 'yes') {
    recommendedTests.push(allTests[7]); // –û–ö–†
  }
  
  if (answers[6]?.answer === 'yes') {
    recommendedTests.push(allTests[8]); // –†–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–∏—â–µ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
  }
  
  if (answers[7]?.answer === 'yes' || answers[31]?.answer === 'yes') {
    recommendedTests.push(allTests[9]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –≤–µ—â–µ—Å—Ç–≤
  }
  
  if (answers[13]?.answer === 'yes' || answers[24]?.answer === 'yes') {
    recommendedTests.push(allTests[10]); // –î–∏—Å—Å–æ—Ü–∏–∞—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
  }
  
  if (answers[15]?.answer === 'yes') {
    recommendedTests.push(allTests[15]); // –°—É–∏—Ü–∏–¥–∞–ª—å–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏
  }
  
  if (answers[33]?.answer === 'yes') {
    recommendedTests.push(allTests[16]); // –î–µ—Ç—Å–∫–∞—è —Ç—Ä–∞–≤–º–∞
  }

  // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
  const uniqueTests = recommendedTests.filter((test, index, self) => 
    index === self.findIndex(t => t.id === test.id)
  );

  return uniqueTests.slice(0, 5); // –ú–∞–∫—Å–∏–º—É–º 5 —Ç–µ—Å—Ç–æ–≤
}

export default router;

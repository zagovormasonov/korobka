import express from 'express';
import crypto from 'crypto';
import axios from 'axios';
import { supabase } from '../index.js';

const router = express.Router();

// –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂
router.post('/create', async (req, res) => {
  try {
    console.log('üí≥ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞:', req.body);
    
    const { sessionId, amount = 1000 } = req.body; // 10 —Ä—É–±–ª–µ–π = 1000 –∫–æ–ø–µ–µ–∫
    
    if (!sessionId) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç sessionId');
      return res.status(400).json({ success: false, error: 'SessionId is required' });
    }
    
    const terminalKey = process.env.TINKOFF_TERMINAL_KEY;
    const password = process.env.TINKOFF_PASSWORD;
    
    if (!terminalKey || !password) {
      console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π');
      return res.status(500).json({ success: false, error: 'Payment configuration not found' });
    }

    console.log('üîë Terminal Key:', terminalKey ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
    console.log('üîë Password:', password ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù');
    console.log('üîë Terminal Key –∑–Ω–∞—á–µ–Ω–∏–µ:', terminalKey);
    console.log('üîë –≠—Ç–æ DEMO –∫–ª—é—á?', terminalKey?.includes('DEMO'));

    const orderId = `${sessionId.slice(0, 8)}_${Date.now()}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É OrderId (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –¢–∏–Ω—å–∫–æ—Ñ—Ñ)
    if (orderId.length > 50) {
      console.error('‚ùå OrderId —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π:', orderId.length, '—Å–∏–º–≤–æ–ª–æ–≤');
      return res.status(400).json({ 
        success: false, 
        error: 'OrderId —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π' 
      });
    }
    
    console.log('üÜî OrderId:', orderId, '(–¥–ª–∏–Ω–∞:', orderId.length, '—Å–∏–º–≤–æ–ª–æ–≤)');
    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º idenself.com –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
    const baseUrl = process.env.FRONTEND_URL || 'https://idenself.com';
    console.log('üåê Base URL –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π:', baseUrl);
    console.log('üåê SuccessURL:', `${baseUrl}/payment-success?sessionId=${sessionId}`);
    console.log('üåê FailURL:', `${baseUrl}/payment?sessionId=${sessionId}&payment=failed`);
    
    const paymentData = {
      TerminalKey: terminalKey,
      Amount: amount,
      OrderId: orderId,
      Description: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è',
      CustomerKey: sessionId,
      SuccessURL: `${baseUrl}/payment-success?sessionId=${sessionId}`,
      FailURL: `${baseUrl}/payment?sessionId=${sessionId}&payment=failed`,
      Receipt: {
        Email: 'test@example.com',
        Taxation: 'usn_income',
        Items: [
          {
            Name: '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è',
            Price: amount,
            Quantity: 1,
            Amount: amount,
            Tax: 'none'
          }
        ]
      }
    };

    // –°–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ - –¥–æ–±–∞–≤–ª—è–µ–º Password –∫ –¥–∞–Ω–Ω—ã–º –ø–ª–∞—Ç–µ–∂–∞
    const tokenData = {
      ...paymentData,
      Password: password
    };
    
    const token = createToken(tokenData);
    paymentData.Token = token;

    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –¢–∏–Ω—å–∫–æ—Ñ—Ñ API...');
    console.log('üìã –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞:', JSON.stringify(paymentData, null, 2));
    console.log('üîê Token –¥–ª—è –ø–æ–¥–ø–∏—Å–∏:', token);
    console.log('üîë TerminalKey:', terminalKey);
    console.log('üí∞ Amount:', amount);
    console.log('üÜî OrderId:', orderId);

    const response = await axios.post('https://securepay.tinkoff.ru/v2/Init', paymentData);
    
    console.log('üì• –û—Ç–≤–µ—Ç –æ—Ç –¢–∏–Ω—å–∫–æ—Ñ—Ñ:', response.data);
    console.log('üì• –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
    console.log('üì• –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', response.headers);
    
    if (response.data.Success) {
      console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ –¢–∏–Ω—å–∫–æ—Ñ—Ñ');
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –±–∞–∑—É
      const { data, error } = await supabase
        .from('payments')
        .insert({
          session_id: sessionId,
          payment_id: orderId,
          amount: amount,
          status: 'PENDING'
        })
        .select()
        .single();

      if (error) throw error;

      console.log('üíæ –ü–ª–∞—Ç–µ–∂ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');

      res.json({
        success: true,
        paymentUrl: response.data.PaymentURL,
        paymentId: orderId
      });
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –≤ –¢–∏–Ω—å–∫–æ—Ñ—Ñ:', response.data);
      console.error('‚ùå –ö–æ–¥ –æ—à–∏–±–∫–∏:', response.data.ErrorCode);
      console.error('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ—à–∏–±–∫–∏:', response.data.Message);
      console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', response.data.Details);
      res.status(400).json({
        success: false,
        error: response.data.Message || 'Payment creation failed',
        errorCode: response.data.ErrorCode,
        details: response.data.Details
      });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:', error.message);
    
    if (error.response) {
      console.error('üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.response.status, error.response.data);
      res.status(400).json({ 
        success: false, 
        error: `–û—à–∏–±–∫–∞ –¢–∏–Ω—å–∫–æ—Ñ—Ñ API: ${error.response.data?.Message || error.message}` 
      });
    } else if (error.request) {
      console.error('üì§ –ó–∞–ø—Ä–æ—Å –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', error.message);
      res.status(500).json({ 
        success: false, 
        error: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –¢–∏–Ω—å–∫–æ—Ñ—Ñ API' 
      });
    } else {
      console.error('üîß –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
      res.status(500).json({ 
        success: false, 
        error: error.message 
      });
    }
  }
});

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
router.get('/status/:paymentId', async (req, res) => {
  try {
    const { paymentId } = req.params;
    
    const terminalKey = process.env.TINKOFF_TERMINAL_KEY;
    const password = process.env.TINKOFF_PASSWORD;
    
    const statusData = {
      TerminalKey: terminalKey,
      PaymentId: paymentId,
      Password: password
    };
    
    const token = createToken(statusData);
    
    const response = await axios.post('https://securepay.tinkoff.ru/v2/GetState', {
      TerminalKey: terminalKey,
      PaymentId: paymentId,
      Token: token
    });
    
    if (response.data.Success) {
      const status = response.data.Status;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const { error } = await supabase
        .from('payments')
        .update({ 
          status: status,
          updated_at: new Date().toISOString()
        })
        .eq('payment_id', paymentId);

      if (error) throw error;
      
      res.json({
        success: true,
        status: status,
        paid: status === 'CONFIRMED'
      });
    } else {
      res.status(400).json({
        success: false,
        error: response.data.Message || 'Status check failed'
      });
    }
  } catch (error) {
    console.error('Error checking payment status:', error);
    res.status(500).json({ success: false, error: error.message });
  }
});

// Webhook –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –¢–∏–Ω—å–∫–æ—Ñ—Ñ
router.post('/webhook', async (req, res) => {
  try {
    const { TerminalKey, Status, PaymentId, OrderId } = req.body;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
    const receivedToken = req.body.Token;
    const expectedToken = createToken({
      TerminalKey,
      Status,
      PaymentId,
      OrderId,
      Password: process.env.TINKOFF_PASSWORD
    });
    
    if (receivedToken !== expectedToken) {
      return res.status(400).json({ success: false, error: 'Invalid token' });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
    const { error } = await supabase
      .from('payments')
      .update({ 
        status: Status,
        updated_at: new Date().toISOString()
      })
      .eq('payment_id', PaymentId);

    if (error) throw error;
    
    res.json({ success: true });
  } catch (error) {
    console.error('Error processing webhook:', error);
    res.status(500).json({ success: false, error: error.message });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –ø–æ sessionId
router.get('/session/:sessionId', async (req, res) => {
  try {
    const { sessionId } = req.params;
    
    const { data, error } = await supabase
      .from('payments')
      .select('*')
      .eq('session_id', sessionId)
      .order('created_at', { ascending: false })
      .limit(1)
      .single();
    
    if (error) throw error;
    if (!data) {
      return res.status(404).json({ success: false, error: 'Payment not found' });
    }
    
    res.json({
      success: true,
      payment: {
        id: data.payment_id,
        amount: data.amount,
        status: data.status,
        createdAt: data.created_at
      }
    });
  } catch (error) {
    console.error('Error fetching payment:', error);
    res.status(500).json({ success: false, error: error.message });
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –¢–∏–Ω—å–∫–æ—Ñ—Ñ
// –ê–ª–≥–æ—Ä–∏—Ç–º: SHA-256 –æ—Ç –∫–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏–∏ –ó–ù–ê–ß–ï–ù–ò–ô –ø–æ–ª–µ–π, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –ö–õ–Æ–ß–ï–ô
function createToken(data) {
  // –ò—Å–∫–ª—é—á–∞–µ–º Token, Receipt, –∏ –ª—é–±—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏–∑ –ø–æ–¥–ø–∏—Å–∏
  const filteredData = {};
  for (const key in data) {
    if (key !== 'Token' && key !== 'Receipt' && typeof data[key] !== 'object') {
      filteredData[key] = data[key];
    }
  }
  
  console.log('üîê –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞:', filteredData);
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –∏ –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ó–ù–ê–ß–ï–ù–ò–Ø
  const sortedKeys = Object.keys(filteredData).sort();
  const values = sortedKeys.map(key => filteredData[key]);
  const tokenString = values.join('');
  
  console.log('üîê –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏:', sortedKeys);
  console.log('üîê –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∏:', values);
  console.log('üîê –°—Ç—Ä–æ–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏:', tokenString);
  
  const token = crypto.createHash('sha256').update(tokenString).digest('hex');
  console.log('üîê –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:', token);
  
  return token;
}

export default router;

import express from 'express';
import multer from 'multer';
import { GoogleGenerativeAI } from '@google/generative-ai';
import { readFileSync, unlinkSync, mkdirSync } from 'fs';
import { tmpdir } from 'os';
import path from 'path';

const router = express.Router();

// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
const uploadDir = path.join(tmpdir(), 'chat-uploads');
try {
  mkdirSync(uploadDir, { recursive: true });
} catch (err) {
  console.log('–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∞:', uploadDir);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, uploadDir); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–∏—Å—Ç–µ–º—ã
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));
  }
});

const upload = multer({
  storage: storage,
  limits: {
    fileSize: 20 * 1024 * 1024 // 20MB –ª–∏–º–∏—Ç
  },
  fileFilter: (req, file, cb) => {
    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp', 'application/pdf'];
    if (allowedTypes.includes(file.mimetype)) {
      cb(null, true);
    } else {
      cb(new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPEG, PNG, GIF, WEBP) –∏ PDF.'));
    }
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ –≤ form–∞—Ç Gemini
function fileToGenerativePart(filePath, mimeType) {
  return {
    inlineData: {
      data: readFileSync(filePath).toString('base64'),
      mimeType
    }
  };
}

// –†–æ—É—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
router.post('/message', upload.array('files', 10), async (req, res) => {
  const uploadedFiles = [];
  
  try {
    const { message, history } = req.body;
    const files = req.files || [];
    
    console.log('üí¨ –ó–∞–ø—Ä–æ—Å –∫ —á–∞—Ç—É:', {
      message: message?.substring(0, 50) + '...',
      filesCount: files.length,
      historyLength: history ? JSON.parse(history).length : 0
    });

    if (!message && files.length === 0) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª'
      });
    }

    const apiKey = process.env.GEMINI_API_KEY;
    if (!apiKey) {
      throw new Error('GEMINI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Google AI
    const genAI = new GoogleGenerativeAI(apiKey);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    uploadedFiles.push(...files.map(f => f.path));

    // –§–æ—Ä–º–∏—Ä—É–µ–º —á–∞—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
    const parts = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (message) {
      parts.push({ text: message });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
    for (const file of files) {
      console.log('üìé –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª:', file.originalname, file.mimetype);
      const filePart = fileToGenerativePart(file.path, file.mimetype);
      parts.push(filePart);
    }

    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏ —Å fallback (–Ω–∞—á–∏–Ω–∞—è —Å Gemini 2.5 Pro)
    const models = [
      'gemini-2.5-pro',           // –ü–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è 2.5 Pro
      'gemini-1.5-pro-latest',    // –°—Ç–∞–±–∏–ª—å–Ω–∞—è 1.5 Pro (–ø–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è)
      'gemini-1.5-pro',           // –°—Ç–∞–±–∏–ª—å–Ω–∞—è 1.5 Pro
      'gemini-1.5-flash',         // –ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å
      'gemini-pro'                // –°—Ç–∞—Ä–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–∞—è
    ];
    
    let result;
    let lastError;
    
    for (const modelName of models) {
      try {
        console.log(`ü§ñ –ü—Ä–æ–±—É–µ–º –º–æ–¥–µ–ª—å ${modelName}...`);
        const model = genAI.getGenerativeModel({ model: modelName });
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è, —Å–æ–∑–¥–∞–µ–º —á–∞—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        if (history && history !== '[]') {
          const parsedHistory = JSON.parse(history);
          const chat = model.startChat({
            history: parsedHistory.map(msg => ({
              role: msg.role === 'user' ? 'user' : 'model',
              parts: [{ text: msg.content }]
            }))
          });
          
          result = await chat.sendMessage(parts);
        } else {
          // –ë–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏ - –ø—Ä–æ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
          result = await model.generateContent(parts);
        }
        
        const response = await result.response;
        const text = response.text();

        console.log(`‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç ${modelName}, –¥–ª–∏–Ω–∞:`, text.length);

        return res.json({
          success: true,
          response: text,
          model: modelName
        });
        
      } catch (modelError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å ${modelName}:`, modelError.message);
        lastError = modelError;
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–µ–π –º–æ–¥–µ–ª—å—é
      }
    }
    
    // –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞
    throw lastError || new Error('–í—Å–µ –º–æ–¥–µ–ª–∏ Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ:', error);
    res.status(500).json({
      success: false,
      error: error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞'
    });
  } finally {
    // –£–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    for (const filePath of uploadedFiles) {
      try {
        unlinkSync(filePath);
        console.log('üóëÔ∏è –§–∞–π–ª —É–¥–∞–ª–µ–Ω:', filePath);
      } catch (err) {
        console.error('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª:', filePath, err);
      }
    }
  }
});

export default router;


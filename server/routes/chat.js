import express from 'express';
import multer from 'multer';
import { GoogleGenerativeAI } from '@google/generative-ai';
import { readFileSync, unlinkSync, mkdirSync } from 'fs';
import { tmpdir } from 'os';
import path from 'path';

const router = express.Router();

// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫
const uploadDir = path.join(tmpdir(), 'chat-uploads');
try {
  mkdirSync(uploadDir, { recursive: true });
} catch (err) {
  console.log('–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∞:', uploadDir);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, uploadDir); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–∏—Å—Ç–µ–º—ã
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));
  }
});

const upload = multer({
  storage: storage,
  limits: {
    fileSize: 20 * 1024 * 1024 // 20MB –ª–∏–º–∏—Ç (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏–º–∏—Ç—É inline data –≤ Gemini API)
  },
  fileFilter: (req, file, cb) => {
    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp', 'application/pdf'];
    if (allowedTypes.includes(file.mimetype)) {
      cb(null, true);
    } else {
      cb(new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPEG, PNG, GIF, WEBP) –∏ PDF.'));
    }
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç Gemini (inline data)
// –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –¢–µ–∫—É—â–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç inline data (base64) —Å –ª–∏–º–∏—Ç–æ–º ~20MB
// –î–ª—è —Ñ–∞–π–ª–æ–≤ –±–æ–ª—å—à–µ 20MB –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å File API (–¥–æ 2GB), –Ω–æ —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç
// –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å uploadFile() –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ñ–∞–π–ª–∞–º–∏
function fileToGenerativePart(filePath, mimeType) {
  return {
    inlineData: {
      data: readFileSync(filePath).toString('base64'),
      mimeType
    }
  };
}

// –†–æ—É—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
router.post('/message', upload.array('files', 10), async (req, res) => {
  const uploadedFiles = [];
  const requestId = Date.now() + '-' + Math.random().toString(36).substr(2, 9);
  
  console.log(`\nüÜï [${requestId}] –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∫ —á–∞—Ç—É`);
  
  try {
    const { message, history } = req.body;
    const files = req.files || [];
    
    console.log(`üí¨ [${requestId}] –ó–∞–ø—Ä–æ—Å –∫ —á–∞—Ç—É:`, {
      message: message?.substring(0, 50),
      filesCount: files.length,
      hasHistory: !!history,
      historyLength: history ? (history === '[]' ? 0 : JSON.parse(history).length) : 0
    });

    if (!message && files.length === 0) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª'
      });
    }

    const apiKey = process.env.GEMINI_API_KEY;
    if (!apiKey) {
      throw new Error('GEMINI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Google AI
    const genAI = new GoogleGenerativeAI(apiKey);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    uploadedFiles.push(...files.map(f => f.path));

    // –§–æ—Ä–º–∏—Ä—É–µ–º —á–∞—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
    const parts = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è markdown
    const systemPrompt = "–¢—ã - –ø–æ–ª–µ–∑–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –ø—Ä–æ—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è markdown —Ä–∞–∑–º–µ—Ç–∫–∏ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–∏–º–≤–æ–ª—ã #, *, **, - –¥–ª—è —Å–ø–∏—Å–∫–æ–≤ –∏ —Ç.–¥.). –ü–∏—à–∏ –æ—Ç–≤–µ—Ç—ã –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç.";
    parts.push({ text: systemPrompt });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (message) {
      parts.push({ text: message });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
    for (const file of files) {
      console.log(`üìé [${requestId}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª:`, {
        name: file.originalname,
        type: file.mimetype,
        size: `${(file.size / 1024 / 1024).toFixed(2)} MB`
      });
      
      try {
        const filePart = fileToGenerativePart(file.path, file.mimetype);
        parts.push(filePart);
        console.log(`‚úÖ [${requestId}] –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ base64`);
      } catch (fileError) {
        console.error(`‚ùå [${requestId}] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:`, fileError);
        throw new Error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ ${file.originalname}: ${fileError.message}`);
      }
    }

    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏ —Å fallback (–Ω–∞—á–∏–Ω–∞—è —Å Gemini 2.5 Pro)
    // –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ API v1
    const models = [
      'gemini-2.5-pro',           // –ü–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è 2.5 Pro
      'gemini-2.0-flash-exp',     // –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è 2.0
      'gemini-1.5-flash',         // –°—Ç–∞–±–∏–ª—å–Ω–∞—è –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å
      'gemini-1.5-flash-8b'       // –õ–µ–≥–∫–∞—è –º–æ–¥–µ–ª—å
    ];
    
    let result;
    let lastError;
    
    for (const modelName of models) {
      try {
        console.log(`ü§ñ [${requestId}] –ü—Ä–æ–±—É–µ–º –º–æ–¥–µ–ª—å ${modelName}...`);
        console.log(`üìä [${requestId}] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π –≤ –∑–∞–ø—Ä–æ—Å–µ: ${parts.length} (—Ç–µ–∫—Å—Ç: ${parts.filter(p => p.text).length}, —Ñ–∞–π–ª—ã: ${parts.filter(p => p.inlineData).length})`);
        
        const model = genAI.getGenerativeModel({ 
          model: modelName,
          generationConfig: {
            maxOutputTokens: 8192, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
          }
        });
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è, —Å–æ–∑–¥–∞–µ–º —á–∞—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        if (history && history !== '[]' && history !== '') {
          let parsedHistory;
          try {
            parsedHistory = JSON.parse(history);
          } catch (parseError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏—Å—Ç–æ—Ä–∏–∏:', parseError);
            // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—ë
            parsedHistory = [];
          }
          
          if (parsedHistory.length > 0) {
            console.log('üîÑ –°–æ–∑–¥–∞–µ–º —á–∞—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏');
            const chat = model.startChat({
              history: parsedHistory.map(msg => ({
                role: msg.role === 'user' ? 'user' : 'model',
                parts: [{ text: msg.content }]
              }))
            });
            
            console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º...');
            const startTime = Date.now();
            result = await chat.sendMessage(parts);
            const elapsed = Date.now() - startTime;
            console.log(`‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ Gemini —Å –∏—Å—Ç–æ—Ä–∏–µ–π: ${(elapsed / 1000).toFixed(2)}—Å`);
          } else {
            // –ï—Å–ª–∏ –∏—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞—è, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
            console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –±–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏...');
            const startTime = Date.now();
            result = await model.generateContent(parts);
            const elapsed = Date.now() - startTime;
            console.log(`‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ Gemini: ${(elapsed / 1000).toFixed(2)}—Å`);
          }
        } else {
          // –ë–µ–∑ –∏—Å—Ç–æ—Ä–∏–∏ - –ø—Ä–æ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
          console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini API...');
          const startTime = Date.now();
          result = await model.generateContent(parts);
          const elapsed = Date.now() - startTime;
          console.log(`‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ Gemini: ${(elapsed / 1000).toFixed(2)}—Å`);
        }
        
        console.log('üì¶ –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç...');
        const response = await result.response;
        console.log('üìù –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç...');
        const text = response.text();

        console.log(`‚úÖ [${requestId}] –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –æ—Ç ${modelName}, –¥–ª–∏–Ω–∞:`, text.length, '—Å–∏–º–≤–æ–ª–æ–≤');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç
        if (res.headersSent) {
          console.error(`‚ö†Ô∏è [${requestId}] –ó–∞–≥–æ–ª–æ–≤–∫–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç–≤–µ—Ç–∞.`);
          return;
        }

        // –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        res.setHeader('Content-Type', 'application/json; charset=utf-8');
        res.status(200).json({
          success: true,
          response: text,
          model: modelName
        });
        
        console.log(`üì§ [${requestId}] JSON –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É —É—Å–ø–µ—à–Ω–æ`);
        return; // –Ø–≤–Ω—ã–π return —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        
      } catch (modelError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å ${modelName}:`, {
          message: modelError.message,
          status: modelError.status,
          statusText: modelError.statusText
        });
        lastError = modelError;
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ —Å–ª–µ–¥—É—é—â–µ–π –º–æ–¥–µ–ª—å—é
      }
    }
    
    // –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞
    throw lastError || new Error('–í—Å–µ –º–æ–¥–µ–ª–∏ Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ:', error);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ –æ—Ç–≤–µ—Ç
    if (!res.headersSent) {
      return res.status(500).json({
        success: false,
        error: error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞'
      });
    }
  } finally {
    // –£–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    for (const filePath of uploadedFiles) {
      try {
        unlinkSync(filePath);
        console.log('üóëÔ∏è –§–∞–π–ª —É–¥–∞–ª–µ–Ω:', filePath);
      } catch (err) {
        console.error('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª:', filePath, err);
      }
    }
  }
});

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ multer
router.use((error, req, res, next) => {
  if (error instanceof multer.MulterError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
    return res.status(400).json({
      success: false,
      error: `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${error.message}`
    });
  } else if (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
    return res.status(500).json({
      success: false,
      error: error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞'
    });
  }
  next();
});

export default router;


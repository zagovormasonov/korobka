import express from 'express';
import { supabase } from '../index.js';

const router = express.Router();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
if (!global.generationInProgress) {
  global.generationInProgress = new Set();
}

// –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
router.post('/start', async (req, res) => {
  try {
    console.log('üöÄ [BACKGROUND-GENERATION] –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤');
    const { sessionId } = req.body;
    
    if (!sessionId) {
      console.error('‚ùå [BACKGROUND-GENERATION] SessionId –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω');
      return res.status(400).json({ success: false, error: 'SessionId is required' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —É–∂–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    const { data: existingData, error: fetchError } = await supabase
      .from('primary_test_results')
      .select('documents_generation_started, documents_generation_completed')
      .eq('session_id', sessionId)
      .single();

    if (fetchError) {
      console.error('‚ùå [BACKGROUND-GENERATION] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', fetchError);
      return res.status(500).json({ success: false, error: 'Failed to fetch session data' });
    }

    if (existingData.documents_generation_started) {
      console.log('‚ö†Ô∏è [BACKGROUND-GENERATION] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è sessionId:', sessionId);
      
      // –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –µ—ë —Å–Ω–æ–≤–∞
      if (!existingData.documents_generation_completed) {
        console.log('üîÑ [BACKGROUND-GENERATION] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...');
        generateDocumentsInBackground(sessionId).catch(error => {
          console.error('‚ùå [BACKGROUND-GENERATION] –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
        });
      }
      
      return res.json({ 
        success: true, 
        message: 'Generation already started',
        status: existingData.documents_generation_completed ? 'completed' : 'in_progress'
      });
    }

    // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å
    const { error: updateError } = await supabase
      .from('primary_test_results')
      .update({ 
        documents_generation_started: true,
        documents_generation_started_at: new Date().toISOString()
      })
      .eq('session_id', sessionId);

    if (updateError) {
      console.error('‚ùå [BACKGROUND-GENERATION] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', updateError);
      return res.status(500).json({ success: false, error: 'Failed to update generation status' });
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é (–Ω–µ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)
    console.log('üöÄ [BACKGROUND-GENERATION] –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é generateDocumentsInBackground...');
    console.log('üöÄ [BACKGROUND-GENERATION] SessionId –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', sessionId);
    generateDocumentsInBackground(sessionId).catch(error => {
      console.error('‚ùå [BACKGROUND-GENERATION] –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
    });

    console.log('‚úÖ [BACKGROUND-GENERATION] –§–æ–Ω–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è sessionId:', sessionId);
    res.json({ 
      success: true, 
      message: 'Background generation started',
      status: 'started'
    });

  } catch (error) {
    console.error('‚ùå [BACKGROUND-GENERATION] –û—à–∏–±–∫–∞:', error);
    res.status(500).json({ success: false, error: 'Internal server error' });
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
router.get('/status/:sessionId', async (req, res) => {
  try {
    const { sessionId } = req.params;
    
    if (!sessionId) {
      return res.status(400).json({ success: false, error: 'SessionId is required' });
    }

    const { data, error } = await supabase
      .from('primary_test_results')
      .select(`
        documents_generation_started,
        documents_generation_completed,
        personal_plan_generated,
        session_preparation_generated,
        psychologist_pdf_generated,
        documents_generation_started_at,
        documents_generation_completed_at
      `)
      .eq('session_id', sessionId)
      .single();

    if (error) {
      console.error('‚ùå [BACKGROUND-GENERATION-STATUS] –û—à–∏–±–∫–∞:', error);
      return res.status(500).json({ success: false, error: 'Failed to fetch status' });
    }

    if (!data) {
      return res.status(404).json({ success: false, error: 'Session not found' });
    }

    // –ï—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞, –Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –µ—ë
    // –ù–û —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ —É–∂–µ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
    if (data.documents_generation_started && !data.documents_generation_completed) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —É–∂–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
      if (!global.generationInProgress || !global.generationInProgress.has(sessionId)) {
        console.log('üîÑ [BACKGROUND-GENERATION-STATUS] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑ —Å—Ç–∞—Ç—É—Å–∞...');
        generateDocumentsInBackground(sessionId).catch(error => {
          console.error('‚ùå [BACKGROUND-GENERATION-STATUS] –û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
        });
      } else {
        console.log('‚è≥ [BACKGROUND-GENERATION-STATUS] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥–ª—è sessionId:', sessionId);
      }
    }

    res.json({
      success: true,
      status: data.documents_generation_completed ? 'completed' : 
              data.documents_generation_started ? 'in_progress' : 'not_started',
      documents: {
        personal_plan: data.personal_plan_generated,
        session_preparation: data.session_preparation_generated,
        psychologist_pdf: data.psychologist_pdf_generated
      },
      timestamps: {
        started_at: data.documents_generation_started_at,
        completed_at: data.documents_generation_completed_at
      }
    });

  } catch (error) {
    console.error('‚ùå [BACKGROUND-GENERATION-STATUS] –û—à–∏–±–∫–∞:', error);
    res.status(500).json({ success: false, error: 'Internal server error' });
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
async function generateDocumentsInBackground(sessionId) {
  try {
    // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞
    global.generationInProgress.add(sessionId);
    
    console.log('üîÑ [BACKGROUND-GENERATION] ===== –§–£–ù–ö–¶–ò–Ø generateDocumentsInBackground –ó–ê–ü–£–©–ï–ù–ê =====');
    console.log('üîÑ [BACKGROUND-GENERATION] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è sessionId:', sessionId);
    console.log('‚è∞ [BACKGROUND-GENERATION] –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:', new Date().toISOString());
    console.log('üîÑ [BACKGROUND-GENERATION] Process ID:', process.pid);
    console.log('üîÑ [BACKGROUND-GENERATION] Memory usage:', process.memoryUsage());
    console.log('üîÑ [BACKGROUND-GENERATION] Node version:', process.version);
    console.log('üîÑ [BACKGROUND-GENERATION] Platform:', process.platform);
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π URL –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    const baseUrl = process.env.NODE_ENV === 'production' 
      ? 'https://idenself.com' 
      : `http://127.0.0.1:${process.env.PORT || 5000}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞ –ª–∏ —É–∂–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    console.log('üîç [BACKGROUND-GENERATION] –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –¥–ª—è sessionId:', sessionId);
    const { data: existingData, error: fetchError } = await supabase
      .from('primary_test_results')
      .select('documents_generation_started, documents_generation_completed, personal_plan_generated, session_preparation_generated, psychologist_pdf_generated')
      .eq('session_id', sessionId)
      .single();
    
    console.log('üìä [BACKGROUND-GENERATION] –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î:', {
      hasData: !!existingData,
      hasError: !!fetchError,
      errorMessage: fetchError?.message
    });

    if (fetchError) {
      console.error('‚ùå [BACKGROUND-GENERATION] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', fetchError);
      return;
    }

    console.log('üìä [BACKGROUND-GENERATION] –î–∞–Ω–Ω—ã–µ –∏–∑ –ë–î:', {
      documents_generation_started: existingData.documents_generation_started,
      documents_generation_completed: existingData.documents_generation_completed,
      personal_plan_generated: existingData.personal_plan_generated,
      session_preparation_generated: existingData.session_preparation_generated,
      psychologist_pdf_generated: existingData.psychologist_pdf_generated
    });

    if (existingData.documents_generation_completed) {
      console.log('‚ö†Ô∏è [BACKGROUND-GENERATION] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è sessionId:', sessionId);
      return;
    }

    if (existingData.documents_generation_started && !existingData.documents_generation_completed) {
      console.log('‚ö†Ô∏è [BACKGROUND-GENERATION] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è sessionId:', sessionId);
      console.log('üîÑ [BACKGROUND-GENERATION] –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å —Ç–æ–≥–æ –º–µ—Å—Ç–∞, –≥–¥–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å...');
      // –ù–ï –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    }
    
    // 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω (–µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω)
    if (!existingData.personal_plan_generated) {
      console.log('üìù [BACKGROUND-GENERATION] === –≠–¢–ê–ü 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ ===');
      console.log('üìù [BACKGROUND-GENERATION] –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω...');
      console.log('üîó [BACKGROUND-GENERATION] URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:', `${baseUrl}/api/ai/personal-plan`);
      console.log('üì§ [BACKGROUND-GENERATION] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å sessionId:', sessionId);
      console.log('‚è∞ [BACKGROUND-GENERATION] –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —ç—Ç–∞–ø–∞ 1:', new Date().toISOString());
      console.log('üåê [BACKGROUND-GENERATION] –í—ã–ø–æ–ª–Ω—è–µ–º fetch –∑–∞–ø—Ä–æ—Å –∫:', `${baseUrl}/api/ai/personal-plan`);
      try {
        const planResponse = await fetch(`${baseUrl}/api/pdf/personal-plan`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ sessionId }),
          signal: AbortSignal.timeout(300000), // 5 –º–∏–Ω—É—Ç timeout
        });

        console.log('üì• [BACKGROUND-GENERATION] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI API:', planResponse.status, planResponse.statusText);
        console.log('‚è∞ [BACKGROUND-GENERATION] –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞:', new Date().toISOString());
        
        if (planResponse.ok) {
          // PDF endpoint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç PDF blob, –Ω–æ –Ω–∞–º –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –ø–ª–∞–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω
          const { error: updateError } = await supabase
            .from('primary_test_results')
            .update({ personal_plan_generated: true })
            .eq('session_id', sessionId);
          
          if (updateError) {
            console.error('‚ùå [BACKGROUND-GENERATION] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î:', updateError);
          } else {
            console.log('‚úÖ [BACKGROUND-GENERATION] –ë–î –æ–±–Ω–æ–≤–ª–µ–Ω–∞: personal_plan_generated = true');
          }
          console.log('‚úÖ [BACKGROUND-GENERATION] –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
          console.log('‚è∞ [BACKGROUND-GENERATION] –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–∞–ø–∞ 1:', new Date().toISOString());
          console.log('üîÑ [BACKGROUND-GENERATION] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç—Ç–∞–ø—É 2...');
        } else {
          const errorText = await planResponse.text();
          console.error('‚ùå [BACKGROUND-GENERATION] HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞:', planResponse.status, errorText);
          return;
        }
      } catch (error) {
        console.error('‚ùå [BACKGROUND-GENERATION] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞:', error);
        return;
      }
    } else {
      console.log('‚úÖ [BACKGROUND-GENERATION] –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
    }

    // 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ —Å–µ–∞–Ω—Å—É (–Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞)
    if (!existingData.session_preparation_generated) {
      console.log('üìã [BACKGROUND-GENERATION] === –≠–¢–ê–ü 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–µ–∞–Ω—Å—É ===');
      console.log('üìã [BACKGROUND-GENERATION] –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ —Å–µ–∞–Ω—Å—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞...');
      console.log('‚è∞ [BACKGROUND-GENERATION] –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —ç—Ç–∞–ø–∞ 2:', new Date().toISOString());
      try {
        const sessionResponse = await fetch(`${baseUrl}/api/pdf/session-preparation`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ sessionId, specialistType: 'psychologist' }),
          signal: AbortSignal.timeout(300000), // 5 –º–∏–Ω—É—Ç timeout
        });

        if (sessionResponse.ok) {
          // PDF endpoint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç PDF blob, –Ω–æ –Ω–∞–º –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞
          const { error: updateError } = await supabase
            .from('primary_test_results')
            .update({ session_preparation_generated: true })
            .eq('session_id', sessionId);
          
          if (updateError) {
            console.error('‚ùå [BACKGROUND-GENERATION] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î:', updateError);
          } else {
            console.log('‚úÖ [BACKGROUND-GENERATION] –ë–î –æ–±–Ω–æ–≤–ª–µ–Ω–∞: session_preparation_generated = true');
          }
          console.log('‚úÖ [BACKGROUND-GENERATION] –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–µ–∞–Ω—Å—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞');
          console.log('‚è∞ [BACKGROUND-GENERATION] –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–∞–ø–∞ 2:', new Date().toISOString());
          console.log('üîÑ [BACKGROUND-GENERATION] –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç—Ç–∞–ø—É 3...');
        } else {
          const errorText = await sessionResponse.text();
          console.error('‚ùå [BACKGROUND-GENERATION] HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–µ–∞–Ω—Å—É:', sessionResponse.status, errorText);
          return;
        }
      } catch (error) {
        console.error('‚ùå [BACKGROUND-GENERATION] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–µ–∞–Ω—Å—É:', error);
        return;
      }
    } else {
      console.log('‚úÖ [BACKGROUND-GENERATION] –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–µ–∞–Ω—Å—É —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞');
    }

    // 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞ (–Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–µ–∞–Ω—Å—É)
    if (!existingData.psychologist_pdf_generated) {
      console.log('üìÑ [BACKGROUND-GENERATION] === –≠–¢–ê–ü 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞ ===');
      console.log('üìÑ [BACKGROUND-GENERATION] –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–µ–∞–Ω—Å—É...');
      console.log('‚è∞ [BACKGROUND-GENERATION] –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —ç—Ç–∞–ø–∞ 3:', new Date().toISOString());
      try {
        const pdfResponse = await fetch(`${baseUrl}/api/pdf/psychologist-pdf`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ sessionId }),
          signal: AbortSignal.timeout(300000), // 5 –º–∏–Ω—É—Ç timeout
        });

        console.log('üì• [BACKGROUND-GENERATION] –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç psychologist API:', pdfResponse.status, pdfResponse.statusText);
        
        if (pdfResponse.ok) {
          // PDF endpoint –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç PDF blob, –Ω–æ –Ω–∞–º –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã
          const { error: updateError } = await supabase
            .from('primary_test_results')
            .update({ psychologist_pdf_generated: true })
            .eq('session_id', sessionId);
          
          if (updateError) {
            console.error('‚ùå [BACKGROUND-GENERATION] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î:', updateError);
          } else {
            console.log('‚úÖ [BACKGROUND-GENERATION] –ë–î –æ–±–Ω–æ–≤–ª–µ–Ω–∞: psychologist_pdf_generated = true');
          }
          console.log('‚úÖ [BACKGROUND-GENERATION] –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã');
          console.log('‚è∞ [BACKGROUND-GENERATION] –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–∞–ø–∞ 3:', new Date().toISOString());
        } else {
          const errorText = await pdfResponse.text();
          console.error('‚ùå [BACKGROUND-GENERATION] HTTP –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞:', pdfResponse.status, errorText);
          return;
        }
      } catch (error) {
        console.error('‚ùå [BACKGROUND-GENERATION] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞:', error);
        return;
      }
    } else {
      console.log('‚úÖ [BACKGROUND-GENERATION] –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞ —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã');
    }

    // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    await supabase
      .from('primary_test_results')
      .update({ 
        documents_generation_completed: true,
        documents_generation_completed_at: new Date().toISOString()
      })
      .eq('session_id', sessionId);

    console.log('üéâ [BACKGROUND-GENERATION] –í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è sessionId:', sessionId);

  } catch (error) {
    console.error('‚ùå [BACKGROUND-GENERATION] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', error);
    console.error('‚ùå [BACKGROUND-GENERATION] Stack trace:', error.stack);
    console.error('‚ùå [BACKGROUND-GENERATION] SessionId:', sessionId);
    console.error('‚ùå [BACKGROUND-GENERATION] Error name:', error.name);
    console.error('‚ùå [BACKGROUND-GENERATION] Error message:', error.message);
    
    // –û—Ç–º–µ—á–∞–µ–º –æ—à–∏–±–∫—É –≤ –ë–î
    try {
      await supabase
        .from('primary_test_results')
        .update({ 
          documents_generation_completed: false,
          documents_generation_completed_at: new Date().toISOString()
        })
        .eq('session_id', sessionId);
      console.log('‚úÖ [BACKGROUND-GENERATION] –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ë–î');
    } catch (dbError) {
      console.error('‚ùå [BACKGROUND-GENERATION] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –æ—à–∏–±–∫–∏ –≤ –ë–î:', dbError);
    }
  } finally {
    // –£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
    global.generationInProgress.delete(sessionId);
    console.log('‚úÖ [BACKGROUND-GENERATION] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è sessionId:', sessionId);
  }
}

// –°–∫–∞—á–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω
router.get('/download/personal-plan/:sessionId', async (req, res) => {
  try {
    const { sessionId } = req.params;
    
    if (!sessionId) {
      return res.status(400).json({ success: false, error: 'SessionId is required' });
    }

    // –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –∏–∑ –ë–î
    const { data, error } = await supabase
      .from('primary_test_results')
      .select('personal_plan')
      .eq('session_id', sessionId)
      .single();

    if (error || !data) {
      return res.status(404).json({ success: false, error: 'Personal plan not found' });
    }

    if (!data.personal_plan) {
      return res.status(404).json({ success: false, error: 'Personal plan not generated yet' });
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º HTML —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –ø–ª–∞–Ω–æ–º
    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <title>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
          .header { text-align: center; margin-bottom: 30px; }
          .content { white-space: pre-wrap; }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω</h1>
          <p>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date().toLocaleDateString('ru-RU')}</p>
        </div>
        <div class="content">${data.personal_plan}</div>
      </body>
      </html>
    `;

    res.setHeader('Content-Type', 'text/html; charset=utf-8');
    res.send(html);

  } catch (error) {
    console.error('‚ùå [DOWNLOAD-PERSONAL-PLAN] –û—à–∏–±–∫–∞:', error);
    res.status(500).json({ success: false, error: error.message });
  }
});

// –°–∫–∞—á–∞—Ç—å –≥–æ—Ç–æ–≤—É—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ —Å–µ–∞–Ω—Å—É
router.get('/download/session-preparation/:sessionId', async (req, res) => {
  try {
    const { sessionId } = req.params;
    
    if (!sessionId) {
      return res.status(400).json({ success: false, error: 'SessionId is required' });
    }

    // –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—É—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –∫ —Å–µ–∞–Ω—Å—É –∏–∑ –ë–î
    const { data, error } = await supabase
      .from('primary_test_results')
      .select('session_preparation_content')
      .eq('session_id', sessionId)
      .single();

    if (error || !data) {
      return res.status(404).json({ success: false, error: 'Session preparation not found' });
    }

    if (!data.session_preparation_content) {
      return res.status(404).json({ success: false, error: 'Session preparation not generated yet' });
    }

    res.setHeader('Content-Type', 'text/html; charset=utf-8');
    res.send(data.session_preparation_content);

  } catch (error) {
    console.error('‚ùå [DOWNLOAD-SESSION-PREPARATION] –û—à–∏–±–∫–∞:', error);
    res.status(500).json({ success: false, error: error.message });
  }
});

// –°–∫–∞—á–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π PDF –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞
router.get('/download/psychologist-pdf/:sessionId', async (req, res) => {
  try {
    const { sessionId } = req.params;
    
    if (!sessionId) {
      return res.status(400).json({ success: false, error: 'SessionId is required' });
    }

    // –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã–π PDF –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –∏–∑ –ë–î
    const { data, error } = await supabase
      .from('primary_test_results')
      .select('psychologist_pdf_content')
      .eq('session_id', sessionId)
      .single();

    if (error || !data) {
      return res.status(404).json({ success: false, error: 'Psychologist PDF not found' });
    }

    if (!data.psychologist_pdf_content) {
      return res.status(404).json({ success: false, error: 'Psychologist PDF not generated yet' });
    }

    res.setHeader('Content-Type', 'text/html; charset=utf-8');
    res.send(data.psychologist_pdf_content);

  } catch (error) {
    console.error('‚ùå [DOWNLOAD-PSYCHOLOGIST-PDF] –û—à–∏–±–∫–∞:', error);
    res.status(500).json({ success: false, error: error.message });
  }
});

export default router;

import express from 'express';
import { supabase } from '../index.js';
import htmlPdf from 'html-pdf-node';

const router = express.Router();

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫–ª—é—á–µ–Ω–∞ –ª–∏ PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
const isPdfDisabled = process.env.DISABLE_PDF === 'true';

// PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º HTML —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è markdown –≤ HTML
function formatPlanContent(text) {
  if (!text) {
    console.log('‚ö†Ô∏è [FORMAT PLAN] –ü—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω');
    return '<p class="plan-paragraph">–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω</p>';
  }
  
  console.log('üìù [FORMAT PLAN] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–æ–π:', text.length);
  console.log('üìù [FORMAT PLAN] –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤:', text.substring(0, 200));
  
  // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  let lines = text.split('\n');
  let html = '';
  let inList = false;
  
  for (let i = 0; i < lines.length; i++) {
    let line = lines[i].trim();
    
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    if (line === '') {
      if (inList) {
        html += '</ul>\n';
        inList = false;
      }
      continue;
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    if (line.match(/^#{1,6}\s/)) {
      if (inList) {
        html += '</ul>\n';
        inList = false;
      }
      
      const level = line.match(/^#+/)[0].length;
      const title = line.replace(/^#+\s*/, '').replace(/\*+/g, '');
      
      if (level === 1) {
        html += `<h1 class="main-title">${title}</h1>\n`;
      } else if (level === 2) {
        html += `<h2 class="section-title">${title}</h2>\n`;
      } else if (level === 3) {
        html += `<h3 class="subsection-title">${title}</h3>\n`;
      } else {
        html += `<h4 class="minor-title">${title}</h4>\n`;
      }
      continue;
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–∏—Å–∫–∏
    if (line.match(/^[\-\*\+]\s/) || line.match(/^\d+\.\s/)) {
      if (!inList) {
        html += '<ul class="plan-list">\n';
        inList = true;
      }
      
      const content = line.replace(/^[\-\*\+\d\.]\s*/, '').replace(/\*+/g, '');
      html += `<li>${content}</li>\n`;
      continue;
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –æ–Ω –±—ã–ª –æ—Ç–∫—Ä—ã—Ç
    if (inList) {
      html += '</ul>\n';
      inList = false;
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã
    if (line.length > 0) {
      // –£–±–∏—Ä–∞–µ–º markdown —Å–∏–º–≤–æ–ª—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
      const cleanLine = line
        .replace(/\*{2,}(.*?)\*{2,}/g, '<strong>$1</strong>') // –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
        .replace(/\*(.*?)\*/g, '<em>$1</em>') // –ö—É—Ä—Å–∏–≤
        .replace(/`(.*?)`/g, '<code>$1</code>') // –ö–æ–¥
        .replace(/_{2,}(.*?)_{2,}/g, '<strong>$1</strong>') // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∂–∏—Ä–Ω—ã–π
        .replace(/_(.*?)_/g, '<em>$1</em>'); // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∫—É—Ä—Å–∏–≤
      
      html += `<p class="plan-paragraph">${cleanLine}</p>\n`;
    }
  }
  
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –æ–Ω –æ—Å—Ç–∞–ª—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º
  if (inList) {
    html += '</ul>\n';
  }
  
  console.log('‚úÖ [FORMAT PLAN] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HTML –¥–ª–∏–Ω–æ–π:', html.length);
  console.log('‚úÖ [FORMAT PLAN] –ü–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤ HTML:', html.substring(0, 300));
  
  return html;
}

// –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω (—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ session-preparation)
router.post('/personal-plan', async (req, res) => {
  try {
    console.log('üéØ [PDF-PERSONAL-PLAN] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞');
    
    if (isPdfDisabled) {
      console.log('‚ö†Ô∏è [PDF-PERSONAL-PLAN] PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞');
      return res.status(503).json({ 
        success: false, 
        error: 'PDF generation is disabled. Please contact support.' 
      });
    }

    const { sessionId } = req.body;
    console.log('üéØ [PDF-PERSONAL-PLAN] SessionId:', sessionId);
    
    if (!sessionId) {
      console.error('‚ùå [PDF-PERSONAL-PLAN] SessionId –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω');
      return res.status(400).json({ success: false, error: 'SessionId is required' });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –æ—Ç Gemini AI
    const baseUrl = process.env.BACKEND_URL || `http://127.0.0.1:${process.env.PORT || 5000}`;
    console.log('üîó [PDF-PERSONAL-PLAN] –í—ã–∑—ã–≤–∞–µ–º AI API:', `${baseUrl}/api/ai/personal-plan`);
    
    const planResponse = await fetch(`${baseUrl}/api/ai/personal-plan`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ sessionId }),
    });

    console.log('üì• [PDF-PERSONAL-PLAN] –û—Ç–≤–µ—Ç –æ—Ç AI API:', planResponse.status, planResponse.statusText);

    if (!planResponse.ok) {
      const errorText = await planResponse.text();
      console.error('‚ùå [PDF-PERSONAL-PLAN] –û—à–∏–±–∫–∞ –æ—Ç AI API:', errorText);
      return res.status(500).json({ success: false, error: 'Failed to generate plan' });
    }

    const planData = await planResponse.json();
    console.log('üìä [PDF-PERSONAL-PLAN] –î–∞–Ω–Ω—ã–µ –æ—Ç AI API:', {
      success: planData.success,
      hasPlan: !!planData.plan,
      planLength: planData.plan?.length || 0,
      cached: planData.cached
    });
    
    if (!planData.success) {
      console.error('‚ùå [PDF-PERSONAL-PLAN] AI API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É');
      return res.status(500).json({ success: false, error: 'Failed to generate plan' });
    }

    const plan = planData.plan;
    console.log('‚úÖ [PDF-PERSONAL-PLAN] –ü–ª–∞–Ω –ø–æ–ª—É—á–µ–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML...');

    // HTML —à–∞–±–ª–æ–Ω - –¢–û–ß–ù–ê–Ø –∫–æ–ø–∏—è –∏–∑ session-preparation
    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <title>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω</title>
        <style>
          * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
          }
          
          body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.7;
            color: #2c3e50;
            background: #f8f9fa;
            padding: 20px;
          }
          
          .content {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            overflow: hidden;
          }
          
          .header {
            background: linear-gradient(135deg, #00695c 0%, #4db6ac 100%);
            color: white;
            padding: 40px 30px;
            text-align: center;
          }
          
          .header h1 {
            font-size: 24px;
            font-weight: 400;
            margin-bottom: 10px;
            letter-spacing: 0.5px;
          }
          
          .header p {
            font-size: 16px;
            opacity: 0.9;
            margin-bottom: 25px;
          }
          
          .print-button {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: 2px solid rgba(255, 255, 255, 0.3);
            padding: 10px 25px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s ease;
          }
          
          .print-button:hover {
            background: rgba(255, 255, 255, 0.3);
            border-color: rgba(255, 255, 255, 0.5);
          }
          
          .preparation-content {
            padding: 40px;
            font-size: 16px;
            line-height: 1.8;
          }
          
          /* –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ —Å—Ç–∏–ª–∏ —á—Ç–æ –∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ */
          .preparation-content .main-title {
            font-size: 28px;
            color: #00695c;
            font-weight: 600;
            margin: 40px 0 25px 0;
            padding-bottom: 15px;
            border-bottom: 3px solid #00695c;
            text-align: center;
          }
          
          .preparation-content .main-title:first-child {
            margin-top: 0;
          }
          
          .preparation-content .section-title {
            font-size: 22px;
            color: #2c3e50;
            font-weight: 600;
            margin: 35px 0 20px 0;
            padding-left: 15px;
            border-left: 4px solid #4db6ac;
            background: linear-gradient(90deg, #f8f9fa 0%, transparent 100%);
            padding: 15px 0 15px 15px;
          }
          
          .preparation-content .subsection-title {
            font-size: 19px;
            color: #34495e;
            font-weight: 600;
            margin: 25px 0 15px 0;
            padding-left: 10px;
            border-left: 3px solid #81c784;
          }
          
          .preparation-content .minor-title {
            font-size: 17px;
            color: #5d6d7e;
            font-weight: 500;
            margin: 20px 0 10px 0;
            padding-left: 8px;
            border-left: 2px solid #a5d6a7;
          }
          
          .preparation-content .plan-paragraph {
            margin-bottom: 18px;
            text-align: justify;
            color: #34495e;
            line-height: 1.7;
          }
          
          .preparation-content .plan-paragraph strong {
            color: #2c3e50;
            font-weight: 600;
          }
          
          .preparation-content .plan-paragraph em {
            color: #5d6d7e;
            font-style: italic;
          }
          
          .preparation-content .plan-paragraph code {
            background: #f8f9fa;
            padding: 2px 6px;
            border-radius: 4px;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            color: #e74c3c;
          }
          
          .preparation-content .plan-list {
            margin: 20px 0;
            padding-left: 0;
            list-style: none;
          }
          
          .preparation-content .plan-list li {
            margin-bottom: 12px;
            padding-left: 25px;
            position: relative;
            color: #34495e;
            line-height: 1.6;
          }
          
          .preparation-content .plan-list li:before {
            content: "‚Üí";
            position: absolute;
            left: 0;
            color: #00695c;
            font-weight: bold;
            font-size: 16px;
          }
          
          .preparation-content .plan-list li strong {
            color: #2c3e50;
            font-weight: 600;
          }
          
          .footer {
            background: #f8f9fa;
            padding: 30px;
            text-align: center;
            border-top: 1px solid #e9ecef;
          }
          
          .footer p {
            color: #6c757d;
            font-size: 14px;
            margin-bottom: 10px;
          }
          
          @media print {
            body { 
              background: white;
              padding: 0; 
            }
            .print-button { 
              display: none; 
            }
            .content { 
              box-shadow: none;
              border-radius: 0;
            }
          }
        </style>
      </head>
      <body>
        <div class="content">
          <div class="header">
            <h1>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—è</h1>
            <p>–°–æ–∑–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</p>
            <button class="print-button" onclick="window.print()">–ü–µ—á–∞—Ç—å</button>
          </div>
          
          <div class="preparation-content">
            ${formatPlanContent(plan)}
          </div>
          
          <div class="footer">
            <p>–î–∞–Ω–Ω—ã–π –ø–ª–∞–Ω —Å–æ–∑–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ç–µ—Å—Ç–µ –∏ –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.</p>
            <p>–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –∫—Ä–∏–∑–∏—Å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º.</p>
          </div>
        </div>
      </body>
      </html>
    `;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTML —Ç–æ—á–Ω–æ —Ç–∞–∫ –∂–µ, –∫–∞–∫ session-preparation
    console.log('üì§ [PDF-PERSONAL-PLAN] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTML –∫–ª–∏–µ–Ω—Ç—É, —Ä–∞–∑–º–µ—Ä:', html.length);
    res.setHeader('Content-Type', 'text/html');
    res.send(html);
    console.log('‚úÖ [PDF-PERSONAL-PLAN] HTML —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É');
  } catch (error) {
    console.error('‚ùå [PDF-PERSONAL-PLAN] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', {
      message: error.message,
      stack: error.stack
    });
    res.status(500).json({ success: false, error: error.message });
  }
});

// –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —Å–µ–∞–Ω—Å—É
router.post('/session-preparation', async (req, res) => {
  try {
    if (isPdfDisabled) {
      return res.status(503).json({ 
        success: false, 
        error: 'PDF generation is disabled. Please contact support.' 
      });
    }

    const { sessionId, specialistType } = req.body;
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –æ—Ç Gemini AI
    const baseUrl = process.env.BACKEND_URL || `http://127.0.0.1:${process.env.PORT || 5000}`;
    const prepResponse = await fetch(`${baseUrl}/api/ai/session-preparation`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ sessionId, specialistType }),
    });

    const prepData = await prepResponse.json();
    if (!prepData.success) {
      return res.status(500).json({ success: false, error: 'Failed to generate preparation' });
    }

    const preparation = prepData.preparation;
    const specialistName = specialistType === 'psychologist' ? '–ø—Å–∏—Ö–æ–ª–æ–≥—É' : '–ø—Å–∏—Ö–∏–∞—Ç—Ä—É';

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º HTML –≤–º–µ—Å—Ç–æ PDF
    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <title>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–µ–∞–Ω—Å—É</title>
        <style>
          * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
          }
          
          body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.7;
            color: #2c3e50;
            background: #f8f9fa;
            padding: 20px;
          }
          
          .content {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
            overflow: hidden;
          }
          
          .header {
            background: linear-gradient(135deg, #00695c 0%, #4db6ac 100%);
            color: white;
            padding: 40px 30px;
            text-align: center;
          }
          
          .header h1 {
            font-size: 24px;
            font-weight: 400;
            margin-bottom: 10px;
            letter-spacing: 0.5px;
          }
          
          .header p {
            font-size: 16px;
            opacity: 0.9;
            margin-bottom: 25px;
          }
          
          .print-button {
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: 2px solid rgba(255, 255, 255, 0.3);
            padding: 10px 25px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s ease;
          }
          
          .print-button:hover {
            background: rgba(255, 255, 255, 0.3);
            border-color: rgba(255, 255, 255, 0.5);
          }
          
          .warning {
            background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
            border-left: 4px solid #f39c12;
            padding: 20px;
            margin: 0;
            color: #856404;
            font-weight: 500;
          }
          
          .preparation-content {
            padding: 40px;
            font-size: 16px;
            line-height: 1.8;
          }
          
          /* –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ —Å—Ç–∏–ª–∏ —á—Ç–æ –∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ */
          .preparation-content .main-title {
            font-size: 28px;
            color: #00695c;
            font-weight: 600;
            margin: 40px 0 25px 0;
            padding-bottom: 15px;
            border-bottom: 3px solid #00695c;
            text-align: center;
          }
          
          .preparation-content .main-title:first-child {
            margin-top: 0;
          }
          
          .preparation-content .section-title {
            font-size: 22px;
            color: #2c3e50;
            font-weight: 600;
            margin: 35px 0 20px 0;
            padding-left: 15px;
            border-left: 4px solid #4db6ac;
            background: linear-gradient(90deg, #f8f9fa 0%, transparent 100%);
            padding: 15px 0 15px 15px;
          }
          
          .preparation-content .subsection-title {
            font-size: 19px;
            color: #34495e;
            font-weight: 600;
            margin: 25px 0 15px 0;
            padding-left: 10px;
            border-left: 3px solid #81c784;
          }
          
          .preparation-content .minor-title {
            font-size: 17px;
            color: #5d6d7e;
            font-weight: 500;
            margin: 20px 0 10px 0;
            padding-left: 8px;
            border-left: 2px solid #a5d6a7;
          }
          
          .preparation-content .plan-paragraph {
            margin-bottom: 18px;
            text-align: justify;
            color: #34495e;
            line-height: 1.7;
          }
          
          .preparation-content .plan-paragraph strong {
            color: #2c3e50;
            font-weight: 600;
          }
          
          .preparation-content .plan-paragraph em {
            color: #5d6d7e;
            font-style: italic;
          }
          
          .preparation-content .plan-paragraph code {
            background: #f8f9fa;
            padding: 2px 6px;
            border-radius: 4px;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            color: #e74c3c;
          }
          
          .preparation-content .plan-list {
            margin: 20px 0;
            padding-left: 0;
            list-style: none;
          }
          
          .preparation-content .plan-list li {
            margin-bottom: 12px;
            padding-left: 25px;
            position: relative;
            color: #34495e;
            line-height: 1.6;
          }
          
          .preparation-content .plan-list li:before {
            content: "‚Üí";
            position: absolute;
            left: 0;
            color: #00695c;
            font-weight: bold;
            font-size: 16px;
          }
          
          .preparation-content .plan-list li strong {
            color: #2c3e50;
            font-weight: 600;
          }
          
          .footer {
            background: #f8f9fa;
            padding: 30px;
            text-align: center;
            border-top: 1px solid #e9ecef;
          }
          
          .footer p {
            color: #6c757d;
            font-size: 14px;
            margin-bottom: 10px;
          }
          
          @media print {
            body { 
              background: white;
              padding: 0; 
            }
            .print-button { 
              display: none; 
            }
            .content { 
              box-shadow: none;
              border-radius: 0;
            }
          }
        </style>
      </head>
      <body>
        <div class="content">
          <div class="header">
            <h1>–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–µ–∞–Ω—Å—É —Å ${specialistName}</h1>
            <p>–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏</p>
            <button class="print-button" onclick="window.print()">–ü–µ—á–∞—Ç—å</button>
          </div>
          
          <div class="warning">
            <strong>–í–∞–∂–Ω–æ:</strong> –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π –∏—Å—Ç–æ—Ä–∏—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π –∏ –ø—Ä–∏—ë–º–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤, –µ—Å–ª–∏ –æ–±—Ä–∞—â–∞–µ—Ç–µ—Å—å –∫ –ø—Å–∏—Ö–∏–∞—Ç—Ä—É.
          </div>
          
          <div class="preparation-content">
            ${formatPlanContent(preparation)}
          </div>
          
          <div class="footer">
            <p>–î–∞–Ω–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –≤ —Ç–µ—Å—Ç–µ –∏ –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.</p>
          </div>
        </div>
      </body>
      </html>
    `;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTML
    res.setHeader('Content-Type', 'text/html');
    res.send(html);
  } catch (error) {
    console.error('Error generating preparation:', error);
    res.status(500).json({ success: false, error: error.message });
  }
});

// –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞
router.post('/psychologist-pdf', async (req, res) => {
  try {
    console.log('üéØ [PDF-PSYCHOLOGIST-PDF] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞');
    
    if (isPdfDisabled) {
      console.log('‚ö†Ô∏è [PDF-PSYCHOLOGIST-PDF] PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞');
      return res.status(503).json({ 
        success: false, 
        error: 'PDF generation is disabled. Please contact support.' 
      });
    }

    const { sessionId } = req.body;
    console.log('üéØ [PDF-PSYCHOLOGIST-PDF] SessionId:', sessionId);
    
    if (!sessionId) {
      console.error('‚ùå [PDF-PSYCHOLOGIST-PDF] SessionId –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω');
      return res.status(400).json({ success: false, error: 'SessionId is required' });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º PDF –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –æ—Ç AI API
    const baseUrl = process.env.BACKEND_URL || `http://127.0.0.1:${process.env.PORT || 5000}`;
    console.log('üîó [PDF-PSYCHOLOGIST-PDF] –í—ã–∑—ã–≤–∞–µ–º AI API:', `${baseUrl}/api/ai/psychologist-pdf`);
    
    const pdfResponse = await fetch(`${baseUrl}/api/ai/psychologist-pdf`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ sessionId }),
    });

    console.log('üì• [PDF-PSYCHOLOGIST-PDF] –û—Ç–≤–µ—Ç –æ—Ç AI API:', pdfResponse.status, pdfResponse.statusText);

    if (!pdfResponse.ok) {
      const errorText = await pdfResponse.text();
      console.error('‚ùå [PDF-PSYCHOLOGIST-PDF] –û—à–∏–±–∫–∞ –æ—Ç AI API:', errorText);
      return res.status(500).json({ success: false, error: 'Failed to generate psychologist PDF' });
    }

    const pdfData = await pdfResponse.json();
    
    if (!pdfData.success || !pdfData.psychologistPdf) {
      console.error('‚ùå [PDF-PSYCHOLOGIST-PDF] AI API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –∏–ª–∏ –ø—É—Å—Ç–æ–π PDF');
      return res.status(500).json({ success: false, error: 'Failed to generate psychologist PDF' });
    }

    const psychologistPdf = pdfData.psychologistPdf;
    console.log('‚úÖ [PDF-PSYCHOLOGIST-PDF] PDF –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞:', psychologistPdf.length, '—Å–∏–º–≤–æ–ª–æ–≤');

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è HTML
    const formattedContent = formatPlanContent(psychologistPdf);
    
    // –°–æ–∑–¥–∞–µ–º HTML –¥–æ–∫—É–º–µ–Ω—Ç
    const html = `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PDF –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background: #f8f9fa;
        }
        .header {
            text-align: center;
            margin-bottom: 30px;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border-radius: 10px;
        }
        .header h1 {
            margin: 0;
            font-size: 24px;
            font-weight: 600;
        }
        .header p {
            margin: 5px 0 0 0;
            opacity: 0.9;
            font-size: 16px;
        }
        .content {
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .content h2 {
            color: #2c3e50;
            border-bottom: 2px solid #3498db;
            padding-bottom: 10px;
            margin-top: 30px;
            margin-bottom: 20px;
        }
        .content h2:first-child {
            margin-top: 0;
        }
        .content h3 {
            color: #34495e;
            margin-top: 25px;
            margin-bottom: 15px;
        }
        .content p {
            margin-bottom: 15px;
            text-align: justify;
        }
        .content ul, .content ol {
            margin-bottom: 15px;
            padding-left: 25px;
        }
        .content li {
            margin-bottom: 8px;
        }
        .highlight {
            background: #fff3cd;
            padding: 15px;
            border-left: 4px solid #ffc107;
            margin: 20px 0;
            border-radius: 4px;
        }
        .footer {
            text-align: center;
            margin-top: 30px;
            padding: 20px;
            color: #666;
            font-size: 14px;
            border-top: 1px solid #eee;
        }
        @media print {
            body { background: white; }
            .header { background: #667eea !important; }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>PDF –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞</h1>
        <p>–ö—Ä–∞—Ç–∫–∞—è –≤—ã–∂–∏–º–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</p>
    </div>
    
    <div class="content">
        ${formattedContent}
    </div>
    
    <div class="footer">
        <p>–î–æ–∫—É–º–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</p>
        <p>–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è: ${new Date().toLocaleDateString('ru-RU', { 
          year: 'numeric', 
          month: 'long', 
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        })}</p>
    </div>
</body>
</html>`;

    console.log('‚úÖ [PDF-PSYCHOLOGIST-PDF] HTML —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –¥–ª–∏–Ω–∞:', html.length, '—Å–∏–º–≤–æ–ª–æ–≤');
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
    const options = {
      format: 'A4',
      margin: {
        top: '20mm',
        right: '20mm',
        bottom: '20mm',
        left: '20mm'
      },
      printBackground: true,
      displayHeaderFooter: false
    };

    const pdfBuffer = await htmlPdf.generatePdf({ content: html }, options);
    
    console.log('‚úÖ [PDF-PSYCHOLOGIST-PDF] PDF —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, —Ä–∞–∑–º–µ—Ä:', pdfBuffer.length, '–±–∞–π—Ç');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è PDF —Ñ–∞–π–ª–∞
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', 'attachment; filename="psychologist-pdf.pdf"');
    res.setHeader('Content-Length', pdfBuffer.length);
    
    res.send(pdfBuffer);

  } catch (error) {
    console.error('‚ùå [PDF-PSYCHOLOGIST-PDF] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', {
      message: error.message,
      stack: error.stack,
      name: error.name
    });
    res.status(500).json({ 
      success: false, 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞',
      details: error.message 
    });
  }
});

// –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞
router.post('/psychologist', async (req, res) => {
  try {
    if (isPdfDisabled) {
      console.log('‚ö†Ô∏è [PDF-PSYCHOLOGIST] PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞');
      return res.status(503).json({ 
        success: false, 
        error: 'PDF generation is disabled. Please contact support.' 
      });
    }

    const { sessionId } = req.body;
    console.log('üéØ [PDF-PSYCHOLOGIST] SessionId:', sessionId);
    
    if (!sessionId) {
      console.error('‚ùå [PDF-PSYCHOLOGIST] SessionId –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω');
      return res.status(400).json({ success: false, error: 'SessionId is required' });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
    const { data: primaryTest, error: primaryError } = await supabase
      .from('primary_test_results')
      .select('answers, email, personal_plan')
      .eq('session_id', sessionId)
      .single();

    if (primaryError || !primaryTest) {
      console.error('‚ùå [PDF-PSYCHOLOGIST] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', primaryError);
      return res.status(404).json({ success: false, error: 'Session not found' });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    const { data: additionalTests, error: additionalError } = await supabase
      .from('additional_test_results')
      .select('test_type, answers')
      .eq('session_id', sessionId);

    if (additionalError) {
      console.error('‚ùå [PDF-PSYCHOLOGIST] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:', additionalError);
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º HTML –¥–ª—è PDF
    const html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <title>–û—Ç—á–µ—Ç –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞</title>
        <style>
          body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
          .header { text-align: center; margin-bottom: 30px; }
          .section { margin-bottom: 25px; }
          .section h2 { color: #2C3E50; border-bottom: 2px solid #4F958B; padding-bottom: 5px; }
          .test-result { background: #f8f9fa; padding: 15px; border-radius: 8px; margin: 10px 0; }
          .highlight { background: #E8F4FD; padding: 2px 4px; border-radius: 3px; }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>–û—Ç—á–µ—Ç –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞</h1>
          <p>–î–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞: ${primaryTest.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
          <p>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date().toLocaleDateString('ru-RU')}</p>
        </div>

        <div class="section">
          <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</h2>
          <div class="test-result">
            <strong>–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:</strong><br>
            ${JSON.stringify(primaryTest.answers, null, 2)}
          </div>
        </div>

        ${additionalTests && additionalTests.length > 0 ? `
        <div class="section">
          <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤</h2>
          ${additionalTests.map(test => `
            <div class="test-result">
              <strong>${test.test_type}:</strong><br>
              ${test.answers}
            </div>
          `).join('')}
        </div>
        ` : ''}

        ${primaryTest.personal_plan ? `
        <div class="section">
          <h2>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∞—Ü–∏–µ–Ω—Ç–∞</h2>
          <div class="test-result">
            ${primaryTest.personal_plan}
          </div>
        </div>
        ` : ''}

        <div class="section">
          <h2>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø—Å–∏—Ö–æ–ª–æ–≥–∞</h2>
          <div class="test-result">
            <p>–ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:</p>
            <ul>
              <li>–ü—Ä–æ–≤–µ—Å—Ç–∏ —É–≥–ª—É–±–ª–µ–Ω–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å —É—á–µ—Ç–æ–º –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤</li>
              <li>–û–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Ä–µ–≥—É–ª—è—Ü–∏—é –ø–∞—Ü–∏–µ–Ω—Ç–∞</li>
              <li>–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∫ —Ç–µ—Ä–∞–ø–∏–∏</li>
              <li>–£—á–µ—Å—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ –ª–µ—á–µ–Ω–∏—è</li>
            </ul>
          </div>
        </div>
      </body>
      </html>
    `;

    console.log('‚úÖ [PDF-PSYCHOLOGIST] HTML —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, –¥–ª–∏–Ω–∞:', html.length);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º HTML –≤–º–µ—Å—Ç–æ PDF (—Ç–∞–∫ –∫–∞–∫ PDF –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞)
    res.setHeader('Content-Type', 'text/html; charset=utf-8');
    res.send(html);

  } catch (error) {
    console.error('‚ùå [PDF-PSYCHOLOGIST] –û—à–∏–±–∫–∞:', error);
    res.status(500).json({ success: false, error: error.message });
  }
});

export default router;

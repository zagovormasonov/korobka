import express from 'express';
import { supabase } from '../index.js';
import crypto from 'crypto';

const router = express.Router();

// –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Ä–æ—É—Ç–∞
router.get('/test-route', (req, res) => {
  console.log('üß™ [DASHBOARD] Test route called');
  res.json({ 
    success: true, 
    message: 'Dashboard route is working!',
    timestamp: new Date().toISOString()
  });
});

// –°–æ–∑–¥–∞—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –õ–ö
router.post('/create-credentials', async (req, res) => {
  try {
    console.log('üì• [DASHBOARD] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    console.log('üìã [DASHBOARD] –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify(req.body, null, 2));
    
    const { sessionId, nickname, password } = req.body;

    console.log('üîç [DASHBOARD] –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', { sessionId, nickname, password });

    if (!sessionId || !nickname || !password) {
      console.log('‚ùå [DASHBOARD] –ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã');
      return res.status(400).json({ 
        success: false, 
        error: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
      });
    }

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤–æ–æ–±—â–µ –µ—Å—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ
    console.log('üîç [DASHBOARD] –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ...');
    const { data: allRecords, error: allError } = await supabase
      .from('primary_test_results')
      .select('id, session_id')
      .limit(5);

    if (allError) {
      console.error('‚ùå [DASHBOARD] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π:', allError);
    } else {
      console.log('üìä [DASHBOARD] –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ:', allRecords?.length || 0);
      console.log('üìä [DASHBOARD] –ü–µ—Ä–≤—ã–µ –∑–∞–ø–∏—Å–∏:', allRecords);
    }

    // –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Å–µ—Å—Å–∏—è
    console.log('üîç [DASHBOARD] –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏:', sessionId);
    const { data: existingSession, error: checkError } = await supabase
      .from('primary_test_results')
      .select('id, session_id')
      .eq('session_id', sessionId)
      .maybeSingle(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º maybeSingle –≤–º–µ—Å—Ç–æ single

    if (checkError) {
      console.error('‚ùå [DASHBOARD] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Å—Å–∏–∏:', checkError);
      return res.status(500).json({ 
        success: false, 
        error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–µ—Å—Å–∏–∏: ${checkError.message}` 
      });
    }

    if (!existingSession) {
      console.log('‚ùå [DASHBOARD] –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
      console.log('üîç [DASHBOARD] –ò—Å–∫–∞–ª–∏ sessionId:', sessionId);
      return res.status(404).json({ 
        success: false, 
        error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö' 
      });
    }

    console.log('‚úÖ [DASHBOARD] –°–µ—Å—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞:', existingSession);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –õ–ö
    const dashboardToken = crypto.randomUUID();
    console.log('üîë [DASHBOARD] –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:', dashboardToken);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ primary_test_results
    console.log('üíæ [DASHBOARD] –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å –¥–∞–Ω–Ω—ã–º–∏:', {
      nickname, 
      dashboard_token: dashboardToken,
      sessionId
    });

    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º —Å nickname
    let { data, error } = await supabase
      .from('primary_test_results')
      .update({
        nickname: nickname,
        dashboard_password: password,
        dashboard_token: dashboardToken,
        updated_at: new Date().toISOString()
      })
      .eq('session_id', sessionId)
      .select()
      .maybeSingle();

    // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ–º –ø–æ–ª—è nickname, –ø–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ –Ω–µ–≥–æ
    if (error && error.message && error.message.includes('nickname')) {
      console.log('‚ö†Ô∏è [DASHBOARD] –ü–æ–ª–µ nickname –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–±—É–µ–º –±–µ–∑ –Ω–µ–≥–æ');
      
      const result = await supabase
        .from('primary_test_results')
        .update({
          dashboard_password: password,
          dashboard_token: dashboardToken,
          updated_at: new Date().toISOString()
        })
        .eq('session_id', sessionId)
        .select()
        .maybeSingle();
      
      data = result.data;
      error = result.error;
    }

    if (error) {
      console.error('‚ùå [DASHBOARD] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
      console.error('‚ùå [DASHBOARD] –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        message: error.message,
        code: error.code,
        details: error.details,
        hint: error.hint
      });
      return res.status(500).json({ 
        success: false, 
        error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ${error.message}` 
      });
    }

    if (!data) {
      console.log('‚ùå [DASHBOARD] –î–∞–Ω–Ω—ã–µ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã (—Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)');
      return res.status(404).json({ 
        success: false, 
        error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' 
      });
    }

    console.log('‚úÖ [DASHBOARD] –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è —Å–µ—Å—Å–∏–∏:', sessionId);
    console.log('‚úÖ [DASHBOARD] –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', data);

    res.json({ 
      success: true, 
      dashboardToken,
      message: '–£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã'
    });

  } catch (error) {
    console.error('‚ùå [DASHBOARD] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
    console.error('‚ùå [DASHBOARD] Stack trace:', error.stack);
    res.status(500).json({ 
      success: false, 
      error: `–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}` 
    });
  }
});

export default router;

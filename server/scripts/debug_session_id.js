import { supabase } from '../index.js';

async function debugSessionId() {
  try {
    console.log('üîç [DEBUG] –ü—Ä–æ–≤–µ—Ä—è–µ–º sessionId –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å session_id
    const { data, error } = await supabase
      .from('primary_test_results')
      .select('session_id, dashboard_token, nickname, personal_plan_unlocked')
      .limit(10);
    
    if (error) {
      console.error('‚ùå [DEBUG] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
      return;
    }
    
    console.log('üìä [DEBUG] –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:', data.length);
    
    data.forEach((record, index) => {
      console.log(`\n--- –ó–∞–ø–∏—Å—å ${index + 1} ---`);
      console.log('Session ID:', record.session_id);
      console.log('Session ID —Ç–∏–ø:', typeof record.session_id);
      console.log('Session ID –¥–ª–∏–Ω–∞:', record.session_id?.length);
      console.log('Dashboard Token:', record.dashboard_token ? '–µ—Å—Ç—å' : '–Ω–µ—Ç');
      console.log('Nickname:', record.nickname || '–Ω–µ —É–∫–∞–∑–∞–Ω');
      console.log('Personal Plan Unlocked:', record.personal_plan_unlocked);
      console.log('Personal Plan Unlocked —Ç–∏–ø:', typeof record.personal_plan_unlocked);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–∏—Å–∏ —Å session_id = true
    const trueSessionIds = data.filter(record => record.session_id === true);
    if (trueSessionIds.length > 0) {
      console.log('\n‚ö†Ô∏è [DEBUG] –ù–∞–π–¥–µ–Ω—ã –∑–∞–ø–∏—Å–∏ —Å session_id = true:');
      trueSessionIds.forEach(record => {
        console.log('- ID –∑–∞–ø–∏—Å–∏:', record.id || '–Ω–µ —É–∫–∞–∑–∞–Ω');
        console.log('- Dashboard Token:', record.dashboard_token);
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å UUID
    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
    const invalidSessionIds = data.filter(record => 
      record.session_id && 
      record.session_id !== true && 
      !uuidRegex.test(record.session_id)
    );
    
    if (invalidSessionIds.length > 0) {
      console.log('\n‚ö†Ô∏è [DEBUG] –ù–∞–π–¥–µ–Ω—ã –∑–∞–ø–∏—Å–∏ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º session_id:');
      invalidSessionIds.forEach(record => {
        console.log('- Session ID:', record.session_id);
        console.log('- Dashboard Token:', record.dashboard_token);
      });
    }
    
  } catch (error) {
    console.error('‚ùå [DEBUG] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
debugSessionId();

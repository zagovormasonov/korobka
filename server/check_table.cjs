const { Pool } = require('pg');

async function checkTable() {
  const pool = new Pool({
    connectionString: process.env.DATABASE_URL || 'postgresql://postgres:password@localhost:5432/korob_db'
  });

  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã additional_test_results...');
    
    const result = await pool.query(`
      SELECT column_name, data_type 
      FROM information_schema.columns 
      WHERE table_name = 'additional_test_results' 
      ORDER BY ordinal_position
    `);
    
    console.log('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã:');
    result.rows.forEach(row => {
      console.log(`- ${row.column_name}: ${row.data_type}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ email
    const hasEmail = result.rows.some(row => row.column_name === 'email');
    console.log(`\n–ü–æ–ª–µ email ${hasEmail ? '‚úÖ –Ω–∞–π–¥–µ–Ω–æ' : '‚ùå –ù–ï –Ω–∞–π–¥–µ–Ω–æ'}`);
    
    if (!hasEmail) {
      console.log('\nüîÑ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ email...');
      await pool.query('ALTER TABLE additional_test_results ADD COLUMN email VARCHAR(255)');
      console.log('‚úÖ –ü–æ–ª–µ email –¥–æ–±–∞–≤–ª–µ–Ω–æ');
      
      console.log('üîÑ –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å...');
      await pool.query('CREATE INDEX IF NOT EXISTS idx_additional_test_email ON additional_test_results(email)');
      console.log('‚úÖ –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω');
      
      console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏...');
      const updateResult = await pool.query(`
        UPDATE additional_test_results 
        SET email = ptr.email 
        FROM primary_test_results ptr 
        WHERE additional_test_results.session_id = ptr.session_id 
        AND additional_test_results.email IS NULL
      `);
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${updateResult.rowCount} –∑–∞–ø–∏—Å–µ–π`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    await pool.end();
  }
}

checkTable();



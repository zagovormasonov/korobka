// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç CORS —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã
const fetch = require('node-fetch');

async function testCORS() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º CORS...');
  
  try {
    // –¢–µ—Å—Ç 1: Health check
    console.log('\n1Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º health endpoint...');
    const healthResponse = await fetch('https://korobka-1.onrender.com/api/health');
    const healthData = await healthResponse.json();
    console.log('‚úÖ Health check:', healthData);
    
    // –¢–µ—Å—Ç 2: CORS test endpoint
    console.log('\n2Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º CORS endpoint...');
    const corsResponse = await fetch('https://korobka-1.onrender.com/api/test-cors', {
      method: 'GET',
      headers: {
        'Origin': 'https://idenself.com',
        'Content-Type': 'application/json'
      }
    });
    
    console.log('üìä Response status:', corsResponse.status);
    console.log('üìä Response headers:', Object.fromEntries(corsResponse.headers));
    
    const corsData = await corsResponse.json();
    console.log('‚úÖ CORS test:', corsData);
    
    // –¢–µ—Å—Ç 3: Questions endpoint
    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º questions endpoint...');
    const questionsResponse = await fetch('https://korobka-1.onrender.com/api/tests/primary/questions', {
      method: 'GET',
      headers: {
        'Origin': 'https://idenself.com',
        'Content-Type': 'application/json'
      }
    });
    
    console.log('üìä Questions status:', questionsResponse.status);
    console.log('üìä Questions headers:', Object.fromEntries(questionsResponse.headers));
    
    if (questionsResponse.ok) {
      const questionsData = await questionsResponse.json();
      console.log('‚úÖ Questions count:', questionsData.length);
    } else {
      const error = await questionsResponse.text();
      console.log('‚ùå Questions error:', error);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
  }
}

testCORS();
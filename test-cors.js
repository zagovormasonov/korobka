#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CORS –¥–ª—è –¥–æ–º–µ–Ω–∞ idenself.com
 */

import https from 'https';
import http from 'http';

const TEST_ORIGINS = [
  'https://idenself.com',
  'http://idenself.com',
  'https://www.idenself.com',
  'https://app.idenself.com',
  'https://test.idenself.com',
  'https://some-random-domain.com'
];

const SERVER_URL = 'https://idenself.com'; // –∏–ª–∏ –≤–∞—à Render URL

function testCORS(origin) {
  return new Promise((resolve) => {
    const url = new URL(`${SERVER_URL}/api/health`);
    const options = {
      hostname: url.hostname,
      path: url.pathname,
      method: 'OPTIONS',
      headers: {
        'Origin': origin,
        'Access-Control-Request-Method': 'GET',
        'Access-Control-Request-Headers': 'Content-Type'
      },
      timeout: 10000
    };

    const client = url.protocol === 'https:' ? https : http;
    const req = client.request(options, (res) => {
      const allowOrigin = res.headers['access-control-allow-origin'];
      const allowMethods = res.headers['access-control-allow-methods'];
      
      resolve({
        origin,
        status: res.statusCode,
        allowed: allowOrigin === origin || allowOrigin === '*',
        allowOrigin,
        allowMethods,
        success: res.statusCode === 200 || res.statusCode === 204
      });
    });

    req.on('error', (error) => {
      resolve({
        origin,
        status: 0,
        error: error.message,
        allowed: false,
        success: false
      });
    });

    req.on('timeout', () => {
      req.destroy();
      resolve({
        origin,
        status: 0,
        error: 'Timeout',
        allowed: false,
        success: false
      });
    });

    req.end();
  });
}

async function testAllOrigins() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ CORS –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö origins...\n');
  console.log(`üéØ –°–µ—Ä–≤–µ—Ä: ${SERVER_URL}\n`);
  
  for (const origin of TEST_ORIGINS) {
    const result = await testCORS(origin);
    
    const status = result.allowed ? '‚úÖ' : '‚ùå';
    const statusText = result.success ? `${result.status}` : `ERR (${result.error || result.status})`;
    
    console.log(`${status} ${origin}`);
    console.log(`   –°—Ç–∞—Ç—É—Å: ${statusText}`);
    
    if (result.allowOrigin) {
      console.log(`   Allow-Origin: ${result.allowOrigin}`);
    }
    
    if (result.allowMethods) {
      console.log(`   Allow-Methods: ${result.allowMethods}`);
    }
    
    if (result.error) {
      console.log(`   –û—à–∏–±–∫–∞: ${result.error}`);
    }
    
    console.log('');
  }
  
  console.log('üí° –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
  console.log('   ‚úÖ –í—Å–µ –¥–æ–º–µ–Ω—ã *idenself.com –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω—ã');
  console.log('   ‚ùå –°–ª—É—á–∞–π–Ω—ã–µ –¥–æ–º–µ–Ω—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã');
}

testAllOrigins().catch(console.error);
